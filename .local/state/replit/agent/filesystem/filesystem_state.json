{"file_contents":{"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport CreatorDashboard from \"@/pages/creator-dashboard\";\nimport Browse from \"@/pages/browse\";\nimport OfferDetail from \"@/pages/offer-detail\";\nimport Applications from \"@/pages/applications\";\nimport Analytics from \"@/pages/analytics\";\nimport Messages from \"@/pages/messages\";\nimport Favorites from \"@/pages/favorites\";\nimport CreatorRetainers from \"@/pages/creator-retainers\";\nimport CreatorRetainerDetail from \"@/pages/creator-retainer-detail\";\nimport Settings from \"@/pages/settings\";\nimport PaymentSettings from \"@/pages/payment-settings\";\nimport CompanyDashboard from \"@/pages/company-dashboard\";\nimport CompanyOffers from \"@/pages/company-offers\";\nimport CompanyOfferCreate from \"@/pages/company-offer-create\";\nimport CompanyOfferDetail from \"@/pages/company-offer-detail\";\nimport CompanyApplications from \"@/pages/company-applications\";\nimport CompanyCreators from \"@/pages/company-creators\";\nimport CompanyReviews from \"@/pages/company-reviews\";\nimport CompanyVideos from \"@/pages/company-videos\";\nimport CompanyRetainers from \"@/pages/company-retainers\";\nimport CompanyRetainerDetail from \"@/pages/company-retainer-detail\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminReviews from \"@/pages/admin-reviews\";\nimport AdminCompanies from \"@/pages/admin-companies\";\nimport AdminOffers from \"@/pages/admin-offers\";\nimport AdminCreators from \"@/pages/admin-creators\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Show landing, login, or register pages while loading or not authenticated\n  if (isLoading || !isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route component={Landing} />\n      </Switch>\n    );\n  }\n\n  // Custom sidebar width for the application\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center gap-4 px-6 py-4 border-b shrink-0\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <div className=\"container max-w-screen-2xl mx-auto p-6\">\n              <Switch>\n                {/* Creator Routes */}\n                {user?.role === 'creator' && (\n                  <>\n                    <Route path=\"/\" component={CreatorDashboard} />\n                    <Route path=\"/creator/dashboard\" component={CreatorDashboard} />\n                    <Route path=\"/browse\" component={Browse} />\n                    <Route path=\"/offers/:id\" component={OfferDetail} />\n                    <Route path=\"/retainers\" component={CreatorRetainers} />\n                    <Route path=\"/retainers/:id\" component={CreatorRetainerDetail} />\n                    <Route path=\"/applications\" component={Applications} />\n                    <Route path=\"/analytics\" component={Analytics} />\n                    <Route path=\"/messages\" component={Messages} />\n                    <Route path=\"/favorites\" component={Favorites} />\n                  </>\n                )}\n\n                {/* Company Routes */}\n                {user?.role === 'company' && (\n                  <>\n                    <Route path=\"/\" component={CompanyDashboard} />\n                    <Route path=\"/company\" component={CompanyDashboard} />\n                    <Route path=\"/company/dashboard\" component={CompanyDashboard} />\n                    <Route path=\"/company/offers\" component={CompanyOffers} />\n                    <Route path=\"/company/offers/create\" component={CompanyOfferCreate} />\n                    <Route path=\"/company/offers/:id\" component={CompanyOfferDetail} />\n                    <Route path=\"/company/videos\" component={CompanyVideos} />\n                    <Route path=\"/company/retainers\" component={CompanyRetainers} />\n                    <Route path=\"/company/retainers/:id\" component={CompanyRetainerDetail} />\n                    <Route path=\"/company/applications\" component={CompanyApplications} />\n                    <Route path=\"/company/creators\" component={CompanyCreators} />\n                    <Route path=\"/company/analytics\" component={Analytics} />\n                    <Route path=\"/company/messages\" component={Messages} />\n                    <Route path=\"/company/reviews\" component={CompanyReviews} />\n                  </>\n                )}\n\n                {/* Admin Routes */}\n                {user?.role === 'admin' && (\n                  <>\n                    <Route path=\"/\" component={AdminDashboard} />\n                    <Route path=\"/admin\" component={AdminDashboard} />\n                    <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n                    <Route path=\"/admin/companies\" component={AdminCompanies} />\n                    <Route path=\"/admin/offers\" component={AdminOffers} />\n                    <Route path=\"/admin/creators\" component={AdminCreators} />\n                    <Route path=\"/admin/reviews\" component={AdminReviews} />\n                    <Route path=\"/admin/users\" component={AdminDashboard} />\n                  </>\n                )}\n\n                {/* Shared Routes */}\n                <Route path=\"/settings\" component={Settings} />\n                <Route path=\"/payment-settings\" component={PaymentSettings} />\n\n                {/* Fallback */}\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6661},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\nexport class ObjectStorageService {\n  constructor() {}\n\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n    return null;\n  }\n\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      const [metadata] = await file.getMetadata();\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      \n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${isPublic ? \"public\" : \"private\"}, max-age=${cacheTtlSec}`,\n      });\n\n      const stream = file.createReadStream();\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, make sure you're running on Replit`\n    );\n  }\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":7172},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/storage.ts":{"content":"import { eq, and, desc, sql, count } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport * as geoip from \"geoip-lite\";\nimport {\n  users,\n  creatorProfiles,\n  companyProfiles,\n  offers,\n  offerVideos,\n  applications,\n  conversations,\n  messages,\n  reviews,\n  favorites,\n  analytics,\n  clickEvents,\n  paymentSettings,\n  payments,\n  retainerContracts,\n  retainerApplications,\n  retainerDeliverables,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type CreatorProfile,\n  type InsertCreatorProfile,\n  type CompanyProfile,\n  type InsertCompanyProfile,\n  type Offer,\n  type InsertOffer,\n  type OfferVideo,\n  type InsertOfferVideo,\n  type Application,\n  type InsertApplication,\n  type Message,\n  type InsertMessage,\n  type Review,\n  type InsertReview,\n  type Favorite,\n  type InsertFavorite,\n  type ClickEvent,\n  type InsertClickEvent,\n  type PaymentSetting,\n  type InsertPaymentSetting,\n  type Payment,\n  type InsertPayment,\n  type RetainerContract,\n  type InsertRetainerContract,\n  type RetainerApplication,\n  type InsertRetainerApplication,\n  type RetainerDeliverable,\n  type InsertRetainerDeliverable,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  getAllCreators(): Promise<any[]>;\n  suspendUser(id: string): Promise<User | undefined>;\n  unsuspendUser(id: string): Promise<User | undefined>;\n  banUser(id: string): Promise<User | undefined>;\n\n  // Creator Profiles\n  getCreatorProfile(userId: string): Promise<CreatorProfile | undefined>;\n  createCreatorProfile(profile: InsertCreatorProfile): Promise<CreatorProfile>;\n  updateCreatorProfile(userId: string, updates: Partial<InsertCreatorProfile>): Promise<CreatorProfile | undefined>;\n\n  // Company Profiles\n  getCompanyProfile(userId: string): Promise<CompanyProfile | undefined>;\n  getCompanyProfileById(id: string): Promise<CompanyProfile | undefined>;\n  createCompanyProfile(profile: InsertCompanyProfile): Promise<CompanyProfile>;\n  updateCompanyProfile(userId: string, updates: Partial<InsertCompanyProfile>): Promise<CompanyProfile | undefined>;\n  getPendingCompanies(): Promise<CompanyProfile[]>;\n  approveCompany(companyId: string): Promise<CompanyProfile | undefined>;\n  rejectCompany(companyId: string, reason: string): Promise<CompanyProfile | undefined>;\n\n  // Offers\n  getOffer(id: string): Promise<Offer | undefined>;\n  getOffers(filters?: any): Promise<Offer[]>;\n  getOffersByCompany(companyId: string): Promise<Offer[]>;\n  createOffer(offer: InsertOffer): Promise<Offer>;\n  updateOffer(id: string, updates: Partial<InsertOffer>): Promise<Offer | undefined>;\n  deleteOffer(id: string): Promise<void>;\n  getPendingOffers(): Promise<Offer[]>;\n  approveOffer(offerId: string): Promise<Offer | undefined>;\n\n  // Offer Videos\n  getOfferVideos(offerId: string): Promise<OfferVideo[]>;\n  createOfferVideo(video: InsertOfferVideo): Promise<OfferVideo>;\n  deleteOfferVideo(id: string): Promise<void>;\n\n  // Applications\n  getApplication(id: string): Promise<Application | undefined>;\n  getApplicationByTrackingCode(trackingCode: string): Promise<Application | undefined>;\n  getApplicationsByCreator(creatorId: string): Promise<Application[]>;\n  getApplicationsByOffer(offerId: string): Promise<Application[]>;\n  getAllPendingApplications(): Promise<Application[]>;\n  createApplication(application: InsertApplication): Promise<Application>;\n  updateApplication(id: string, updates: Partial<InsertApplication>): Promise<Application | undefined>;\n  approveApplication(id: string, trackingLink: string, trackingCode: string): Promise<Application | undefined>;\n  completeApplication(id: string): Promise<Application | undefined>;\n  getApplicationsByCompany(companyId: string): Promise<any[]>;\n\n  // Messages & Conversations\n  getConversation(id: string): Promise<any>;\n  getConversationsByUser(userId: string, userRole: string, companyProfileId?: string | null): Promise<any[]>;\n  createConversation(data: any): Promise<any>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  getMessages(conversationId: string): Promise<Message[]>;\n  markMessagesAsRead(conversationId: string, userId: string): Promise<void>;\n\n  // Reviews\n  getReviewsByCompany(companyId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  updateReview(id: string, updates: Partial<InsertReview>): Promise<Review | undefined>;\n\n  // Favorites\n  getFavoritesByCreator(creatorId: string): Promise<Favorite[]>;\n  isFavorite(creatorId: string, offerId: string): Promise<boolean>;\n  createFavorite(favorite: InsertFavorite): Promise<Favorite>;\n  deleteFavorite(creatorId: string, offerId: string): Promise<void>;\n\n  // Analytics\n  getAnalyticsByCreator(creatorId: string): Promise<any>;\n  getAnalyticsTimeSeriesByCreator(creatorId: string, dateRange: string): Promise<any[]>;\n  getAnalyticsByApplication(applicationId: string): Promise<any[]>;\n  logTrackingClick(applicationId: string, clickData: { ip: string; userAgent: string; referer: string; timestamp: Date }): Promise<void>;\n\n  // Payment Settings\n  getPaymentSettings(userId: string): Promise<PaymentSetting[]>;\n  createPaymentSetting(setting: InsertPaymentSetting): Promise<PaymentSetting>;\n  deletePaymentSetting(id: string): Promise<void>;\n\n  // Payments\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getPayment(id: string): Promise<Payment | undefined>;\n  getPaymentsByCreator(creatorId: string): Promise<Payment[]>;\n  getPaymentsByCompany(companyId: string): Promise<Payment[]>;\n  getAllPayments(): Promise<any[]>;\n  updatePaymentStatus(id: string, status: string, updates?: Partial<InsertPayment>): Promise<Payment | undefined>;\n\n  // Retainer Contracts\n  getRetainerContract(id: string): Promise<any>;\n  getRetainerContracts(filters?: any): Promise<any[]>;\n  getRetainerContractsByCompany(companyId: string): Promise<any[]>;\n  getRetainerContractsByCreator(creatorId: string): Promise<any[]>;\n  getOpenRetainerContracts(): Promise<any[]>;\n  createRetainerContract(contract: any): Promise<any>;\n  updateRetainerContract(id: string, updates: any): Promise<any>;\n  deleteRetainerContract(id: string): Promise<void>;\n\n  // Retainer Applications\n  getRetainerApplication(id: string): Promise<any>;\n  getRetainerApplicationsByContract(contractId: string): Promise<any[]>;\n  getRetainerApplicationsByCreator(creatorId: string): Promise<any[]>;\n  createRetainerApplication(application: any): Promise<any>;\n  updateRetainerApplication(id: string, updates: any): Promise<any>;\n  approveRetainerApplication(id: string, contractId: string, creatorId: string): Promise<any>;\n  rejectRetainerApplication(id: string): Promise<any>;\n\n  // Retainer Deliverables\n  getRetainerDeliverable(id: string): Promise<any>;\n  getRetainerDeliverablesByContract(contractId: string): Promise<any[]>;\n  getRetainerDeliverablesByCreator(creatorId: string): Promise<any[]>;\n  getRetainerDeliverablesForMonth(contractId: string, monthNumber: number): Promise<any[]>;\n  createRetainerDeliverable(deliverable: any): Promise<any>;\n  updateRetainerDeliverable(id: string, updates: any): Promise<any>;\n  approveRetainerDeliverable(id: string, reviewNotes?: string): Promise<any>;\n  rejectRetainerDeliverable(id: string, reviewNotes: string): Promise<any>;\n  requestRevision(id: string, reviewNotes: string): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getAllCreators(): Promise<any[]> {\n    const creators = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        accountStatus: users.accountStatus,\n        createdAt: users.createdAt,\n        profile: creatorProfiles,\n      })\n      .from(users)\n      .leftJoin(creatorProfiles, eq(users.id, creatorProfiles.userId))\n      .where(eq(users.role, 'creator'))\n      .orderBy(desc(users.createdAt));\n\n    return creators;\n  }\n\n  async suspendUser(id: string): Promise<User | undefined> {\n    const result = await db\n      .update(users)\n      .set({ accountStatus: 'suspended', updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async unsuspendUser(id: string): Promise<User | undefined> {\n    const result = await db\n      .update(users)\n      .set({ accountStatus: 'active', updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async banUser(id: string): Promise<User | undefined> {\n    const result = await db\n      .update(users)\n      .set({ accountStatus: 'banned', updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Creator Profiles\n  async getCreatorProfile(userId: string): Promise<CreatorProfile | undefined> {\n    const result = await db.select().from(creatorProfiles).where(eq(creatorProfiles.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async createCreatorProfile(profile: InsertCreatorProfile): Promise<CreatorProfile> {\n    const result = await db.insert(creatorProfiles).values(profile).returning();\n    return result[0];\n  }\n\n  async updateCreatorProfile(userId: string, updates: Partial<InsertCreatorProfile>): Promise<CreatorProfile | undefined> {\n    const result = await db\n      .update(creatorProfiles)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(creatorProfiles.userId, userId))\n      .returning();\n    return result[0];\n  }\n\n  // Company Profiles\n  async getCompanyProfile(userId: string): Promise<CompanyProfile | undefined> {\n    const result = await db.select().from(companyProfiles).where(eq(companyProfiles.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async getCompanyProfileById(id: string): Promise<CompanyProfile | undefined> {\n    const result = await db.select().from(companyProfiles).where(eq(companyProfiles.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCompanyProfile(profile: InsertCompanyProfile): Promise<CompanyProfile> {\n    const result = await db.insert(companyProfiles).values(profile).returning();\n    return result[0];\n  }\n\n  async updateCompanyProfile(userId: string, updates: Partial<InsertCompanyProfile>): Promise<CompanyProfile | undefined> {\n    const result = await db\n      .update(companyProfiles)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(companyProfiles.userId, userId))\n      .returning();\n    return result[0];\n  }\n\n  async getPendingCompanies(): Promise<CompanyProfile[]> {\n    return await db.select().from(companyProfiles).where(eq(companyProfiles.status, 'pending')).orderBy(desc(companyProfiles.createdAt));\n  }\n\n  async approveCompany(companyId: string): Promise<CompanyProfile | undefined> {\n    const result = await db\n      .update(companyProfiles)\n      .set({ status: 'approved', approvedAt: new Date(), updatedAt: new Date() })\n      .where(eq(companyProfiles.id, companyId))\n      .returning();\n    return result[0];\n  }\n\n  async rejectCompany(companyId: string, reason: string): Promise<CompanyProfile | undefined> {\n    const result = await db\n      .update(companyProfiles)\n      .set({ status: 'rejected', rejectionReason: reason, updatedAt: new Date() })\n      .where(eq(companyProfiles.id, companyId))\n      .returning();\n    return result[0];\n  }\n\n  // Offers\n  async getOffer(id: string): Promise<Offer | undefined> {\n    const result = await db.select().from(offers).where(eq(offers.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getOffers(filters?: any): Promise<Offer[]> {\n    return await db.select().from(offers).where(eq(offers.status, 'approved')).orderBy(desc(offers.createdAt)).limit(100);\n  }\n\n  async getOffersByCompany(companyId: string): Promise<Offer[]> {\n    return await db.select().from(offers).where(eq(offers.companyId, companyId)).orderBy(desc(offers.createdAt));\n  }\n\n  async createOffer(offer: InsertOffer): Promise<Offer> {\n    const result = await db.insert(offers).values(offer).returning();\n    return result[0];\n  }\n\n  async updateOffer(id: string, updates: Partial<InsertOffer>): Promise<Offer | undefined> {\n    const result = await db\n      .update(offers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(offers.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteOffer(id: string): Promise<void> {\n    await db.delete(offers).where(eq(offers.id, id));\n  }\n\n  async getPendingOffers(): Promise<Offer[]> {\n    return await db.select().from(offers).where(eq(offers.status, 'pending_review')).orderBy(desc(offers.createdAt));\n  }\n\n  async approveOffer(offerId: string): Promise<Offer | undefined> {\n    const result = await db\n      .update(offers)\n      .set({ status: 'approved', approvedAt: new Date(), updatedAt: new Date() })\n      .where(eq(offers.id, offerId))\n      .returning();\n    return result[0];\n  }\n\n  // Offer Videos\n  async getOfferVideos(offerId: string): Promise<OfferVideo[]> {\n    return await db.select().from(offerVideos).where(eq(offerVideos.offerId, offerId)).orderBy(offerVideos.orderIndex);\n  }\n\n  async createOfferVideo(video: InsertOfferVideo): Promise<OfferVideo> {\n    const result = await db.insert(offerVideos).values(video).returning();\n    return result[0];\n  }\n\n  async deleteOfferVideo(id: string): Promise<void> {\n    await db.delete(offerVideos).where(eq(offerVideos.id, id));\n  }\n\n  // Applications\n  async getApplication(id: string): Promise<Application | undefined> {\n    const result = await db.select().from(applications).where(eq(applications.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getApplicationByTrackingCode(trackingCode: string): Promise<Application | undefined> {\n    const result = await db.select().from(applications).where(eq(applications.trackingCode, trackingCode)).limit(1);\n    return result[0];\n  }\n\n  async getApplicationsByCreator(creatorId: string): Promise<Application[]> {\n    return await db.select().from(applications).where(eq(applications.creatorId, creatorId)).orderBy(desc(applications.createdAt));\n  }\n\n  async getApplicationsByOffer(offerId: string): Promise<Application[]> {\n    return await db.select().from(applications).where(eq(applications.offerId, offerId)).orderBy(desc(applications.createdAt));\n  }\n\n  async getAllPendingApplications(): Promise<Application[]> {\n    return await db.select().from(applications).where(eq(applications.status, 'pending')).orderBy(applications.autoApprovalScheduledAt);\n  }\n\n  async createApplication(application: InsertApplication): Promise<Application> {\n    const autoApprovalTime = new Date();\n    autoApprovalTime.setMinutes(autoApprovalTime.getMinutes() + 7); // Auto-approve after 7 minutes\n\n    const result = await db.insert(applications).values({\n      ...application,\n      autoApprovalScheduledAt: autoApprovalTime,\n    }).returning();\n    return result[0];\n  }\n\n  async updateApplication(id: string, updates: Partial<InsertApplication>): Promise<Application | undefined> {\n    const result = await db\n      .update(applications)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(applications.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async approveApplication(id: string, trackingLink: string, trackingCode: string): Promise<Application | undefined> {\n    const result = await db\n      .update(applications)\n      .set({\n        status: 'approved',\n        trackingLink,\n        trackingCode,\n        approvedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(applications.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async completeApplication(id: string): Promise<Application | undefined> {\n    const result = await db\n      .update(applications)\n      .set({\n        status: 'completed',\n        completedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(applications.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getApplicationsByCompany(companyId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: applications.id,\n        offerId: applications.offerId,\n        offerTitle: offers.title,\n        creatorId: applications.creatorId,\n        creatorName: sql<string>`COALESCE(${users.firstName} || ' ' || ${users.lastName}, ${users.email})`,\n        creatorEmail: users.email,\n        message: applications.message,\n        status: applications.status,\n        trackingLink: applications.trackingLink,\n        trackingCode: applications.trackingCode,\n        approvedAt: applications.approvedAt,\n        completedAt: applications.completedAt,\n        createdAt: applications.createdAt,\n        updatedAt: applications.updatedAt,\n        // Include full creator data\n        creatorFirstName: users.firstName,\n        creatorLastName: users.lastName,\n        creatorProfileImageUrl: users.profileImageUrl,\n        creatorBio: creatorProfiles.bio,\n        creatorYoutubeUrl: creatorProfiles.youtubeUrl,\n        creatorTiktokUrl: creatorProfiles.tiktokUrl,\n        creatorInstagramUrl: creatorProfiles.instagramUrl,\n        creatorNiches: creatorProfiles.niches,\n        // Analytics aggregations\n        clickCount: sql<number>`COALESCE(SUM(${analytics.clicks}), 0)`,\n        uniqueClickCount: sql<number>`COALESCE(SUM(${analytics.uniqueClicks}), 0)`,\n        conversionCount: sql<number>`COALESCE(SUM(${analytics.conversions}), 0)`,\n        totalEarnings: sql<string>`COALESCE(SUM(${analytics.earnings}), 0)`,\n      })\n      .from(applications)\n      .innerJoin(offers, eq(applications.offerId, offers.id))\n      .innerJoin(users, eq(applications.creatorId, users.id))\n      .leftJoin(creatorProfiles, eq(users.id, creatorProfiles.userId))\n      .leftJoin(analytics, eq(applications.id, analytics.applicationId))\n      .where(eq(offers.companyId, companyId))\n      .groupBy(\n        applications.id,\n        offers.id,\n        users.id,\n        creatorProfiles.id\n      )\n      .orderBy(desc(applications.createdAt));\n    \n    // Transform the data to include a nested creator object\n    return result.map(app => ({\n      id: app.id,\n      offerId: app.offerId,\n      offerTitle: app.offerTitle,\n      creatorId: app.creatorId,\n      creatorName: app.creatorName,\n      creatorEmail: app.creatorEmail,\n      message: app.message,\n      status: app.status,\n      trackingLink: app.trackingLink,\n      trackingCode: app.trackingCode,\n      approvedAt: app.approvedAt,\n      completedAt: app.completedAt,\n      createdAt: app.createdAt,\n      updatedAt: app.updatedAt,\n      clickCount: app.clickCount,\n      conversionCount: app.conversionCount,\n      totalEarnings: app.totalEarnings,\n      creator: {\n        id: app.creatorId,\n        firstName: app.creatorFirstName,\n        lastName: app.creatorLastName,\n        email: app.creatorEmail,\n        profileImageUrl: app.creatorProfileImageUrl,\n        bio: app.creatorBio,\n        youtubeUrl: app.creatorYoutubeUrl,\n        tiktokUrl: app.creatorTiktokUrl,\n        instagramUrl: app.creatorInstagramUrl,\n        niches: app.creatorNiches,\n      }\n    }));\n  }\n\n  // Messages & Conversations\n  async getConversation(id: string): Promise<any> {\n    const result = await db.select().from(conversations).where(eq(conversations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getConversationsByUser(userId: string, userRole: string, companyProfileId: string | null = null): Promise<any[]> {\n    // Build the where clause based on role\n    const whereClause = userRole === 'company' && companyProfileId\n      ? eq(conversations.companyId, companyProfileId)\n      : eq(conversations.creatorId, userId);\n\n    const result = await db\n      .select({\n        id: conversations.id,\n        applicationId: conversations.applicationId,\n        creatorId: conversations.creatorId,\n        companyId: conversations.companyId,\n        offerId: conversations.offerId,\n        lastMessageAt: conversations.lastMessageAt,\n        creatorUnreadCount: conversations.creatorUnreadCount,\n        companyUnreadCount: conversations.companyUnreadCount,\n        createdAt: conversations.createdAt,\n        updatedAt: conversations.updatedAt,\n        // Offer info\n        offerTitle: offers.title,\n        // Creator info\n        creatorFirstName: users.firstName,\n        creatorLastName: users.lastName,\n        creatorEmail: users.email,\n        creatorProfileImageUrl: users.profileImageUrl,\n        // Company info\n        companyLegalName: companyProfiles.legalName,\n        companyTradeName: companyProfiles.tradeName,\n        companyLogoUrl: companyProfiles.logoUrl,\n        companyUserId: companyProfiles.userId,\n      })\n      .from(conversations)\n      .innerJoin(offers, eq(conversations.offerId, offers.id))\n      .innerJoin(users, eq(conversations.creatorId, users.id))\n      .innerJoin(companyProfiles, eq(conversations.companyId, companyProfiles.id))\n      .where(whereClause)\n      .orderBy(desc(conversations.lastMessageAt));\n\n    // Transform to include otherUser field based on current user role\n    return result.map(conv => ({\n      id: conv.id,\n      applicationId: conv.applicationId,\n      creatorId: conv.creatorId,\n      companyId: conv.companyId,\n      offerId: conv.offerId,\n      offerTitle: conv.offerTitle,\n      lastMessageAt: conv.lastMessageAt,\n      creatorUnreadCount: conv.creatorUnreadCount,\n      companyUnreadCount: conv.companyUnreadCount,\n      createdAt: conv.createdAt,\n      updatedAt: conv.updatedAt,\n      // Set otherUser based on who is viewing\n      otherUser: userRole === 'company' ? {\n        id: conv.creatorId,\n        name: `${conv.creatorFirstName || ''} ${conv.creatorLastName || ''}`.trim() || conv.creatorEmail,\n        firstName: conv.creatorFirstName,\n        lastName: conv.creatorLastName,\n        email: conv.creatorEmail,\n        profileImageUrl: conv.creatorProfileImageUrl,\n      } : {\n        id: conv.companyUserId,\n        name: conv.companyTradeName || conv.companyLegalName,\n        legalName: conv.companyLegalName,\n        tradeName: conv.companyTradeName,\n        logoUrl: conv.companyLogoUrl,\n      }\n    }));\n  }\n\n  async createConversation(data: any): Promise<any> {\n    const result = await db.insert(conversations).values(data).returning();\n    return result[0];\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const result = await db.insert(messages).values(message).returning();\n    \n    // Update conversation's last message timestamp\n    await db\n      .update(conversations)\n      .set({ lastMessageAt: new Date(), updatedAt: new Date() })\n      .where(eq(conversations.id, message.conversationId));\n    \n    return result[0];\n  }\n\n  async getMessages(conversationId: string): Promise<Message[]> {\n    return await db.select().from(messages).where(eq(messages.conversationId, conversationId)).orderBy(messages.createdAt);\n  }\n\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(messages.conversationId, conversationId),\n          eq(messages.isRead, false)\n        )\n      );\n  }\n\n  // Reviews\n  async getReviewsByCompany(companyId: string): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.companyId, companyId)).orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const result = await db.insert(reviews).values(review).returning();\n    return result[0];\n  }\n\n  async updateReview(id: string, updates: Partial<InsertReview>): Promise<Review | undefined> {\n    const result = await db\n      .update(reviews)\n      .set({ ...updates, isEdited: true, updatedAt: new Date() })\n      .where(eq(reviews.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getAllReviews(): Promise<Review[]> {\n    return await db.select().from(reviews).orderBy(desc(reviews.createdAt));\n  }\n\n  async hideReview(id: string): Promise<Review | undefined> {\n    const result = await db\n      .update(reviews)\n      .set({ isHidden: true, updatedAt: new Date() })\n      .where(eq(reviews.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteReview(id: string): Promise<void> {\n    await db.delete(reviews).where(eq(reviews.id, id));\n  }\n\n  async updateAdminNote(id: string, note: string, adminId: string): Promise<Review | undefined> {\n    const result = await db\n      .update(reviews)\n      .set({ \n        adminNote: note, \n        adminNoteUpdatedBy: adminId,\n        adminNoteUpdatedAt: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(reviews.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async approveReview(id: string, adminId: string): Promise<Review | undefined> {\n    const result = await db\n      .update(reviews)\n      .set({ \n        isApproved: true, \n        isHidden: false,\n        approvedBy: adminId, \n        approvedAt: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(reviews.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Favorites\n  async getFavoritesByCreator(creatorId: string): Promise<Favorite[]> {\n    return await db.select().from(favorites).where(eq(favorites.creatorId, creatorId)).orderBy(desc(favorites.createdAt));\n  }\n\n  async isFavorite(creatorId: string, offerId: string): Promise<boolean> {\n    const result = await db\n      .select()\n      .from(favorites)\n      .where(and(eq(favorites.creatorId, creatorId), eq(favorites.offerId, offerId)))\n      .limit(1);\n    return result.length > 0;\n  }\n\n  async createFavorite(favorite: InsertFavorite): Promise<Favorite> {\n    const result = await db.insert(favorites).values(favorite).returning();\n    return result[0];\n  }\n\n  async deleteFavorite(creatorId: string, offerId: string): Promise<void> {\n    await db.delete(favorites).where(and(eq(favorites.creatorId, creatorId), eq(favorites.offerId, offerId)));\n  }\n\n  // Analytics\n  async getAnalyticsByCreator(creatorId: string): Promise<any> {\n    const result = await db\n      .select({\n        totalEarnings: sql<number>`COALESCE(SUM(${analytics.earnings}), 0)`,\n        totalClicks: sql<number>`COALESCE(SUM(${analytics.clicks}), 0)`,\n        uniqueClicks: sql<number>`COALESCE(SUM(${analytics.uniqueClicks}), 0)`,\n        conversions: sql<number>`COALESCE(SUM(${analytics.conversions}), 0)`,\n      })\n      .from(analytics)\n      .where(eq(analytics.creatorId, creatorId));\n    \n    return result[0];\n  }\n\n  async getAnalyticsTimeSeriesByCreator(creatorId: string, dateRange: string): Promise<any[]> {\n    // Calculate date filter based on range\n    let whereClause: any = eq(analytics.creatorId, creatorId);\n\n    if (dateRange !== 'all') {\n      let daysBack = 30;\n      if (dateRange === '7d') daysBack = 7;\n      else if (dateRange === '30d') daysBack = 30;\n      else if (dateRange === '90d') daysBack = 90;\n\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - daysBack);\n      whereClause = and(\n        eq(analytics.creatorId, creatorId),\n        sql`${analytics.date} >= ${startDate}`\n      );\n    }\n\n    const result = await db\n      .select({\n        date: sql<string>`TO_CHAR(${analytics.date}, 'Mon DD')`,\n        clicks: sql<number>`COALESCE(SUM(${analytics.clicks}), 0)`,\n      })\n      .from(analytics)\n      .where(whereClause)\n      .groupBy(analytics.date)\n      .orderBy(analytics.date);\n\n    return result;\n  }\n\n  async getAnalyticsByApplication(applicationId: string): Promise<any[]> {\n    return await db.select().from(analytics).where(eq(analytics.applicationId, applicationId)).orderBy(desc(analytics.date));\n  }\n\n  async logTrackingClick(applicationId: string, clickData: { ip: string; userAgent: string; referer: string; timestamp: Date }): Promise<void> {\n    // Get application to find offerId and creatorId\n    const application = await this.getApplication(applicationId);\n    if (!application) {\n      console.error('[Tracking] Application not found:', applicationId);\n      return;\n    }\n\n    // Parse user agent for device type and browser (basic detection)\n    const deviceType = clickData.userAgent.toLowerCase().includes('mobile') ? 'mobile' : \n                       clickData.userAgent.toLowerCase().includes('tablet') ? 'tablet' : 'desktop';\n    const browser = clickData.userAgent.includes('Chrome') ? 'Chrome' :\n                    clickData.userAgent.includes('Firefox') ? 'Firefox' :\n                    clickData.userAgent.includes('Safari') ? 'Safari' : 'Other';\n\n    // Geo-IP lookup\n    const geo = geoip.lookup(clickData.ip);\n    const country = geo?.country || 'Unknown';\n    const city = geo?.city || 'Unknown';\n\n    // Store individual click event with full metadata\n    await db.insert(clickEvents).values({\n      applicationId,\n      offerId: application.offerId,\n      creatorId: application.creatorId,\n      ipAddress: clickData.ip,\n      userAgent: clickData.userAgent,\n      referer: clickData.referer,\n      country,\n      city,\n      deviceType,\n      browser,\n      clickedAt: clickData.timestamp,\n    });\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Count unique IPs for today\n    const uniqueIpsToday = await db\n      .selectDistinct({ ipAddress: clickEvents.ipAddress })\n      .from(clickEvents)\n      .where(and(\n        eq(clickEvents.applicationId, applicationId),\n        sql`${clickEvents.clickedAt}::date = ${today}::date`\n      ));\n\n    // Check if analytics record exists for today\n    const existing = await db\n      .select()\n      .from(analytics)\n      .where(and(\n        eq(analytics.applicationId, applicationId),\n        eq(analytics.date, today)\n      ))\n      .limit(1);\n\n    if (existing.length > 0) {\n      // Update existing record - increment clicks and update unique count\n      await db\n        .update(analytics)\n        .set({\n          clicks: sql`${analytics.clicks} + 1`,\n          uniqueClicks: uniqueIpsToday.length,\n          updatedAt: new Date(),\n        })\n        .where(eq(analytics.id, existing[0].id));\n    } else {\n      // Create new record\n      await db.insert(analytics).values({\n        applicationId,\n        offerId: application.offerId,\n        creatorId: application.creatorId,\n        clicks: 1,\n        uniqueClicks: uniqueIpsToday.length,\n        conversions: 0,\n        earnings: '0',\n        earningsPaid: '0',\n        date: today,\n      });\n    }\n\n    console.log(`[Tracking] Logged click for application ${applicationId} from ${city}, ${country} - IP: ${clickData.ip} (${deviceType}, ${browser})`);\n  }\n\n  // Payment Settings\n  async getPaymentSettings(userId: string): Promise<PaymentSetting[]> {\n    return await db.select().from(paymentSettings).where(eq(paymentSettings.userId, userId)).orderBy(desc(paymentSettings.createdAt));\n  }\n\n  async createPaymentSetting(setting: InsertPaymentSetting): Promise<PaymentSetting> {\n    const result = await db.insert(paymentSettings).values(setting).returning();\n    return result[0];\n  }\n\n  async deletePaymentSetting(id: string): Promise<void> {\n    await db.delete(paymentSettings).where(eq(paymentSettings.id, id));\n  }\n\n  // Payments\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const result = await db.insert(payments).values(payment).returning();\n    return result[0];\n  }\n\n  async getPayment(id: string): Promise<Payment | undefined> {\n    const result = await db.select().from(payments).where(eq(payments.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getPaymentsByCreator(creatorId: string): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.creatorId, creatorId))\n      .orderBy(desc(payments.createdAt));\n  }\n\n  async getPaymentsByCompany(companyId: string): Promise<Payment[]> {\n    return await db\n      .select()\n      .from(payments)\n      .where(eq(payments.companyId, companyId))\n      .orderBy(desc(payments.createdAt));\n  }\n\n  async getAllPayments(): Promise<any[]> {\n    // Simplified query - join details can be added later if needed\n    return await db\n      .select()\n      .from(payments)\n      .orderBy(desc(payments.createdAt));\n  }\n\n  async updatePaymentStatus(id: string, status: string, updates?: Partial<InsertPayment>): Promise<Payment | undefined> {\n    const result = await db\n      .update(payments)\n      .set({\n        status: status as any,\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(payments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Retainer Contracts\n  async getRetainerContract(id: string): Promise<any> {\n    const result = await db\n      .select()\n      .from(retainerContracts)\n      .leftJoin(companyProfiles, eq(retainerContracts.companyId, companyProfiles.id))\n      .leftJoin(users, eq(companyProfiles.userId, users.id))\n      .where(eq(retainerContracts.id, id))\n      .limit(1);\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].retainer_contracts,\n      company: result[0].company_profiles,\n      companyUser: result[0].users,\n    };\n  }\n\n  async getRetainerContracts(filters?: any): Promise<any[]> {\n    let query = db\n      .select()\n      .from(retainerContracts)\n      .leftJoin(companyProfiles, eq(retainerContracts.companyId, companyProfiles.id))\n      .leftJoin(users, eq(companyProfiles.userId, users.id));\n    \n    if (filters?.status) {\n      query = query.where(eq(retainerContracts.status, filters.status)) as any;\n    }\n    \n    const results = await query.orderBy(desc(retainerContracts.createdAt));\n    \n    return results.map((r: any) => ({\n      ...r.retainer_contracts,\n      company: r.company_profiles,\n      companyUser: r.users,\n    }));\n  }\n\n  async getRetainerContractsByCompany(companyId: string): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerContracts)\n      .where(eq(retainerContracts.companyId, companyId))\n      .orderBy(desc(retainerContracts.createdAt));\n    \n    return results;\n  }\n\n  async getRetainerContractsByCreator(creatorId: string): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerContracts)\n      .leftJoin(companyProfiles, eq(retainerContracts.companyId, companyProfiles.id))\n      .where(eq(retainerContracts.assignedCreatorId, creatorId))\n      .orderBy(desc(retainerContracts.createdAt));\n    \n    return results.map((r: any) => ({\n      ...r.retainer_contracts,\n      company: r.company_profiles,\n    }));\n  }\n\n  async getOpenRetainerContracts(): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerContracts)\n      .leftJoin(companyProfiles, eq(retainerContracts.companyId, companyProfiles.id))\n      .leftJoin(users, eq(companyProfiles.userId, users.id))\n      .where(eq(retainerContracts.status, 'open'))\n      .orderBy(desc(retainerContracts.createdAt));\n    \n    return results.map((r: any) => ({\n      ...r.retainer_contracts,\n      company: r.company_profiles,\n      companyUser: r.users,\n    }));\n  }\n\n  async createRetainerContract(contract: InsertRetainerContract): Promise<RetainerContract> {\n    const result = await db.insert(retainerContracts).values(contract).returning();\n    return result[0];\n  }\n\n  async updateRetainerContract(id: string, updates: Partial<InsertRetainerContract>): Promise<RetainerContract | undefined> {\n    const result = await db\n      .update(retainerContracts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(retainerContracts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteRetainerContract(id: string): Promise<void> {\n    await db.delete(retainerContracts).where(eq(retainerContracts.id, id));\n  }\n\n  // Retainer Applications\n  async getRetainerApplication(id: string): Promise<any> {\n    const result = await db\n      .select()\n      .from(retainerApplications)\n      .leftJoin(users, eq(retainerApplications.creatorId, users.id))\n      .leftJoin(creatorProfiles, eq(users.id, creatorProfiles.userId))\n      .leftJoin(retainerContracts, eq(retainerApplications.contractId, retainerContracts.id))\n      .where(eq(retainerApplications.id, id))\n      .limit(1);\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].retainer_applications,\n      creator: result[0].users,\n      creatorProfile: result[0].creator_profiles,\n      contract: result[0].retainer_contracts,\n    };\n  }\n\n  async getRetainerApplicationsByContract(contractId: string): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerApplications)\n      .leftJoin(users, eq(retainerApplications.creatorId, users.id))\n      .leftJoin(creatorProfiles, eq(users.id, creatorProfiles.userId))\n      .where(eq(retainerApplications.contractId, contractId))\n      .orderBy(desc(retainerApplications.createdAt));\n    \n    return results.map((r: any) => ({\n      ...r.retainer_applications,\n      creator: r.users,\n      creatorProfile: r.creator_profiles,\n    }));\n  }\n\n  async getRetainerApplicationsByCreator(creatorId: string): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerApplications)\n      .leftJoin(retainerContracts, eq(retainerApplications.contractId, retainerContracts.id))\n      .leftJoin(companyProfiles, eq(retainerContracts.companyId, companyProfiles.id))\n      .where(eq(retainerApplications.creatorId, creatorId))\n      .orderBy(desc(retainerApplications.createdAt));\n    \n    return results.map((r: any) => ({\n      ...r.retainer_applications,\n      contract: r.retainer_contracts,\n      company: r.company_profiles,\n    }));\n  }\n\n  async createRetainerApplication(application: InsertRetainerApplication): Promise<RetainerApplication> {\n    const result = await db.insert(retainerApplications).values(application).returning();\n    return result[0];\n  }\n\n  async updateRetainerApplication(id: string, updates: Partial<InsertRetainerApplication>): Promise<RetainerApplication | undefined> {\n    const result = await db\n      .update(retainerApplications)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(retainerApplications.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async approveRetainerApplication(id: string, contractId: string, creatorId: string): Promise<RetainerApplication | undefined> {\n    // Update application status to approved\n    const appResult = await db\n      .update(retainerApplications)\n      .set({ status: 'approved', updatedAt: new Date() })\n      .where(eq(retainerApplications.id, id))\n      .returning();\n    \n    // Update contract to assign creator and change status to in_progress\n    await db\n      .update(retainerContracts)\n      .set({\n        assignedCreatorId: creatorId,\n        status: 'in_progress',\n        startDate: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(retainerContracts.id, contractId));\n    \n    return appResult[0];\n  }\n\n  async rejectRetainerApplication(id: string): Promise<RetainerApplication | undefined> {\n    const result = await db\n      .update(retainerApplications)\n      .set({ status: 'rejected', updatedAt: new Date() })\n      .where(eq(retainerApplications.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Retainer Deliverables\n  async getRetainerDeliverable(id: string): Promise<any> {\n    const result = await db\n      .select()\n      .from(retainerDeliverables)\n      .where(eq(retainerDeliverables.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async getRetainerDeliverablesByContract(contractId: string): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerDeliverables)\n      .where(eq(retainerDeliverables.contractId, contractId))\n      .orderBy(desc(retainerDeliverables.submittedAt));\n    return results;\n  }\n\n  async getRetainerDeliverablesByCreator(creatorId: string): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerDeliverables)\n      .leftJoin(retainerContracts, eq(retainerDeliverables.contractId, retainerContracts.id))\n      .where(eq(retainerDeliverables.creatorId, creatorId))\n      .orderBy(desc(retainerDeliverables.submittedAt));\n    \n    return results.map((r: any) => ({\n      ...r.retainer_deliverables,\n      contract: r.retainer_contracts,\n    }));\n  }\n\n  async getRetainerDeliverablesForMonth(contractId: string, monthNumber: number): Promise<any[]> {\n    const results = await db\n      .select()\n      .from(retainerDeliverables)\n      .where(\n        and(\n          eq(retainerDeliverables.contractId, contractId),\n          eq(retainerDeliverables.monthNumber, monthNumber)\n        )\n      )\n      .orderBy(retainerDeliverables.videoNumber);\n    return results;\n  }\n\n  async createRetainerDeliverable(deliverable: InsertRetainerDeliverable): Promise<RetainerDeliverable> {\n    const result = await db.insert(retainerDeliverables).values(deliverable).returning();\n    return result[0];\n  }\n\n  async updateRetainerDeliverable(id: string, updates: Partial<InsertRetainerDeliverable>): Promise<RetainerDeliverable | undefined> {\n    const result = await db\n      .update(retainerDeliverables)\n      .set(updates)\n      .where(eq(retainerDeliverables.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async approveRetainerDeliverable(id: string, reviewNotes?: string): Promise<RetainerDeliverable | undefined> {\n    const result = await db\n      .update(retainerDeliverables)\n      .set({\n        status: 'approved',\n        reviewedAt: new Date(),\n        reviewNotes,\n      })\n      .where(eq(retainerDeliverables.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async rejectRetainerDeliverable(id: string, reviewNotes: string): Promise<RetainerDeliverable | undefined> {\n    const result = await db\n      .update(retainerDeliverables)\n      .set({\n        status: 'rejected',\n        reviewedAt: new Date(),\n        reviewNotes,\n      })\n      .where(eq(retainerDeliverables.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async requestRevision(id: string, reviewNotes: string): Promise<RetainerDeliverable | undefined> {\n    const result = await db\n      .update(retainerDeliverables)\n      .set({\n        status: 'revision_requested',\n        reviewedAt: new Date(),\n        reviewNotes,\n      })\n      .where(eq(retainerDeliverables.id, id))\n      .returning();\n    return result[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":43751},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 240 10% 10%;\n\n  --border: 240 6% 90%;\n\n  --card: 240 10% 98%;\n\n  --card-foreground: 240 10% 10%;\n\n  --card-border: 240 6% 94%;\n\n  --sidebar: 240 8% 96%;\n\n  --sidebar-foreground: 240 10% 10%;\n\n  --sidebar-border: 240 6% 92%;\n\n  --sidebar-primary: 210 90% 55%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 8% 90%;\n\n  --sidebar-accent-foreground: 240 10% 10%;\n\n  --sidebar-ring: 210 90% 55%;\n\n  --popover: 240 10% 94%;\n\n  --popover-foreground: 240 10% 10%;\n\n  --popover-border: 240 6% 88%;\n\n  --primary: 210 90% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 240 8% 88%;\n\n  --secondary-foreground: 240 10% 10%;\n\n  --muted: 240 10% 92%;\n\n  --muted-foreground: 240 5% 45%;\n\n  --accent: 240 8% 90%;\n\n  --accent-foreground: 240 10% 10%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 240 8% 75%;\n  --ring: 210 90% 55%;\n  --chart-1: 210 90% 50%;\n  --chart-2: 200 90% 45%;\n  --chart-3: 142 76% 40%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 330 80% 55%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"JetBrains Mono\", Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 10% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 10% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(240 10% 10% / 0.06), 0px 1px 2px -1px hsl(240 10% 10% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(240 10% 10% / 0.08), 0px 2px 4px -1px hsl(240 10% 10% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(240 10% 10% / 0.10), 0px 3px 6px -2px hsl(240 10% 10% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(240 10% 10% / 0.12), 0px 4px 8px -2px hsl(240 10% 10% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(240 10% 10% / 0.15), 0px 8px 12px -4px hsl(240 10% 10% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 10% 10% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 10% 10%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 240 6% 20%;\n\n  --card: 240 8% 14%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 240 6% 18%;\n\n  --sidebar: 240 8% 12%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 240 6% 16%;\n\n  --sidebar-primary: 210 90% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 8% 18%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 210 90% 60%;\n\n  --popover: 240 8% 16%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 240 6% 20%;\n\n  --primary: 210 90% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 240 8% 20%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 240 8% 18%;\n\n  --muted-foreground: 240 5% 65%;\n\n  --accent: 240 8% 18%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 240 8% 35%;\n  --ring: 210 90% 60%;\n  --chart-1: 210 90% 65%;\n  --chart-2: 200 90% 60%;\n  --chart-3: 142 76% 55%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 330 80% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.15);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.30), 0px 3px 6px -2px hsl(0 0% 0% / 0.25);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.35), 0px 4px 8px -2px hsl(0 0% 0% / 0.30);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.40), 0px 8px 12px -4px hsl(0 0% 0% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.45);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9864},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['creator', 'company', 'admin']);\nexport const userAccountStatusEnum = pgEnum('user_account_status', ['active', 'suspended', 'banned']);\nexport const companyStatusEnum = pgEnum('company_status', ['pending', 'approved', 'rejected']);\nexport const offerStatusEnum = pgEnum('offer_status', ['draft', 'pending_review', 'approved', 'paused', 'archived']);\nexport const commissionTypeEnum = pgEnum('commission_type', ['per_sale', 'per_lead', 'per_click', 'monthly_retainer', 'hybrid']);\nexport const applicationStatusEnum = pgEnum('application_status', ['pending', 'approved', 'active', 'completed', 'rejected']);\nexport const payoutMethodEnum = pgEnum('payout_method', ['etransfer', 'wire', 'paypal', 'crypto']);\nexport const paymentStatusEnum = pgEnum('payment_status', ['pending', 'processing', 'completed', 'failed', 'refunded']);\nexport const retainerStatusEnum = pgEnum('retainer_status', ['open', 'in_progress', 'completed', 'cancelled', 'paused']);\nexport const retainerApplicationStatusEnum = pgEnum('retainer_application_status', ['pending', 'approved', 'rejected']);\nexport const deliverableStatusEnum = pgEnum('deliverable_status', ['pending_review', 'approved', 'revision_requested', 'rejected']);\n\n// Session storage table (Required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").notNull().default('creator'),\n  accountStatus: userAccountStatusEnum(\"account_status\").notNull().default('active'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  creatorProfile: one(creatorProfiles, {\n    fields: [users.id],\n    references: [creatorProfiles.userId],\n  }),\n  companyProfile: one(companyProfiles, {\n    fields: [users.id],\n    references: [companyProfiles.userId],\n  }),\n  applications: many(applications),\n  messages: many(messages),\n  reviews: many(reviews),\n  favorites: many(favorites),\n}));\n\n// Creator profiles\nexport const creatorProfiles = pgTable(\"creator_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: 'cascade' }),\n  bio: text(\"bio\"),\n  youtubeUrl: varchar(\"youtube_url\"),\n  tiktokUrl: varchar(\"tiktok_url\"),\n  instagramUrl: varchar(\"instagram_url\"),\n  youtubeFollowers: integer(\"youtube_followers\"),\n  tiktokFollowers: integer(\"tiktok_followers\"),\n  instagramFollowers: integer(\"instagram_followers\"),\n  niches: text(\"niches\").array().default(sql`ARRAY[]::text[]`),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const creatorProfilesRelations = relations(creatorProfiles, ({ one }) => ({\n  user: one(users, {\n    fields: [creatorProfiles.userId],\n    references: [users.id],\n  }),\n}));\n\n// Company profiles\nexport const companyProfiles = pgTable(\"company_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: 'cascade' }),\n  legalName: varchar(\"legal_name\").notNull(),\n  tradeName: varchar(\"trade_name\"),\n  industry: varchar(\"industry\"),\n  websiteUrl: varchar(\"website_url\"),\n  companySize: varchar(\"company_size\"),\n  yearFounded: integer(\"year_founded\"),\n  logoUrl: varchar(\"logo_url\"),\n  description: text(\"description\"),\n  contactName: varchar(\"contact_name\"),\n  contactJobTitle: varchar(\"contact_job_title\"),\n  phoneNumber: varchar(\"phone_number\"),\n  businessAddress: text(\"business_address\"),\n  verificationDocumentUrl: varchar(\"verification_document_url\"),\n  status: companyStatusEnum(\"status\").notNull().default('pending'),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const companyProfilesRelations = relations(companyProfiles, ({ one, many }) => ({\n  user: one(users, {\n    fields: [companyProfiles.userId],\n    references: [users.id],\n  }),\n  offers: many(offers),\n}));\n\n// Offers\nexport const offers = pgTable(\"offers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull().references(() => companyProfiles.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 100 }).notNull(),\n  productName: varchar(\"product_name\").notNull(),\n  shortDescription: varchar(\"short_description\", { length: 200 }).notNull(),\n  fullDescription: text(\"full_description\").notNull(),\n  primaryNiche: varchar(\"primary_niche\").notNull(),\n  additionalNiches: text(\"additional_niches\").array().default(sql`ARRAY[]::text[]`),\n  productUrl: varchar(\"product_url\").notNull(),\n  featuredImageUrl: varchar(\"featured_image_url\"),\n  commissionType: commissionTypeEnum(\"commission_type\").notNull(),\n  commissionAmount: decimal(\"commission_amount\", { precision: 10, scale: 2 }),\n  commissionPercentage: decimal(\"commission_percentage\", { precision: 5, scale: 2 }),\n  cookieDuration: integer(\"cookie_duration\"),\n  averageOrderValue: decimal(\"average_order_value\", { precision: 10, scale: 2 }),\n  minimumPayout: decimal(\"minimum_payout\", { precision: 10, scale: 2 }),\n  retainerAmount: decimal(\"retainer_amount\", { precision: 10, scale: 2 }),\n  retainerDeliverables: jsonb(\"retainer_deliverables\"),\n  paymentSchedule: varchar(\"payment_schedule\"),\n  minimumFollowers: integer(\"minimum_followers\"),\n  allowedPlatforms: text(\"allowed_platforms\").array().default(sql`ARRAY[]::text[]`),\n  geographicRestrictions: text(\"geographic_restrictions\").array().default(sql`ARRAY[]::text[]`),\n  ageRestriction: varchar(\"age_restriction\"),\n  contentStyleRequirements: text(\"content_style_requirements\"),\n  brandSafetyRequirements: text(\"brand_safety_requirements\"),\n  customTerms: text(\"custom_terms\"),\n  isPriority: boolean(\"is_priority\").default(false),\n  status: offerStatusEnum(\"status\").notNull().default('draft'),\n  viewCount: integer(\"view_count\").default(0),\n  applicationCount: integer(\"application_count\").default(0),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const offersRelations = relations(offers, ({ one, many }) => ({\n  company: one(companyProfiles, {\n    fields: [offers.companyId],\n    references: [companyProfiles.id],\n  }),\n  videos: many(offerVideos),\n  applications: many(applications),\n  favorites: many(favorites),\n  reviews: many(reviews),\n}));\n\n// Offer videos\nexport const offerVideos = pgTable(\"offer_videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  offerId: varchar(\"offer_id\").notNull().references(() => offers.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 100 }).notNull(),\n  description: varchar(\"description\", { length: 300 }),\n  creatorCredit: varchar(\"creator_credit\"),\n  originalPlatform: varchar(\"original_platform\"),\n  videoUrl: varchar(\"video_url\").notNull(),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  isPrimary: boolean(\"is_primary\").default(false),\n  orderIndex: integer(\"order_index\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const offerVideosRelations = relations(offerVideos, ({ one }) => ({\n  offer: one(offers, {\n    fields: [offerVideos.offerId],\n    references: [offers.id],\n  }),\n}));\n\n// Applications\nexport const applications = pgTable(\"applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  offerId: varchar(\"offer_id\").notNull().references(() => offers.id, { onDelete: 'cascade' }),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  message: text(\"message\").notNull(),\n  preferredCommission: varchar(\"preferred_commission\"),\n  status: applicationStatusEnum(\"status\").notNull().default('pending'),\n  trackingLink: varchar(\"tracking_link\"),\n  trackingCode: varchar(\"tracking_code\"),\n  approvedAt: timestamp(\"approved_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  autoApprovalScheduledAt: timestamp(\"auto_approval_scheduled_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const applicationsRelations = relations(applications, ({ one, many }) => ({\n  offer: one(offers, {\n    fields: [applications.offerId],\n    references: [offers.id],\n  }),\n  creator: one(users, {\n    fields: [applications.creatorId],\n    references: [users.id],\n  }),\n  analytics: many(analytics),\n}));\n\n// Conversations\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: varchar(\"application_id\").notNull().references(() => applications.id, { onDelete: 'cascade' }),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  companyId: varchar(\"company_id\").notNull().references(() => companyProfiles.id, { onDelete: 'cascade' }),\n  offerId: varchar(\"offer_id\").notNull().references(() => offers.id, { onDelete: 'cascade' }),\n  lastMessageAt: timestamp(\"last_message_at\"),\n  creatorUnreadCount: integer(\"creator_unread_count\").default(0),\n  companyUnreadCount: integer(\"company_unread_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const conversationsRelations = relations(conversations, ({ one, many }) => ({\n  application: one(applications, {\n    fields: [conversations.applicationId],\n    references: [applications.id],\n  }),\n  creator: one(users, {\n    fields: [conversations.creatorId],\n    references: [users.id],\n  }),\n  company: one(companyProfiles, {\n    fields: [conversations.companyId],\n    references: [companyProfiles.id],\n  }),\n  offer: one(offers, {\n    fields: [conversations.offerId],\n    references: [offers.id],\n  }),\n  messages: many(messages),\n}));\n\n// Messages\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id, { onDelete: 'cascade' }),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  content: text(\"content\").notNull(),\n  attachmentUrl: varchar(\"attachment_url\"),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  conversation: one(conversations, {\n    fields: [messages.conversationId],\n    references: [conversations.id],\n  }),\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n  }),\n}));\n\n// Reviews\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  companyId: varchar(\"company_id\").notNull().references(() => companyProfiles.id, { onDelete: 'cascade' }),\n  offerId: varchar(\"offer_id\").references(() => offers.id, { onDelete: 'set null' }),\n  overallRating: integer(\"overall_rating\").notNull(),\n  paymentSpeedRating: integer(\"payment_speed_rating\").notNull(),\n  communicationRating: integer(\"communication_rating\").notNull(),\n  offerQualityRating: integer(\"offer_quality_rating\").notNull(),\n  supportRating: integer(\"support_rating\").notNull(),\n  reviewText: text(\"review_text\"),\n  companyResponse: text(\"company_response\"),\n  companyRespondedAt: timestamp(\"company_responded_at\"),\n  adminNote: text(\"admin_note\"),\n  adminNoteUpdatedBy: varchar(\"admin_note_updated_by\").references(() => users.id, { onDelete: 'set null' }),\n  adminNoteUpdatedAt: timestamp(\"admin_note_updated_at\"),\n  isApproved: boolean(\"is_approved\").default(true),\n  approvedBy: varchar(\"approved_by\").references(() => users.id, { onDelete: 'set null' }),\n  approvedAt: timestamp(\"approved_at\"),\n  isHidden: boolean(\"is_hidden\").default(false),\n  isEdited: boolean(\"is_edited\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  creator: one(users, {\n    fields: [reviews.creatorId],\n    references: [users.id],\n  }),\n  company: one(companyProfiles, {\n    fields: [reviews.companyId],\n    references: [companyProfiles.id],\n  }),\n  offer: one(offers, {\n    fields: [reviews.offerId],\n    references: [offers.id],\n  }),\n}));\n\n// Favorites\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  offerId: varchar(\"offer_id\").notNull().references(() => offers.id, { onDelete: 'cascade' }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const favoritesRelations = relations(favorites, ({ one }) => ({\n  creator: one(users, {\n    fields: [favorites.creatorId],\n    references: [users.id],\n  }),\n  offer: one(offers, {\n    fields: [favorites.offerId],\n    references: [offers.id],\n  }),\n}));\n\n// Click Events (individual click tracking)\nexport const clickEvents = pgTable(\"click_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: varchar(\"application_id\").notNull().references(() => applications.id, { onDelete: 'cascade' }),\n  offerId: varchar(\"offer_id\").notNull().references(() => offers.id, { onDelete: 'cascade' }),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  ipAddress: varchar(\"ip_address\").notNull(),\n  userAgent: text(\"user_agent\"),\n  referer: text(\"referer\"),\n  country: varchar(\"country\"),\n  city: varchar(\"city\"),\n  deviceType: varchar(\"device_type\"),\n  browser: varchar(\"browser\"),\n  clickedAt: timestamp(\"clicked_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clickEventsRelations = relations(clickEvents, ({ one }) => ({\n  application: one(applications, {\n    fields: [clickEvents.applicationId],\n    references: [applications.id],\n  }),\n  offer: one(offers, {\n    fields: [clickEvents.offerId],\n    references: [offers.id],\n  }),\n  creator: one(users, {\n    fields: [clickEvents.creatorId],\n    references: [users.id],\n  }),\n}));\n\nexport type ClickEvent = typeof clickEvents.$inferSelect;\nexport type InsertClickEvent = typeof clickEvents.$inferInsert;\n\n// Analytics (aggregated daily stats)\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: varchar(\"application_id\").notNull().references(() => applications.id, { onDelete: 'cascade' }),\n  offerId: varchar(\"offer_id\").notNull().references(() => offers.id, { onDelete: 'cascade' }),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  clicks: integer(\"clicks\").default(0),\n  uniqueClicks: integer(\"unique_clicks\").default(0),\n  conversions: integer(\"conversions\").default(0),\n  earnings: decimal(\"earnings\", { precision: 10, scale: 2 }).default('0'),\n  earningsPaid: decimal(\"earnings_paid\", { precision: 10, scale: 2 }).default('0'),\n  date: timestamp(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const analyticsRelations = relations(analytics, ({ one }) => ({\n  application: one(applications, {\n    fields: [analytics.applicationId],\n    references: [applications.id],\n  }),\n  offer: one(offers, {\n    fields: [analytics.offerId],\n    references: [offers.id],\n  }),\n  creator: one(users, {\n    fields: [analytics.creatorId],\n    references: [users.id],\n  }),\n}));\n\n// Payment Settings\nexport const paymentSettings = pgTable(\"payment_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  payoutMethod: payoutMethodEnum(\"payout_method\").notNull(),\n  payoutEmail: varchar(\"payout_email\"),\n  bankRoutingNumber: varchar(\"bank_routing_number\"),\n  bankAccountNumber: varchar(\"bank_account_number\"),\n  paypalEmail: varchar(\"paypal_email\"),\n  cryptoWalletAddress: varchar(\"crypto_wallet_address\"),\n  cryptoNetwork: varchar(\"crypto_network\"),\n  taxInformation: jsonb(\"tax_information\"),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const paymentSettingsRelations = relations(paymentSettings, ({ one }) => ({\n  user: one(users, {\n    fields: [paymentSettings.userId],\n    references: [users.id],\n  }),\n}));\n\n// Payments & Transactions\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: varchar(\"application_id\").notNull().references(() => applications.id, { onDelete: 'cascade' }),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  companyId: varchar(\"company_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  offerId: varchar(\"offer_id\").notNull().references(() => offers.id, { onDelete: 'cascade' }),\n  \n  // Payment amounts (all in USD)\n  grossAmount: decimal(\"gross_amount\", { precision: 10, scale: 2 }).notNull(), // Total amount before fees\n  platformFeeAmount: decimal(\"platform_fee_amount\", { precision: 10, scale: 2 }).notNull(), // 7% platform fee\n  stripeFeeAmount: decimal(\"stripe_fee_amount\", { precision: 10, scale: 2 }).notNull(), // Stripe processing fee\n  netAmount: decimal(\"net_amount\", { precision: 10, scale: 2 }).notNull(), // Amount creator receives\n  \n  // Stripe references\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\"),\n  stripeTransferId: varchar(\"stripe_transfer_id\"),\n  \n  // Payment metadata\n  status: paymentStatusEnum(\"status\").notNull().default('pending'),\n  paymentMethod: varchar(\"payment_method\"), // e.g., \"stripe\", \"manual\"\n  description: text(\"description\"),\n  \n  // Timestamps\n  initiatedAt: timestamp(\"initiated_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  failedAt: timestamp(\"failed_at\"),\n  refundedAt: timestamp(\"refunded_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  application: one(applications, {\n    fields: [payments.applicationId],\n    references: [applications.id],\n  }),\n  creator: one(users, {\n    fields: [payments.creatorId],\n    references: [users.id],\n  }),\n  company: one(users, {\n    fields: [payments.companyId],\n    references: [users.id],\n  }),\n  offer: one(offers, {\n    fields: [payments.offerId],\n    references: [offers.id],\n  }),\n}));\n\n// Retainer Contracts - Monthly retainer job postings\nexport const retainerContracts = pgTable(\"retainer_contracts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull().references(() => companyProfiles.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\", { length: 150 }).notNull(),\n  description: text(\"description\").notNull(),\n  monthlyAmount: decimal(\"monthly_amount\", { precision: 10, scale: 2 }).notNull(),\n  videosPerMonth: integer(\"videos_per_month\").notNull(),\n  durationMonths: integer(\"duration_months\").notNull(),\n  requiredPlatform: varchar(\"required_platform\").notNull(),\n  platformAccountDetails: text(\"platform_account_details\"),\n  contentGuidelines: text(\"content_guidelines\"),\n  brandSafetyRequirements: text(\"brand_safety_requirements\"),\n  minimumFollowers: integer(\"minimum_followers\"),\n  niches: text(\"niches\").array().default(sql`ARRAY[]::text[]`),\n  status: retainerStatusEnum(\"status\").notNull().default('open'),\n  assignedCreatorId: varchar(\"assigned_creator_id\").references(() => users.id, { onDelete: 'set null' }),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const retainerContractsRelations = relations(retainerContracts, ({ one, many }) => ({\n  company: one(companyProfiles, {\n    fields: [retainerContracts.companyId],\n    references: [companyProfiles.id],\n  }),\n  assignedCreator: one(users, {\n    fields: [retainerContracts.assignedCreatorId],\n    references: [users.id],\n  }),\n  applications: many(retainerApplications),\n  deliverables: many(retainerDeliverables),\n}));\n\n// Retainer Applications - When creators apply for retainer contracts\nexport const retainerApplications = pgTable(\"retainer_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contractId: varchar(\"contract_id\").notNull().references(() => retainerContracts.id, { onDelete: 'cascade' }),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  message: text(\"message\").notNull(),\n  portfolioLinks: text(\"portfolio_links\").array().default(sql`ARRAY[]::text[]`),\n  proposedStartDate: timestamp(\"proposed_start_date\"),\n  status: retainerApplicationStatusEnum(\"status\").notNull().default('pending'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const retainerApplicationsRelations = relations(retainerApplications, ({ one }) => ({\n  contract: one(retainerContracts, {\n    fields: [retainerApplications.contractId],\n    references: [retainerContracts.id],\n  }),\n  creator: one(users, {\n    fields: [retainerApplications.creatorId],\n    references: [users.id],\n  }),\n}));\n\n// Retainer Deliverables - Track individual video submissions\nexport const retainerDeliverables = pgTable(\"retainer_deliverables\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contractId: varchar(\"contract_id\").notNull().references(() => retainerContracts.id, { onDelete: 'cascade' }),\n  creatorId: varchar(\"creator_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  monthNumber: integer(\"month_number\").notNull(),\n  videoNumber: integer(\"video_number\").notNull(),\n  videoUrl: varchar(\"video_url\").notNull(),\n  platformUrl: varchar(\"platform_url\"),\n  title: varchar(\"title\", { length: 200 }),\n  description: text(\"description\"),\n  viewCount: integer(\"view_count\"),\n  engagement: jsonb(\"engagement\"),\n  status: deliverableStatusEnum(\"status\").notNull().default('pending_review'),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewNotes: text(\"review_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const retainerDeliverablesRelations = relations(retainerDeliverables, ({ one }) => ({\n  contract: one(retainerContracts, {\n    fields: [retainerDeliverables.contractId],\n    references: [retainerContracts.id],\n  }),\n  creator: one(users, {\n    fields: [retainerDeliverables.creatorId],\n    references: [users.id],\n  }),\n}));\n\n// System Settings (admin-configurable platform settings)\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").notNull().unique(),\n  value: jsonb(\"value\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(), // 'fees', 'automation', 'content', 'payment', 'general'\n  updatedBy: varchar(\"updated_by\").references(() => users.id, { onDelete: 'set null' }),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const systemSettingsRelations = relations(systemSettings, ({ one }) => ({\n  updater: one(users, {\n    fields: [systemSettings.updatedBy],\n    references: [users.id],\n  }),\n}));\n\n// Type exports for Replit Auth\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCreatorProfileSchema = createInsertSchema(creatorProfiles).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCompanyProfileSchema = createInsertSchema(companyProfiles).omit({ id: true, createdAt: true, updatedAt: true, approvedAt: true });\nexport const insertOfferSchema = createInsertSchema(offers).omit({ id: true, createdAt: true, updatedAt: true, viewCount: true, applicationCount: true, approvedAt: true });\nexport const createOfferSchema = createInsertSchema(offers).omit({ id: true, companyId: true, createdAt: true, updatedAt: true, viewCount: true, applicationCount: true, approvedAt: true, status: true });\nexport const insertOfferVideoSchema = createInsertSchema(offerVideos).omit({ id: true, createdAt: true });\nexport const insertApplicationSchema = createInsertSchema(applications).omit({ id: true, createdAt: true, updatedAt: true, approvedAt: true, trackingLink: true, trackingCode: true, autoApprovalScheduledAt: true });\nexport const insertMessageSchema = createInsertSchema(messages).omit({ id: true, createdAt: true });\nexport const insertReviewSchema = createInsertSchema(reviews).omit({ id: true, createdAt: true, updatedAt: true, companyResponse: true, companyRespondedAt: true, isEdited: true, adminNote: true, isApproved: true, approvedBy: true, approvedAt: true, isHidden: true });\nexport const adminReviewUpdateSchema = createInsertSchema(reviews).pick({ reviewText: true, overallRating: true, paymentSpeedRating: true, communicationRating: true, offerQualityRating: true, supportRating: true }).partial();\nexport const adminNoteSchema = z.object({ note: z.string() });\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({ id: true, createdAt: true });\nexport const insertPaymentSettingSchema = createInsertSchema(paymentSettings).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertPaymentSchema = createInsertSchema(payments).omit({ id: true, createdAt: true, updatedAt: true, initiatedAt: true, completedAt: true, failedAt: true, refundedAt: true });\nexport const insertSystemSettingSchema = createInsertSchema(systemSettings).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertRetainerContractSchema = createInsertSchema(retainerContracts).omit({ id: true, createdAt: true, updatedAt: true, assignedCreatorId: true, startDate: true, endDate: true });\nexport const createRetainerContractSchema = createInsertSchema(retainerContracts).omit({ id: true, companyId: true, createdAt: true, updatedAt: true, assignedCreatorId: true, startDate: true, endDate: true, status: true });\nexport const insertRetainerApplicationSchema = createInsertSchema(retainerApplications).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertRetainerDeliverableSchema = createInsertSchema(retainerDeliverables).omit({ id: true, createdAt: true, submittedAt: true, reviewedAt: true });\n\n// Type exports\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type CreatorProfile = typeof creatorProfiles.$inferSelect;\nexport type InsertCreatorProfile = z.infer<typeof insertCreatorProfileSchema>;\nexport type CompanyProfile = typeof companyProfiles.$inferSelect;\nexport type InsertCompanyProfile = z.infer<typeof insertCompanyProfileSchema>;\nexport type Offer = typeof offers.$inferSelect;\nexport type InsertOffer = z.infer<typeof insertOfferSchema>;\nexport type OfferVideo = typeof offerVideos.$inferSelect;\nexport type InsertOfferVideo = z.infer<typeof insertOfferVideoSchema>;\nexport type Application = typeof applications.$inferSelect;\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\nexport type Analytics = typeof analytics.$inferSelect;\nexport type PaymentSetting = typeof paymentSettings.$inferSelect;\nexport type InsertPaymentSetting = z.infer<typeof insertPaymentSettingSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type SystemSetting = typeof systemSettings.$inferSelect;\nexport type InsertSystemSetting = z.infer<typeof insertSystemSettingSchema>;\nexport type RetainerContract = typeof retainerContracts.$inferSelect;\nexport type InsertRetainerContract = z.infer<typeof insertRetainerContractSchema>;\nexport type RetainerApplication = typeof retainerApplications.$inferSelect;\nexport type InsertRetainerApplication = z.infer<typeof insertRetainerApplicationSchema>;\nexport type RetainerDeliverable = typeof retainerDeliverables.$inferSelect;\nexport type InsertRetainerDeliverable = z.infer<typeof insertRetainerDeliverableSchema>;\n","size_bytes":30003},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Building2, TrendingUp, AlertCircle, CheckCircle2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats } = useQuery<any>({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">Platform oversight and moderation</p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalUsers || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {stats?.newUsersThisWeek || 0} this week\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Companies</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{stats?.pendingCompanies || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Require review</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Offers</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\">{stats?.pendingOffers || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Offers</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.activeOffers || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Live on platform</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Access Section */}\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Quick Access</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <Link to=\"/admin/reviews\">\n              <Button variant=\"outline\" className=\"w-full h-auto py-6 flex flex-col gap-2\" data-testid=\"button-manage-reviews\">\n                <AlertCircle className=\"h-6 w-6\" />\n                <span>Manage Reviews</span>\n                <span className=\"text-xs text-muted-foreground\">View, edit, approve reviews</span>\n              </Button>\n            </Link>\n            <Link to=\"/admin/companies\">\n              <Button variant=\"outline\" className=\"w-full h-auto py-6 flex flex-col gap-2\" data-testid=\"button-manage-companies\">\n                <Building2 className=\"h-6 w-6\" />\n                <span>Manage Companies</span>\n                <span className=\"text-xs text-muted-foreground\">Approve or reject companies</span>\n              </Button>\n            </Link>\n            <Link to=\"/admin/offers\">\n              <Button variant=\"outline\" className=\"w-full h-auto py-6 flex flex-col gap-2\" data-testid=\"button-manage-offers\">\n                <TrendingUp className=\"h-6 w-6\" />\n                <span>Manage Offers</span>\n                <span className=\"text-xs text-muted-foreground\">Review and approve offers</span>\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Pending Company Approvals</CardTitle>\n            <Badge variant=\"secondary\">{stats?.pendingCompanies || 0}</Badge>\n          </CardHeader>\n          <CardContent>\n            {stats?.pendingCompanies > 0 ? (\n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Companies waiting for verification\n                </p>\n                <Link to=\"/admin/companies\">\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-review-companies\">\n                    Review Companies\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <CheckCircle2 className=\"h-8 w-8 text-muted-foreground/50 mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">All caught up!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Pending Offer Approvals</CardTitle>\n            <Badge variant=\"secondary\">{stats?.pendingOffers || 0}</Badge>\n          </CardHeader>\n          <CardContent>\n            {stats?.pendingOffers > 0 ? (\n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Offers waiting for review\n                </p>\n                <Link to=\"/admin/offers\">\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-review-offers\">\n                    Review Offers\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <CheckCircle2 className=\"h-8 w-8 text-muted-foreground/50 mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">All caught up!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7602},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./localAuth\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { db } from \"./db\";\nimport { offerVideos } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { z } from \"zod\";\nimport {\n  insertCreatorProfileSchema,\n  insertCompanyProfileSchema,\n  insertOfferSchema,\n  createOfferSchema,\n  insertOfferVideoSchema,\n  insertApplicationSchema,\n  insertMessageSchema,\n  insertReviewSchema,\n  insertFavoriteSchema,\n  insertPaymentSettingSchema,\n  adminReviewUpdateSchema,\n  adminNoteSchema,\n  createRetainerContractSchema,\n  insertRetainerApplicationSchema,\n  insertRetainerDeliverableSchema,\n} from \"@shared/schema\";\n\n// Alias for convenience\nconst requireAuth = isAuthenticated;\n\n// Middleware to ensure user has specific role\nfunction requireRole(...roles: string[]) {\n  return (req: Request, res: any, next: any) => {\n    if (!req.user || !roles.includes((req.user as any).role)) {\n      return res.status(403).send(\"Forbidden\");\n    }\n    next();\n  };\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Local Auth\n  await setupAuth(app);\n\n  // Profile routes\n  app.get(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const user = req.user as any;\n\n      if (user.role === 'creator') {\n        const profile = await storage.getCreatorProfile(userId);\n        if (!profile) {\n          // Create default profile if doesn't exist\n          const newProfile = await storage.createCreatorProfile({ userId });\n          return res.json(newProfile);\n        }\n        return res.json(profile);\n      } else if (user.role === 'company') {\n        const profile = await storage.getCompanyProfile(userId);\n        return res.json(profile);\n      }\n\n      res.json(null);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.put(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const user = req.user as any;\n\n      if (user.role === 'creator') {\n        const validated = insertCreatorProfileSchema.partial().parse(req.body);\n        const profile = await storage.updateCreatorProfile(userId, validated);\n        return res.json(profile);\n      } else if (user.role === 'company') {\n        const validated = insertCompanyProfileSchema.partial().parse(req.body);\n        const profile = await storage.updateCompanyProfile(userId, validated);\n        return res.json(profile);\n      }\n\n      res.status(400).send(\"Invalid role\");\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Creator stats\n  app.get(\"/api/creator/stats\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const applications = await storage.getApplicationsByCreator(userId);\n      const analyticsData = await storage.getAnalyticsByCreator(userId);\n\n      const stats = {\n        totalEarnings: analyticsData?.totalEarnings || 0,\n        monthlyEarnings: 0, // TODO: Calculate monthly\n        activeOffers: applications.filter(a => a.status === 'active').length,\n        pendingApplications: applications.filter(a => a.status === 'pending').length,\n        totalClicks: analyticsData?.totalClicks || 0,\n        monthlyClicks: 0, // TODO: Calculate monthly\n        unreadMessages: 0, // TODO: Calculate from messages\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Offers routes\n  app.get(\"/api/offers\", requireAuth, async (req, res) => {\n    try {\n      const offers = await storage.getOffers(req.query);\n      res.json(offers);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/offers/recommended\", requireAuth, async (req, res) => {\n    try {\n      // TODO: Implement recommendation algorithm\n      const offers = await storage.getOffers({});\n      res.json(offers.slice(0, 3));\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/offers/:id\", requireAuth, async (req, res) => {\n    try {\n      const offer = await storage.getOffer(req.params.id);\n      if (!offer) {\n        return res.status(404).send(\"Offer not found\");\n      }\n\n      const videos = await storage.getOfferVideos(offer.id);\n      const company = await storage.getCompanyProfileById(offer.companyId);\n\n      res.json({ ...offer, videos, company });\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/offers\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      \n      if (!companyProfile || companyProfile.status !== 'approved') {\n        return res.status(403).send(\"Company not approved\");\n      }\n\n      const validated = createOfferSchema.parse(req.body);\n      const offer = await storage.createOffer({\n        ...validated,\n        companyId: companyProfile.id,\n        status: 'pending_review',\n      });\n\n      res.json(offer);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ error: 'Validation failed', details: error.errors });\n      }\n      console.error('[offers] Error creating offer:', error);\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.put(\"/api/offers/:id\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const validated = insertOfferSchema.partial().parse(req.body);\n      const offer = await storage.updateOffer(req.params.id, validated);\n      res.json(offer);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Applications routes\n  app.get(\"/api/applications\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const applications = await storage.getApplicationsByCreator(userId);\n\n      // Fetch offer details for each application\n      const applicationsWithOffers = await Promise.all(\n        applications.map(async (app) => {\n          const offer = await storage.getOffer(app.offerId);\n          const company = offer ? await storage.getCompanyProfileById(offer.companyId) : null;\n          return { ...app, offer: offer ? { ...offer, company } : null };\n        })\n      );\n\n      res.json(applicationsWithOffers);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/applications\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validated = insertApplicationSchema.parse({\n        ...req.body,\n        creatorId: userId,\n        status: 'pending',\n      });\n\n      const application = await storage.createApplication(validated);\n\n      // TODO: Schedule auto-approval job for 7 minutes later\n\n      res.json(application);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.put(\"/api/applications/:id/approve\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const application = await storage.getApplication(req.params.id);\n      if (!application) {\n        return res.status(404).send(\"Application not found\");\n      }\n\n      // Generate tracking link and code\n      const trackingCode = `CR-${application.creatorId.substring(0, 8)}-${application.offerId.substring(0, 8)}`;\n      const trackingLink = `https://example.com/track/${trackingCode}`;\n\n      const approved = await storage.approveApplication(\n        application.id,\n        trackingLink,\n        trackingCode\n      );\n\n      res.json(approved);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.put(\"/api/applications/:id/reject\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const application = await storage.getApplication(req.params.id);\n      if (!application) {\n        return res.status(404).send(\"Application not found\");\n      }\n\n      // Verify the application belongs to one of the company's offers\n      const offer = await storage.getOffer(application.offerId);\n      if (!offer) {\n        return res.status(404).send(\"Offer not found\");\n      }\n\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) {\n        return res.status(404).send(\"Company profile not found\");\n      }\n\n      // Verify ownership\n      if (offer.companyId !== companyProfile.id) {\n        return res.status(403).send(\"Unauthorized\");\n      }\n\n      const rejected = await storage.updateApplication(application.id, {\n        status: 'rejected',\n      });\n\n      res.json(rejected);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/applications/:id/complete\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const application = await storage.getApplication(req.params.id);\n      if (!application) {\n        return res.status(404).send(\"Application not found\");\n      }\n\n      // Verify the application belongs to one of the company's offers\n      const offer = await storage.getOffer(application.offerId);\n      if (!offer) {\n        return res.status(404).send(\"Offer not found\");\n      }\n\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) {\n        return res.status(404).send(\"Company profile not found\");\n      }\n\n      // Compare offer.companyId against companyProfile.id (not userId)\n      if (offer.companyId !== companyProfile.id) {\n        return res.status(403).send(\"Unauthorized\");\n      }\n\n      // Verify application is approved before marking complete\n      if (application.status !== 'approved' && application.status !== 'active') {\n        return res.status(400).send(\"Only approved applications can be marked as complete\");\n      }\n\n      const completed = await storage.completeApplication(application.id);\n      res.json(completed);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/company/applications\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      console.log('[/api/company/applications] userId:', userId);\n      const companyProfile = await storage.getCompanyProfile(userId);\n      console.log('[/api/company/applications] companyProfile:', companyProfile);\n      if (!companyProfile) {\n        console.log('[/api/company/applications] No company profile found for user:', userId);\n        return res.status(404).send(\"Company profile not found\");\n      }\n      \n      // Pass company profile ID, not user ID\n      const applications = await storage.getApplicationsByCompany(companyProfile.id);\n      console.log('[/api/company/applications] Found', applications.length, 'applications');\n      res.json(applications);\n    } catch (error: any) {\n      console.error('[/api/company/applications] Error:', error);\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Favorites routes\n  app.get(\"/api/favorites\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const favorites = await storage.getFavoritesByCreator(userId);\n\n      // Fetch offer details for each favorite\n      const favoritesWithOffers = await Promise.all(\n        favorites.map(async (fav) => {\n          const offer = await storage.getOffer(fav.offerId);\n          const company = offer ? await storage.getCompanyProfileById(offer.companyId) : null;\n          return { ...fav, offer: offer ? { ...offer, company } : null };\n        })\n      );\n\n      res.json(favoritesWithOffers);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/favorites/:offerId\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const isFav = await storage.isFavorite(userId, req.params.offerId);\n      res.json(isFav);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/favorites\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validated = insertFavoriteSchema.parse({\n        ...req.body,\n        creatorId: userId,\n      });\n\n      const favorite = await storage.createFavorite(validated);\n      res.json(favorite);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.delete(\"/api/favorites/:offerId\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      await storage.deleteFavorite(userId, req.params.offerId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Tracking & Redirect System\n  app.get(\"/track/:code\", async (req, res) => {\n    try {\n      const trackingCode = req.params.code;\n      \n      // Look up application by tracking code\n      const application = await storage.getApplicationByTrackingCode(trackingCode);\n      if (!application) {\n        return res.status(404).send(\"Tracking link not found\");\n      }\n\n      // Get offer details for product URL\n      const offer = await storage.getOffer(application.offerId);\n      if (!offer) {\n        return res.status(404).send(\"Offer not found\");\n      }\n\n      // Extract client IP (normalize for proxies/load balancers)\n      let clientIp = 'unknown';\n      const forwardedFor = req.headers['x-forwarded-for'];\n      if (forwardedFor) {\n        // X-Forwarded-For can be comma-separated, take first (client) IP\n        const forwardedIpValue = Array.isArray(forwardedFor) ? forwardedFor[0] : forwardedFor;\n        const ips = String(forwardedIpValue).split(',').map(ip => ip.trim());\n        clientIp = ips[0];\n      } else if (req.socket.remoteAddress) {\n        clientIp = req.socket.remoteAddress;\n      } else if (req.ip) {\n        clientIp = req.ip;\n      }\n      \n      // Clean IPv6-mapped IPv4 addresses (::ffff:192.168.1.1 → 192.168.1.1)\n      if (clientIp.startsWith('::ffff:')) {\n        clientIp = clientIp.substring(7);\n      }\n\n      const userAgent = req.headers['user-agent'] || 'unknown';\n      const refererRaw = req.headers['referer'] || req.headers['referrer'];\n      const referer = Array.isArray(refererRaw) ? refererRaw[0] : (refererRaw || 'direct');\n      \n      // Log the click asynchronously (don't block redirect)\n      storage.logTrackingClick(application.id, {\n        ip: clientIp,\n        userAgent,\n        referer,\n        timestamp: new Date(),\n      }).catch(err => console.error('[Tracking] Error logging click:', err));\n\n      // Redirect to product URL\n      res.redirect(302, offer.productUrl);\n    } catch (error: any) {\n      console.error('[Tracking] Error:', error);\n      res.status(500).send(\"Internal server error\");\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/analytics\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const dateRange = (req.query.range as string) || '30d';\n      const analyticsData = await storage.getAnalyticsByCreator(userId);\n      const applications = await storage.getApplicationsByCreator(userId);\n      const chartData = await storage.getAnalyticsTimeSeriesByCreator(userId, dateRange);\n\n      const stats = {\n        totalEarnings: analyticsData?.totalEarnings || 0,\n        activeOffers: applications.filter(a => a.status === 'active' || a.status === 'approved').length,\n        totalClicks: analyticsData?.totalClicks || 0,\n        uniqueClicks: analyticsData?.uniqueClicks || 0,\n        conversions: analyticsData?.conversions || 0,\n        conversionRate: analyticsData?.totalClicks > 0 \n          ? ((analyticsData?.conversions || 0) / analyticsData.totalClicks * 100).toFixed(1)\n          : 0,\n        chartData: chartData,\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Messages routes\n  app.get(\"/api/conversations\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const userId = user.id;\n      const userRole = user.role;\n      \n      // Get company profile ID if user is a company\n      let companyProfileId = null;\n      if (userRole === 'company') {\n        const companyProfile = await storage.getCompanyProfile(userId);\n        companyProfileId = companyProfile?.id;\n      }\n      \n      const conversations = await storage.getConversationsByUser(userId, userRole, companyProfileId);\n      res.json(conversations);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/messages/:conversationId\", requireAuth, async (req, res) => {\n    try {\n      const messages = await storage.getMessages(req.params.conversationId);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/messages\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validated = insertMessageSchema.parse({\n        ...req.body,\n        senderId: userId,\n      });\n\n      const message = await storage.createMessage(validated);\n      res.json(message);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Get or create conversation for an application\n  app.post(\"/api/conversations/start\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { applicationId } = req.body;\n\n      if (!applicationId) {\n        return res.status(400).json({ error: \"applicationId is required\" });\n      }\n\n      // Get the application\n      const application = await storage.getApplication(applicationId);\n      if (!application) {\n        return res.status(404).json({ error: \"Application not found\" });\n      }\n\n      // Get user role and company profile\n      const user = req.user as any;\n      let companyId: string | null = null;\n      let companyProfileId: string | null = null;\n\n      if (user.role === 'company') {\n        const companyProfile = await storage.getCompanyProfile(userId);\n        companyId = companyProfile?.id || null;\n        companyProfileId = companyProfile?.id || null;\n      } else {\n        // If creator, get company from offer\n        const offer = await storage.getOffer(application.offerId);\n        companyId = offer?.companyId || null;\n      }\n\n      if (!companyId) {\n        return res.status(400).json({ error: \"Could not determine company\" });\n      }\n\n      // Find existing conversation for this application\n      const existingConversations = await storage.getConversationsByUser(userId, user.role, companyProfileId);\n      const existingConversation = existingConversations.find(\n        (c: any) => c.applicationId === applicationId\n      );\n\n      if (existingConversation) {\n        return res.json({ conversationId: existingConversation.id });\n      }\n\n      // Create new conversation\n      const conversation = await storage.createConversation({\n        applicationId,\n        creatorId: application.creatorId,\n        companyId,\n        offerId: application.offerId,\n        lastMessageAt: new Date(),\n      });\n\n      res.json({ conversationId: conversation.id });\n    } catch (error: any) {\n      console.error('Error starting conversation:', error);\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Reviews routes\n  app.post(\"/api/reviews\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validated = insertReviewSchema.parse({\n        ...req.body,\n        creatorId: userId,\n      });\n\n      const review = await storage.createReview(validated);\n      res.json(review);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Payment Settings routes\n  app.get(\"/api/payment-settings\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const settings = await storage.getPaymentSettings(userId);\n      res.json(settings);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/payment-settings\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validated = insertPaymentSettingSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const setting = await storage.createPaymentSetting(validated);\n      res.json(setting);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company routes\n  app.get(\"/api/company/offers\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      \n      if (!companyProfile) {\n        return res.status(404).send(\"Company profile not found\");\n      }\n\n      const offers = await storage.getOffersByCompany(companyProfile.id);\n      res.json(offers);\n    } catch (error: any) {\n      console.error('[company/offers] Error getting company offers:', error);\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/company/stats\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      \n      if (!companyProfile) {\n        return res.json({\n          activeCreators: 0,\n          pendingApplications: 0,\n          liveOffers: 0,\n          draftOffers: 0,\n          totalApplications: 0,\n          totalClicks: 0,\n          conversions: 0,\n          companyProfile: null,\n        });\n      }\n\n      const offers = await storage.getOffersByCompany(companyProfile.id);\n      let totalApplications = 0;\n\n      for (const offer of offers) {\n        const apps = await storage.getApplicationsByOffer(offer.id);\n        totalApplications += apps.length;\n      }\n\n      const stats = {\n        activeCreators: 0, // TODO: Count unique active creators\n        pendingApplications: 0, // TODO: Count pending applications\n        liveOffers: offers.filter(o => o.status === 'approved').length,\n        draftOffers: offers.filter(o => o.status === 'draft').length,\n        totalApplications,\n        totalClicks: 0, // TODO: Aggregate from analytics\n        conversions: 0, // TODO: Aggregate from analytics\n        companyProfile,\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const pendingCompanies = await storage.getPendingCompanies();\n      const pendingOffers = await storage.getPendingOffers();\n\n      const stats = {\n        totalUsers: 0, // TODO: Count all users\n        newUsersThisWeek: 0, // TODO: Count users created this week\n        pendingCompanies: pendingCompanies.length,\n        pendingOffers: pendingOffers.length,\n        activeOffers: 0, // TODO: Count approved offers\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/admin/companies\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const companies = await storage.getPendingCompanies();\n      res.json(companies);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/companies/:id/approve\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const company = await storage.approveCompany(req.params.id);\n      res.json(company);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/companies/:id/reject\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const { reason } = req.body;\n      const company = await storage.rejectCompany(req.params.id, reason);\n      res.json(company);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Admin creator routes\n  app.get(\"/api/admin/creators\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const creators = await storage.getAllCreators();\n      res.json(creators);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/creators/:id/suspend\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const user = await storage.suspendUser(req.params.id);\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/creators/:id/unsuspend\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const user = await storage.unsuspendUser(req.params.id);\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/creators/:id/ban\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const user = await storage.banUser(req.params.id);\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.get(\"/api/admin/offers\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const offers = await storage.getPendingOffers();\n      res.json(offers);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/offers/:id/approve\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const offer = await storage.approveOffer(req.params.id);\n      res.json(offer);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Admin review routes\n  app.get(\"/api/admin/reviews\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const reviews = await storage.getAllReviews();\n      res.json(reviews);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.patch(\"/api/admin/reviews/:id\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const validated = adminReviewUpdateSchema.parse(req.body);\n      const review = await storage.updateReview(req.params.id, validated);\n      res.json(review);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/reviews/:id/hide\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const review = await storage.hideReview(req.params.id);\n      res.json(review);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.delete(\"/api/admin/reviews/:id\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      await storage.deleteReview(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/reviews/:id/note\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validated = adminNoteSchema.parse(req.body);\n      const review = await storage.updateAdminNote(req.params.id, validated.note, userId);\n      res.json(review);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/admin/reviews/:id/approve\", requireAuth, requireRole('admin'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const review = await storage.approveReview(req.params.id, userId);\n      res.json(review);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Object Storage routes\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", requireAuth, async (req, res) => {\n    const userId = (req.user as any)?.id;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", requireAuth, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n    res.json({ uploadURL });\n  });\n\n  app.put(\"/api/company-logos\", requireAuth, requireRole('company'), async (req, res) => {\n    if (!req.body.logoUrl) {\n      return res.status(400).json({ error: \"logoUrl is required\" });\n    }\n    const userId = (req.user as any).id;\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.logoUrl,\n        {\n          owner: userId,\n          visibility: \"public\",\n        },\n      );\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (companyProfile) {\n        await storage.updateCompanyProfile(userId, { logoUrl: objectPath });\n      }\n      res.status(200).json({ objectPath });\n    } catch (error) {\n      console.error(\"Error setting company logo:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Offer Videos endpoints\n  app.get(\"/api/offers/:offerId/videos\", requireAuth, async (req, res) => {\n    try {\n      const videos = await storage.getOfferVideos(req.params.offerId);\n      res.json(videos);\n    } catch (error: any) {\n      console.error(\"Error fetching offer videos:\", error);\n      res.status(500).send(error.message);\n    }\n  });\n\n  app.post(\"/api/offers/:offerId/videos\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const offerId = req.params.offerId;\n      \n      // Verify the offer belongs to this company\n      const offer = await storage.getOffer(offerId);\n      if (!offer) {\n        return res.status(404).json({ error: \"Offer not found\" });\n      }\n      \n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile || offer.companyId !== companyProfile.id) {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      // Check video count (max 12)\n      const existingVideos = await storage.getOfferVideos(offerId);\n      if (existingVideos.length >= 12) {\n        return res.status(400).json({ error: \"Maximum 12 videos allowed per offer\" });\n      }\n\n      const { videoUrl, title, description, creatorCredit, originalPlatform, thumbnailUrl } = req.body;\n      if (!videoUrl || !title) {\n        return res.status(400).json({ error: \"videoUrl and title are required\" });\n      }\n\n      // Set ACL for the video\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        videoUrl,\n        {\n          owner: userId,\n          visibility: \"public\",\n        },\n      );\n\n      // Create video record in database\n      const video = await storage.createOfferVideo({\n        offerId,\n        videoUrl: objectPath,\n        title,\n        description: description || null,\n        creatorCredit: creatorCredit || null,\n        originalPlatform: originalPlatform || null,\n        thumbnailUrl: thumbnailUrl || null,\n        orderIndex: existingVideos.length, // Auto-increment order\n      });\n\n      res.json(video);\n    } catch (error: any) {\n      console.error(\"Error creating offer video:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/offer-videos/:id\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const videoId = req.params.id;\n      \n      // Get the video to verify ownership\n      const videos = await db.select().from(offerVideos).where(eq(offerVideos.id, videoId)).limit(1);\n      const video = videos[0];\n      \n      if (!video) {\n        return res.status(404).json({ error: \"Video not found\" });\n      }\n\n      // Verify the offer belongs to this company\n      const offer = await storage.getOffer(video.offerId);\n      if (!offer) {\n        return res.status(404).json({ error: \"Offer not found\" });\n      }\n      \n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile || offer.companyId !== companyProfile.id) {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      // Delete the video\n      await storage.deleteOfferVideo(videoId);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error deleting offer video:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // =====================================================\n  // RETAINER CONTRACTS ROUTES\n  // =====================================================\n\n  // Get all open retainer contracts (for creators to browse)\n  app.get(\"/api/retainer-contracts\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const contracts = await storage.getOpenRetainerContracts();\n      res.json(contracts);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Get specific retainer contract\n  app.get(\"/api/retainer-contracts/:id\", requireAuth, async (req, res) => {\n    try {\n      const contract = await storage.getRetainerContract(req.params.id);\n      if (!contract) return res.status(404).send(\"Not found\");\n      res.json(contract);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Get their retainer contracts\n  app.get(\"/api/company/retainer-contracts\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const contracts = await storage.getRetainerContractsByCompany(companyProfile.id);\n      res.json(contracts);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Create retainer contract\n  app.post(\"/api/company/retainer-contracts\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const validated = createRetainerContractSchema.parse(req.body);\n      const contract = await storage.createRetainerContract({ ...validated, companyId: companyProfile.id });\n      res.json(contract);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Update retainer contract\n  app.patch(\"/api/company/retainer-contracts/:id\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const contract = await storage.getRetainerContract(req.params.id);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      const validated = createRetainerContractSchema.partial().parse(req.body);\n      const updated = await storage.updateRetainerContract(req.params.id, validated);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Delete retainer contract\n  app.delete(\"/api/company/retainer-contracts/:id\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const contract = await storage.getRetainerContract(req.params.id);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      await storage.deleteRetainerContract(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Creator: Get assigned contracts\n  app.get(\"/api/creator/retainer-contracts\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const contracts = await storage.getRetainerContractsByCreator(userId);\n      res.json(contracts);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Get applications for a contract\n  app.get(\"/api/retainer-contracts/:id/applications\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const contract = await storage.getRetainerContract(req.params.id);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      const applications = await storage.getRetainerApplicationsByContract(req.params.id);\n      res.json(applications);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Creator: Get their applications\n  app.get(\"/api/creator/retainer-applications\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const applications = await storage.getRetainerApplicationsByCreator(userId);\n      res.json(applications);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Creator: Apply to contract\n  app.post(\"/api/creator/retainer-contracts/:id/apply\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const body = {\n        ...req.body,\n        proposedStartDate: req.body.proposedStartDate ? new Date(req.body.proposedStartDate) : undefined,\n      };\n      const validated = insertRetainerApplicationSchema.omit({ creatorId: true, contractId: true }).parse(body);\n      const application = await storage.createRetainerApplication({ ...validated, contractId: req.params.id, creatorId: userId });\n      res.json(application);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Approve application\n  app.patch(\"/api/company/retainer-applications/:id/approve\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const application = await storage.getRetainerApplication(req.params.id);\n      if (!application) return res.status(404).send(\"Application not found\");\n      const contract = await storage.getRetainerContract(application.contractId);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      const approved = await storage.approveRetainerApplication(req.params.id, application.contractId, application.creatorId);\n      res.json(approved);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Reject application\n  app.patch(\"/api/company/retainer-applications/:id/reject\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const application = await storage.getRetainerApplication(req.params.id);\n      if (!application) return res.status(404).send(\"Application not found\");\n      const contract = await storage.getRetainerContract(application.contractId);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      const rejected = await storage.rejectRetainerApplication(req.params.id);\n      res.json(rejected);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Get deliverables for contract\n  app.get(\"/api/retainer-contracts/:id/deliverables\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const user = req.user as any;\n      const contract = await storage.getRetainerContract(req.params.id);\n      if (!contract) return res.status(404).send(\"Contract not found\");\n      if (user.role === 'company') {\n        const companyProfile = await storage.getCompanyProfile(userId);\n        if (!companyProfile || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      } else if (user.role === 'creator') {\n        if (contract.assignedCreatorId !== userId) return res.status(403).send(\"Forbidden\");\n      }\n      const deliverables = await storage.getRetainerDeliverablesByContract(req.params.id);\n      res.json(deliverables);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Creator: Get their deliverables\n  app.get(\"/api/creator/retainer-deliverables\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const deliverables = await storage.getRetainerDeliverablesByCreator(userId);\n      res.json(deliverables);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Creator: Submit deliverable\n  app.post(\"/api/creator/retainer-deliverables\", requireAuth, requireRole('creator'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const validated = insertRetainerDeliverableSchema.omit({ creatorId: true }).parse(req.body);\n      const contract = await storage.getRetainerContract(validated.contractId);\n      if (!contract || contract.assignedCreatorId !== userId) return res.status(403).send(\"Forbidden\");\n      const deliverable = await storage.createRetainerDeliverable({ ...validated, creatorId: userId });\n      res.json(deliverable);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Approve deliverable\n  app.patch(\"/api/company/retainer-deliverables/:id/approve\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const deliverable = await storage.getRetainerDeliverable(req.params.id);\n      if (!deliverable) return res.status(404).send(\"Deliverable not found\");\n      const contract = await storage.getRetainerContract(deliverable.contractId);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      const approved = await storage.approveRetainerDeliverable(req.params.id, req.body.reviewNotes);\n      res.json(approved);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Reject deliverable\n  app.patch(\"/api/company/retainer-deliverables/:id/reject\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const deliverable = await storage.getRetainerDeliverable(req.params.id);\n      if (!deliverable) return res.status(404).send(\"Deliverable not found\");\n      const contract = await storage.getRetainerContract(deliverable.contractId);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      if (!req.body.reviewNotes) return res.status(400).send(\"Review notes required\");\n      const rejected = await storage.rejectRetainerDeliverable(req.params.id, req.body.reviewNotes);\n      res.json(rejected);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  // Company: Request revision\n  app.patch(\"/api/company/retainer-deliverables/:id/request-revision\", requireAuth, requireRole('company'), async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const companyProfile = await storage.getCompanyProfile(userId);\n      if (!companyProfile) return res.status(404).send(\"Company profile not found\");\n      const deliverable = await storage.getRetainerDeliverable(req.params.id);\n      if (!deliverable) return res.status(404).send(\"Deliverable not found\");\n      const contract = await storage.getRetainerContract(deliverable.contractId);\n      if (!contract || contract.companyId !== companyProfile.id) return res.status(403).send(\"Forbidden\");\n      if (!req.body.reviewNotes) return res.status(400).send(\"Review notes required\");\n      const revised = await storage.requestRevision(req.params.id, req.body.reviewNotes);\n      res.json(revised);\n    } catch (error: any) {\n      res.status(500).send(error.message);\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time messaging\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  // Store connected clients\n  const clients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws: WebSocket, req: any) => {\n    const userId = req.user?.id; // This would need proper auth integration\n    \n    if (userId) {\n      clients.set(userId, ws);\n    }\n\n    ws.on('message', async (data: Buffer) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'chat_message') {\n          // Save message to database\n          const savedMessage = await storage.createMessage({\n            conversationId: message.conversationId,\n            senderId: message.senderId,\n            content: message.content,\n          });\n\n          // Find all participants in the conversation\n          const conversation = await storage.getConversation(message.conversationId);\n          \n          // Send to all participants\n          const recipientIds = [conversation.creatorId, conversation.companyId];\n          for (const recipientId of recipientIds) {\n            const recipientWs = clients.get(recipientId);\n            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {\n              recipientWs.send(JSON.stringify({\n                type: 'new_message',\n                message: savedMessage,\n              }));\n            }\n          }\n        } else if (message.type === 'typing_start') {\n          // Broadcast typing indicator to other participants\n          const conversation = await storage.getConversation(message.conversationId);\n          const recipientIds = [conversation.creatorId, conversation.companyId].filter(id => id !== userId);\n          \n          for (const recipientId of recipientIds) {\n            const recipientWs = clients.get(recipientId);\n            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {\n              recipientWs.send(JSON.stringify({\n                type: 'user_typing',\n                conversationId: message.conversationId,\n                userId: userId,\n              }));\n            }\n          }\n        } else if (message.type === 'typing_stop') {\n          // Broadcast stop typing indicator\n          const conversation = await storage.getConversation(message.conversationId);\n          const recipientIds = [conversation.creatorId, conversation.companyId].filter(id => id !== userId);\n          \n          for (const recipientId of recipientIds) {\n            const recipientWs = clients.get(recipientId);\n            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {\n              recipientWs.send(JSON.stringify({\n                type: 'user_stop_typing',\n                conversationId: message.conversationId,\n                userId: userId,\n              }));\n            }\n          }\n        } else if (message.type === 'mark_read') {\n          // Mark messages as read\n          await storage.markMessagesAsRead(message.conversationId, userId);\n          \n          // Notify the sender that messages have been read\n          const conversation = await storage.getConversation(message.conversationId);\n          const recipientIds = [conversation.creatorId, conversation.companyId].filter(id => id !== userId);\n          \n          for (const recipientId of recipientIds) {\n            const recipientWs = clients.get(recipientId);\n            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {\n              recipientWs.send(JSON.stringify({\n                type: 'messages_read',\n                conversationId: message.conversationId,\n                readBy: userId,\n              }));\n            }\n          }\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (userId) {\n        clients.delete(userId);\n      }\n    });\n  });\n\n  // Auto-approval scheduler - runs every minute to check for applications that need auto-approval\n  const runAutoApprovalScheduler = async () => {\n    try {\n      const pendingApplications = await storage.getAllPendingApplications();\n      const now = new Date();\n      let processedCount = 0;\n      \n      for (const application of pendingApplications) {\n        // Only process pending applications with scheduled auto-approval time\n        if (application.status === 'pending' && application.autoApprovalScheduledAt) {\n          const scheduledTime = new Date(application.autoApprovalScheduledAt);\n          \n          // Check if the application is past its 7-minute auto-approval window\n          if (now >= scheduledTime) {\n            try {\n              const trackingCode = `CR-${application.creatorId.substring(0, 8)}-${application.offerId.substring(0, 8)}-${Date.now()}`;\n              const trackingLink = `https://${process.env.REPLIT_DEV_DOMAIN || 'localhost:5000'}/track/${trackingCode}`;\n              \n              await storage.approveApplication(\n                application.id,\n                trackingLink,\n                trackingCode\n              );\n              \n              processedCount++;\n              console.log(`[Auto-Approval] ✓ Approved application ${application.id} (${processedCount} total)`);\n            } catch (error) {\n              console.error(`[Auto-Approval] ✗ Failed to approve application ${application.id}:`, error);\n            }\n          }\n        }\n      }\n      \n      if (processedCount > 0) {\n        console.log(`[Auto-Approval] Processed ${processedCount} applications successfully`);\n      }\n    } catch (error) {\n      console.error('[Auto-Approval] Scheduler error:', error);\n    }\n  };\n\n  // Run scheduler every minute\n  console.log('[Auto-Approval] Scheduler started - checking every 60 seconds');\n  setInterval(runAutoApprovalScheduler, 60000);\n  \n  // Run once immediately on startup\n  runAutoApprovalScheduler();\n\n  return httpServer;\n}\n","size_bytes":52711},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/pages/settings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [bio, setBio] = useState(\"\");\n  const [youtubeUrl, setYoutubeUrl] = useState(\"\");\n  const [tiktokUrl, setTiktokUrl] = useState(\"\");\n  const [instagramUrl, setInstagramUrl] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: profile } = useQuery<any>({\n    queryKey: [\"/api/profile\"],\n    enabled: isAuthenticated,\n    onSuccess: (data) => {\n      if (data) {\n        setBio(data.bio || \"\");\n        setYoutubeUrl(data.youtubeUrl || \"\");\n        setTiktokUrl(data.tiktokUrl || \"\");\n        setInstagramUrl(data.instagramUrl || \"\");\n      }\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"PUT\", \"/api/profile\", {\n        bio,\n        youtubeUrl,\n        tiktokUrl,\n        instagramUrl,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-6 max-w-2xl\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your account preferences</p>\n      </div>\n\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Profile Information</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"h-20 w-20\">\n              <AvatarImage src={user?.profileImageUrl || ''} alt={user?.firstName || 'User'} />\n              <AvatarFallback className=\"text-lg\">{user?.firstName?.[0] || user?.email?.[0] || 'U'}</AvatarFallback>\n            </Avatar>\n            <div>\n              <div className=\"font-semibold\">{user?.firstName} {user?.lastName}</div>\n              <div className=\"text-sm text-muted-foreground\">{user?.email}</div>\n              <div className=\"text-xs text-muted-foreground capitalize mt-1\">{user?.role} Account</div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {user?.role === 'creator' && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"bio\">Bio</Label>\n                <Textarea\n                  id=\"bio\"\n                  placeholder=\"Tell companies about yourself and your audience...\"\n                  value={bio}\n                  onChange={(e) => setBio(e.target.value)}\n                  className=\"min-h-24\"\n                  data-testid=\"textarea-bio\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"youtube\">YouTube URL</Label>\n                <Input\n                  id=\"youtube\"\n                  type=\"url\"\n                  placeholder=\"https://youtube.com/@yourchannel\"\n                  value={youtubeUrl}\n                  onChange={(e) => setYoutubeUrl(e.target.value)}\n                  data-testid=\"input-youtube\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tiktok\">TikTok URL</Label>\n                <Input\n                  id=\"tiktok\"\n                  type=\"url\"\n                  placeholder=\"https://tiktok.com/@yourusername\"\n                  value={tiktokUrl}\n                  onChange={(e) => setTiktokUrl(e.target.value)}\n                  data-testid=\"input-tiktok\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"instagram\">Instagram URL</Label>\n                <Input\n                  id=\"instagram\"\n                  type=\"url\"\n                  placeholder=\"https://instagram.com/yourusername\"\n                  value={instagramUrl}\n                  onChange={(e) => setInstagramUrl(e.target.value)}\n                  data-testid=\"input-instagram\"\n                />\n              </div>\n\n              <Button\n                onClick={() => updateProfileMutation.mutate()}\n                disabled={updateProfileMutation.isPending}\n                data-testid=\"button-save-profile\"\n              >\n                {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Account</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"font-medium\">Log Out</div>\n              <div className=\"text-sm text-muted-foreground\">Sign out of your account</div>\n            </div>\n            <Button variant=\"outline\" asChild data-testid=\"button-logout\">\n              <a href=\"/api/logout\">Log Out</a>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6764},"client/src/components/app-sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Home,\n  TrendingUp,\n  FileText,\n  MessageSquare,\n  Heart,\n  Settings,\n  DollarSign,\n  Star,\n  Building2,\n  Users,\n  ShieldCheck,\n  Zap,\n  ChevronDown,\n  LogOut,\n  Video,\n  CalendarClock,\n} from \"lucide-react\";\n\nexport function AppSidebar() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const creatorItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/\",\n      icon: Home,\n    },\n    {\n      title: \"Browse Offers\",\n      url: \"/browse\",\n      icon: TrendingUp,\n    },\n    {\n      title: \"Monthly Retainers\",\n      url: \"/retainers\",\n      icon: CalendarClock,\n    },\n    {\n      title: \"My Applications\",\n      url: \"/applications\",\n      icon: FileText,\n    },\n    {\n      title: \"Analytics\",\n      url: \"/analytics\",\n      icon: TrendingUp,\n    },\n    {\n      title: \"Messages\",\n      url: \"/messages\",\n      icon: MessageSquare,\n    },\n    {\n      title: \"Favorites\",\n      url: \"/favorites\",\n      icon: Heart,\n    },\n  ];\n\n  const companyItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/company\",\n      icon: Home,\n    },\n    {\n      title: \"My Offers\",\n      url: \"/company/offers\",\n      icon: TrendingUp,\n    },\n    {\n      title: \"Videos\",\n      url: \"/company/videos\",\n      icon: Video,\n    },\n    {\n      title: \"Monthly Retainers\",\n      url: \"/company/retainers\",\n      icon: CalendarClock,\n    },\n    {\n      title: \"Applications\",\n      url: \"/company/applications\",\n      icon: FileText,\n    },\n    {\n      title: \"Creators\",\n      url: \"/company/creators\",\n      icon: Users,\n    },\n    {\n      title: \"Analytics\",\n      url: \"/company/analytics\",\n      icon: TrendingUp,\n    },\n    {\n      title: \"Messages\",\n      url: \"/company/messages\",\n      icon: MessageSquare,\n    },\n    {\n      title: \"Reviews\",\n      url: \"/company/reviews\",\n      icon: Star,\n    },\n  ];\n\n  const adminItems = [\n    {\n      title: \"Dashboard\",\n      url: \"/admin\",\n      icon: Home,\n    },\n    {\n      title: \"Company Approvals\",\n      url: \"/admin/companies\",\n      icon: Building2,\n    },\n    {\n      title: \"Offer Approvals\",\n      url: \"/admin/offers\",\n      icon: TrendingUp,\n    },\n    {\n      title: \"Creator Management\",\n      url: \"/admin/creators\",\n      icon: Users,\n    },\n    {\n      title: \"Review Management\",\n      url: \"/admin/reviews\",\n      icon: Star,\n    },\n  ];\n\n  const getMenuItems = () => {\n    if (user?.role === 'company') return companyItems;\n    if (user?.role === 'admin') return adminItems;\n    return creatorItems;\n  };\n\n  const menuItems = getMenuItems();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b px-4 py-4\">\n        <Link href=\"/\">\n          <div className=\"flex items-center gap-2 cursor-pointer\">\n            <div className=\"h-8 w-8 rounded-md bg-primary flex items-center justify-center\">\n              <Zap className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"font-bold text-lg\">CreatorLink</span>\n          </div>\n        </Link>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>\n            {user?.role === 'company' ? 'Company Portal' : user?.role === 'admin' ? 'Admin Panel' : 'Creator Portal'}\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.url}>\n                  <SidebarMenuButton asChild isActive={location === item.url} data-testid={`nav-${item.title.toLowerCase().replace(/\\s/g, '-')}`}>\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Settings</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton asChild isActive={location === '/settings'} data-testid=\"nav-settings\">\n                  <Link href=\"/settings\">\n                    <Settings className=\"h-4 w-4\" />\n                    <span>Settings</span>\n                  </Link>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n              <SidebarMenuItem>\n                <SidebarMenuButton asChild isActive={location === '/payment-settings'} data-testid=\"nav-payment-settings\">\n                  <Link href=\"/payment-settings\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    <span>Payment Settings</span>\n                  </Link>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t p-4\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <button className=\"flex items-center gap-3 w-full hover-elevate p-2 rounded-md\" data-testid=\"button-user-menu\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarImage src={user?.profileImageUrl || ''} alt={user?.firstName || 'User'} />\n                <AvatarFallback>{user?.firstName?.[0] || user?.email?.[0] || 'U'}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 text-left\">\n                <div className=\"text-sm font-medium\">{user?.firstName || user?.email || 'User'}</div>\n                <div className=\"text-xs text-muted-foreground capitalize\">{user?.role || 'creator'}</div>\n              </div>\n              <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n            </button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <DropdownMenuItem asChild>\n              <Link href=\"/settings\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Settings</span>\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem \n              onClick={async () => {\n                try {\n                  await fetch('/api/auth/logout', { \n                    method: 'POST',\n                    credentials: 'include'\n                  });\n                  window.location.href = '/';\n                } catch (error) {\n                  console.error('Logout error:', error);\n                  window.location.href = '/';\n                }\n              }}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Log Out</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":7405},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/messages.tsx":{"content":"import { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Send, \n  MessageSquare, \n  Image as ImageIcon, \n  Check, \n  CheckCheck,\n  WifiOff,\n  Loader2,\n  Bell,\n  BellOff\n} from \"lucide-react\";\nimport { format, isToday, isYesterday, isSameDay } from \"date-fns\";\n\ntype MessageStatus = \"sending\" | \"sent\" | \"failed\";\n\ninterface EnhancedMessage {\n  id: string;\n  senderId: string;\n  content: string;\n  createdAt: string;\n  isRead: boolean;\n  status?: MessageStatus;\n  tempId?: string;\n}\n\nexport default function Messages() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [location] = useLocation();\n  \n  // Get conversation ID from URL query parameter\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const conversationFromUrl = urlParams.get('conversation');\n  \n  const [selectedConversation, setSelectedConversation] = useState<string | null>(conversationFromUrl);\n  const [messageText, setMessageText] = useState(\"\");\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [typingUsers, setTypingUsers] = useState<Set<string>>(new Set());\n  const [soundEnabled, setSoundEnabled] = useState(() => {\n    const saved = localStorage.getItem('messageSoundEnabled');\n    return saved === null ? true : saved === 'true';\n  });\n  const wsRef = useRef<WebSocket | null>(null);\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const messageInputRef = useRef<HTMLInputElement>(null);\n  const lastMessageCountRef = useRef(0);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const selectedConversationRef = useRef<string | null>(selectedConversation);\n  const userIdRef = useRef<string | undefined>(user?.id);\n\n  // Update refs when values change\n  useEffect(() => {\n    selectedConversationRef.current = selectedConversation;\n    // Clear typing users when switching conversations\n    setTypingUsers(new Set());\n  }, [selectedConversation]);\n\n  useEffect(() => {\n    userIdRef.current = user?.id;\n  }, [user?.id]);\n\n  // Update selected conversation when URL changes\n  useEffect(() => {\n    if (conversationFromUrl && conversationFromUrl !== selectedConversation) {\n      setSelectedConversation(conversationFromUrl);\n    }\n  }, [conversationFromUrl, selectedConversation]);\n\n  // Initialize notification sound\n  useEffect(() => {\n    audioRef.current = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvHZhjMICGS56+OcTgwOUKzk7rdkHQc2jdXy0IEsDipu0ObnllkTClGn4u2yaBcGLXjH8N+OSA==');\n  }, []);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // WebSocket connection (only reconnect on auth changes, not UI state)\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    let shouldReconnect = true; // Per-effect reconnect flag\n    \n    const connectWebSocket = () => {\n      try {\n        setIsConnecting(true);\n        const socket = new WebSocket(wsUrl);\n        \n        // Assign immediately so error/close handlers can identify this socket\n        wsRef.current = socket;\n        \n        socket.onopen = () => {\n          // Only update state if this socket is still current\n          if (socket === wsRef.current) {\n            setIsConnecting(false);\n            setIsConnected(true);\n          }\n        };\n\n        socket.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            \n            if (data.type === 'new_message') {\n              // Invalidate queries\n              if (data.message?.conversationId) {\n                queryClient.invalidateQueries({ \n                  queryKey: [\"/api/messages\", data.message.conversationId] \n                });\n              }\n              queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n              \n              // Play sound - read from current state\n              const currentSoundEnabled = localStorage.getItem('messageSoundEnabled');\n              const shouldPlaySound = currentSoundEnabled === null ? true : currentSoundEnabled === 'true';\n              if (shouldPlaySound && data.message?.senderId !== userIdRef.current && audioRef.current) {\n                audioRef.current.play().catch(() => {});\n              }\n            } else if (data.type === 'user_typing') {\n              // Use ref to get current conversation (not stale closure value)\n              if (data.conversationId === selectedConversationRef.current) {\n                setTypingUsers(prev => new Set(prev).add(data.userId));\n              }\n            } else if (data.type === 'user_stop_typing') {\n              // Only remove typing indicator if it's for the current conversation\n              if (data.conversationId === selectedConversationRef.current) {\n                setTypingUsers(prev => {\n                  const next = new Set(prev);\n                  next.delete(data.userId);\n                  return next;\n                });\n              }\n            } else if (data.type === 'messages_read') {\n              // Invalidate regardless of current conversation\n              queryClient.invalidateQueries({ \n                queryKey: [\"/api/messages\", data.conversationId] \n              });\n            }\n          } catch (error) {\n            console.error('WebSocket message parse error:', error);\n          }\n        };\n\n        socket.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          // Only update state if this socket is still current\n          if (socket === wsRef.current) {\n            setIsConnecting(false);\n            setIsConnected(false);\n          }\n        };\n\n        socket.onclose = () => {\n          // Only handle close if this socket is still the current one\n          if (socket === wsRef.current) {\n            setIsConnecting(false);\n            setIsConnected(false);\n            wsRef.current = null;\n            \n            // Only attempt to reconnect if we should and still authenticated\n            if (shouldReconnect) {\n              reconnectTimeoutRef.current = setTimeout(() => {\n                if (shouldReconnect) {\n                  connectWebSocket();\n                }\n              }, 3000);\n            }\n          }\n        };\n      } catch (error) {\n        console.error('WebSocket connection error:', error);\n        setIsConnecting(false);\n        setIsConnected(false);\n      }\n    };\n\n    connectWebSocket();\n\n    // Cleanup function\n    return () => {\n      // Disable reconnection for this effect instance\n      shouldReconnect = false;\n      \n      // Clear any pending reconnect timeout\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n      \n      // Close the socket if it exists\n      if (wsRef.current) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n    };\n  }, [isAuthenticated]); // Only depend on auth, not UI state\n\n  const { data: conversations } = useQuery<any[]>({\n    queryKey: [\"/api/conversations\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: messages = [] } = useQuery<EnhancedMessage[]>({\n    queryKey: [\"/api/messages\", selectedConversation],\n    enabled: !!selectedConversation && isAuthenticated,\n  });\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  // Mark messages as read when conversation is viewed\n  useEffect(() => {\n    if (selectedConversation && isConnected && wsRef.current && user?.id) {\n      wsRef.current.send(JSON.stringify({\n        type: 'mark_read',\n        conversationId: selectedConversation,\n        userId: user.id,\n      }));\n    }\n  }, [selectedConversation, isConnected, user?.id, messages.length]);\n\n  // Handle typing indicators\n  const handleTyping = useCallback(() => {\n    if (!selectedConversation || !wsRef.current || wsRef.current.readyState !== WebSocket.OPEN) return;\n\n    // Send typing start\n    wsRef.current.send(JSON.stringify({\n      type: 'typing_start',\n      conversationId: selectedConversation,\n    }));\n\n    // Clear existing timeout\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n\n    // Set new timeout to send typing stop\n    typingTimeoutRef.current = setTimeout(() => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'typing_stop',\n          conversationId: selectedConversation,\n        }));\n      }\n    }, 3000);\n  }, [selectedConversation]);\n\n  const sendMessage = () => {\n    if (!selectedConversation || !messageText.trim() || !user?.id) return;\n\n    // Clear typing indicator\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'typing_stop',\n        conversationId: selectedConversation,\n      }));\n    }\n\n    // Send via WebSocket if connected\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'chat_message',\n        conversationId: selectedConversation,\n        senderId: user.id,\n        content: messageText,\n      }));\n      setMessageText(\"\");\n    } else {\n      toast({\n        title: \"Connection Error\",\n        description: \"Real-time messaging is not connected. Trying to reconnect...\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleSound = () => {\n    const newValue = !soundEnabled;\n    setSoundEnabled(newValue);\n    localStorage.setItem('messageSoundEnabled', String(newValue));\n    toast({\n      title: newValue ? \"Sound enabled\" : \"Sound disabled\",\n      description: newValue ? \"You'll hear a notification for new messages\" : \"Message sounds are muted\",\n    });\n  };\n\n  const formatMessageDate = (dateString: string) => {\n    const date = new Date(dateString);\n    if (isToday(date)) return format(date, 'h:mm a');\n    if (isYesterday(date)) return `Yesterday ${format(date, 'h:mm a')}`;\n    return format(date, 'MMM d, h:mm a');\n  };\n\n  const formatDateSeparator = (dateString: string) => {\n    const date = new Date(dateString);\n    if (isToday(date)) return 'Today';\n    if (isYesterday(date)) return 'Yesterday';\n    return format(date, 'MMMM d, yyyy');\n  };\n\n  const shouldShowDateSeparator = (currentMessage: EnhancedMessage, previousMessage: EnhancedMessage | null) => {\n    if (!previousMessage) return true;\n    return !isSameDay(new Date(currentMessage.createdAt), new Date(previousMessage.createdAt));\n  };\n\n  const shouldGroupMessage = (currentMessage: EnhancedMessage, previousMessage: EnhancedMessage | null) => {\n    if (!previousMessage) return false;\n    if (currentMessage.senderId !== previousMessage.senderId) return false;\n    \n    const timeDiff = new Date(currentMessage.createdAt).getTime() - new Date(previousMessage.createdAt).getTime();\n    return timeDiff < 60000; // Group if within 1 minute\n  };\n\n  const otherUser = conversations?.find((c: any) => c.id === selectedConversation)?.otherUser;\n  const isOtherUserTyping = typingUsers.size > 0;\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"h-[calc(100vh-8rem)]\">\n      <div className=\"grid md:grid-cols-[320px_1fr] gap-4 h-full\">\n        {/* Conversations List */}\n        <Card className=\"border-card-border\">\n          <CardContent className=\"p-0\">\n            <div className=\"p-4 border-b flex items-center justify-between\">\n              <h2 className=\"font-semibold\">Messages</h2>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleSound}\n                data-testid=\"button-toggle-sound\"\n              >\n                {soundEnabled ? <Bell className=\"h-4 w-4\" /> : <BellOff className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n            <ScrollArea className=\"h-[calc(100vh-12rem)]\">\n              {!conversations || conversations.length === 0 ? (\n                <div className=\"p-12 text-center\">\n                  <MessageSquare className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                  <p className=\"text-sm text-muted-foreground\">No conversations yet</p>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Apply to offers to start messaging companies\n                  </p>\n                </div>\n              ) : (\n                <div className=\"divide-y\">\n                  {conversations.map((conversation: any) => (\n                    <button\n                      key={conversation.id}\n                      onClick={() => setSelectedConversation(conversation.id)}\n                      className={`w-full p-4 text-left hover-elevate ${\n                        selectedConversation === conversation.id ? 'bg-accent' : ''\n                      }`}\n                      data-testid={`conversation-${conversation.id}`}\n                    >\n                      <div className=\"flex gap-3\">\n                        <Avatar>\n                          <AvatarImage src={conversation.otherUser?.profileImageUrl} />\n                          <AvatarFallback>\n                            {conversation.otherUser?.firstName?.[0] || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <div className=\"font-semibold truncate\">\n                              {conversation.otherUser?.firstName || 'User'}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {conversation.lastMessageAt &&\n                                formatMessageDate(conversation.lastMessageAt)}\n                            </div>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground truncate\">\n                            {conversation.offer?.title}\n                          </div>\n                          {conversation.lastMessage && (\n                            <div className=\"text-sm text-muted-foreground truncate mt-1\">\n                              {conversation.lastMessage}\n                            </div>\n                          )}\n                        </div>\n                        {conversation.unreadCount > 0 && (\n                          <Badge variant=\"default\" className=\"h-5 min-w-5 px-1.5\">\n                            {conversation.unreadCount}\n                          </Badge>\n                        )}\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Messages View */}\n        <Card className=\"border-card-border flex flex-col\">\n          {!selectedConversation ? (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <MessageSquare className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">Select a conversation to start messaging</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  All your conversations about affiliate offers appear here\n                </p>\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* Header */}\n              <div className=\"p-4 border-b\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarImage src={otherUser?.profileImageUrl} />\n                      <AvatarFallback>\n                        {otherUser?.firstName?.[0] || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-semibold\">\n                        {otherUser?.firstName || 'Conversation'}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {conversations?.find((c: any) => c.id === selectedConversation)?.offer?.title}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {isConnecting && (\n                      <Badge variant=\"secondary\" className=\"gap-1\">\n                        <Loader2 className=\"h-3 w-3 animate-spin\" />\n                        Connecting\n                      </Badge>\n                    )}\n                    {!isConnecting && !isConnected && (\n                      <Badge variant=\"destructive\" className=\"gap-1\">\n                        <WifiOff className=\"h-3 w-3\" />\n                        Offline\n                      </Badge>\n                    )}\n                    {!isConnecting && isConnected && (\n                      <Badge variant=\"secondary\" className=\"gap-1 bg-green-500/10 text-green-700 dark:text-green-400\">\n                        <div className=\"h-2 w-2 rounded-full bg-green-500\" />\n                        Online\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Messages */}\n              <ScrollArea className=\"flex-1 p-4\">\n                <div className=\"space-y-4\">\n                  {messages?.map((message, index) => {\n                    const previousMessage = index > 0 ? messages[index - 1] : null;\n                    const showDateSeparator = shouldShowDateSeparator(message, previousMessage);\n                    const groupWithPrevious = shouldGroupMessage(message, previousMessage);\n                    const isOwnMessage = message.senderId === user?.id;\n\n                    return (\n                      <div key={message.id}>\n                        {showDateSeparator && (\n                          <div className=\"flex items-center justify-center my-4\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {formatDateSeparator(message.createdAt)}\n                            </Badge>\n                          </div>\n                        )}\n                        <div\n                          className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'} ${\n                            groupWithPrevious ? 'mt-1' : 'mt-4'\n                          }`}\n                        >\n                          <div\n                            className={`max-w-[70%] rounded-lg p-3 ${\n                              isOwnMessage\n                                ? 'bg-primary text-primary-foreground'\n                                : 'bg-muted'\n                            }`}\n                          >\n                            <p className=\"text-sm whitespace-pre-wrap break-words\">{message.content}</p>\n                            <div className=\"flex items-center justify-end gap-1 mt-1\">\n                              <p className=\"text-xs opacity-70\">\n                                {format(new Date(message.createdAt), 'h:mm a')}\n                              </p>\n                              {isOwnMessage && (\n                                <span className=\"opacity-70\">\n                                  {message.isRead ? (\n                                    <CheckCheck className=\"h-3 w-3\" />\n                                  ) : (\n                                    <Check className=\"h-3 w-3\" />\n                                  )}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  \n                  {/* Typing Indicator */}\n                  {isOtherUserTyping && (\n                    <div className=\"flex justify-start\">\n                      <div className=\"bg-muted rounded-lg p-3 max-w-[70%]\">\n                        <div className=\"flex gap-1\">\n                          <div className=\"h-2 w-2 bg-muted-foreground/50 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                          <div className=\"h-2 w-2 bg-muted-foreground/50 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                          <div className=\"h-2 w-2 bg-muted-foreground/50 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div ref={scrollRef} />\n                </div>\n              </ScrollArea>\n\n              {/* Input */}\n              <div className=\"p-4 border-t\">\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"icon\" \n                    data-testid=\"button-attach-image\"\n                    disabled\n                  >\n                    <ImageIcon className=\"h-4 w-4\" />\n                  </Button>\n                  <Input\n                    ref={messageInputRef}\n                    placeholder=\"Type a message...\"\n                    value={messageText}\n                    onChange={(e) => {\n                      setMessageText(e.target.value);\n                      handleTyping();\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        sendMessage();\n                      }\n                    }}\n                    disabled={!isConnected}\n                    data-testid=\"input-message\"\n                  />\n                  <Button\n                    onClick={() => sendMessage()}\n                    disabled={!messageText.trim() || !isConnected}\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                {!isConnected && (\n                  <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                    Reconnecting to chat server...\n                  </p>\n                )}\n              </div>\n            </>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24094},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/analytics.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { DollarSign, TrendingUp, MousePointerClick, Target, Download } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst DATE_RANGES = [\n  { value: \"7d\", label: \"Last 7 Days\" },\n  { value: \"30d\", label: \"Last 30 Days\" },\n  { value: \"90d\", label: \"Last 90 Days\" },\n  { value: \"all\", label: \"All Time\" },\n];\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [dateRange, setDateRange] = useState(\"30d\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: analytics } = useQuery<any>({\n    queryKey: [\"/api/analytics\", { range: dateRange }],\n    queryFn: async () => {\n      const url = `/api/analytics?range=${dateRange}`;\n      const res = await fetch(url, { credentials: 'include' });\n      if (!res.ok) throw new Error('Failed to fetch analytics');\n      return res.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  const chartData = analytics?.chartData || [];\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Analytics Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Track your performance across all offers</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={dateRange} onValueChange={setDateRange}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-date-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {DATE_RANGES.map((range) => (\n                <SelectItem key={range.value} value={range.value}>\n                  {range.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" data-testid=\"button-export\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Earnings</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\">${analytics?.totalEarnings || '0.00'}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              <span className=\"text-green-600\">+12.5%</span> from last period\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Offers</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.activeOffers || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Currently promoting\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Clicks</CardTitle>\n            <MousePointerClick className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.totalClicks || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {analytics?.uniqueClicks || 0} unique visitors\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.conversionRate || '0'}%</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {analytics?.conversions || 0} conversions\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Chart */}\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Clicks Over Time</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {chartData.length > 0 ? (\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis dataKey=\"date\" className=\"text-xs\" />\n                  <YAxis className=\"text-xs\" />\n                  <Tooltip />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"clicks\"\n                    stroke=\"hsl(var(--primary))\"\n                    strokeWidth={2}\n                    dot={{ fill: \"hsl(var(--primary))\", r: 4 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <MousePointerClick className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No tracking data yet</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Your click data will appear here once you start promoting offers</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Per-Offer Breakdown */}\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Performance by Offer</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <TrendingUp className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">No active offers yet</p>\n            <p className=\"text-sm text-muted-foreground mt-1\">Apply to offers to start tracking performance</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7499},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertAndLoadUser(claims: any) {\n  // Upsert user in database\n  const dbUser = await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n  return dbUser;\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user: any = {};\n    updateUserSession(user, tokens);\n    // Load the full user from database including id, role, etc.\n    const dbUser = await upsertAndLoadUser(tokens.claims());\n    // Merge database user into session user\n    Object.assign(user, dbUser);\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser(async (user: any, cb) => {\n    try {\n      // Reload user from database to get fresh role, profile data, etc.\n      if (user.claims?.sub) {\n        const dbUser = await storage.getUser(user.claims.sub);\n        if (dbUser) {\n          // Merge fresh database user into session user\n          Object.assign(user, dbUser);\n        }\n      }\n      cb(null, user);\n    } catch (error) {\n      cb(error);\n    }\n  });\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4838},"client/src/pages/applications.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Copy, ExternalLink, MessageSquare, TrendingUp, FileText, Clock, CheckCircle2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst STATUS_COLORS: Record<string, any> = {\n  pending: { variant: \"secondary\" as const, icon: Clock },\n  approved: { variant: \"default\" as const, icon: CheckCircle2 },\n  active: { variant: \"default\" as const, icon: TrendingUp },\n  completed: { variant: \"secondary\" as const, icon: CheckCircle2 },\n};\n\nexport default function Applications() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"all\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: applications } = useQuery<any[]>({\n    queryKey: [\"/api/applications\"],\n    enabled: isAuthenticated,\n  });\n\n  const copyTrackingLink = (link: string) => {\n    navigator.clipboard.writeText(link);\n    toast({\n      title: \"Copied!\",\n      description: \"Tracking link copied to clipboard\",\n    });\n  };\n\n  const filteredApplications = applications?.filter(app => {\n    if (activeTab === \"all\") return true;\n    return app.status === activeTab;\n  });\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">My Applications</h1>\n        <p className=\"text-muted-foreground mt-1\">Track all your affiliate applications in one place</p>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n            All ({applications?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n            Pending\n          </TabsTrigger>\n          <TabsTrigger value=\"approved\" data-testid=\"tab-approved\">\n            Approved\n          </TabsTrigger>\n          <TabsTrigger value=\"active\" data-testid=\"tab-active\">\n            Active\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"space-y-4 mt-6\">\n          {!filteredApplications || filteredApplications.length === 0 ? (\n            <Card className=\"border-card-border\">\n              <CardContent className=\"p-12 text-center\">\n                <FileText className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-lg mb-2\">No applications yet</h3>\n                <p className=\"text-muted-foreground mb-4\">Start browsing offers and apply to begin earning</p>\n                <Link href=\"/browse\">\n                  <Button data-testid=\"button-browse-offers\">Browse Offers</Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredApplications.map((application: any) => {\n              const StatusIcon = STATUS_COLORS[application.status]?.icon || Clock;\n              \n              return (\n                <Card key={application.id} className=\"border-card-border hover-elevate\" data-testid={`application-${application.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex flex-col md:flex-row gap-6\">\n                      {/* Offer Thumbnail */}\n                      <div className=\"md:w-48 aspect-video bg-muted rounded-lg overflow-hidden flex-shrink-0\">\n                        {application.offer?.featuredImageUrl ? (\n                          <img\n                            src={application.offer.featuredImageUrl}\n                            alt={application.offer.title}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <FileText className=\"h-8 w-8 text-muted-foreground/50\" />\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Application Details */}\n                      <div className=\"flex-1 space-y-4\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-start justify-between gap-3\">\n                          <div className=\"space-y-1\">\n                            <Link href={`/offers/${application.offer?.id}`}>\n                              <h3 className=\"font-semibold text-lg hover:text-primary cursor-pointer\">\n                                {application.offer?.title}\n                              </h3>\n                            </Link>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {application.offer?.company?.tradeName}\n                            </p>\n                          </div>\n                          <Badge {...STATUS_COLORS[application.status]} className=\"gap-1\">\n                            <StatusIcon className=\"h-3 w-3\" />\n                            {application.status}\n                          </Badge>\n                        </div>\n\n                        <div className=\"grid sm:grid-cols-3 gap-4 text-sm\">\n                          <div>\n                            <div className=\"text-muted-foreground\">Applied</div>\n                            <div className=\"font-medium\">\n                              {new Date(application.createdAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"text-muted-foreground\">Commission</div>\n                            <div className=\"font-medium font-mono\">\n                              ${application.offer?.commissionAmount || application.offer?.commissionPercentage + '%'}\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"text-muted-foreground\">Type</div>\n                            <Badge variant=\"secondary\" className=\"mt-1\">\n                              {application.offer?.commissionType?.replace('_', ' ')}\n                            </Badge>\n                          </div>\n                        </div>\n\n                        {application.status === 'approved' && application.trackingLink && (\n                          <div className=\"p-4 bg-muted/50 rounded-lg space-y-2\">\n                            <div className=\"text-sm font-medium\">Your Tracking Link</div>\n                            <div className=\"flex gap-2\">\n                              <code className=\"flex-1 text-sm bg-background px-3 py-2 rounded border overflow-x-auto\">\n                                {application.trackingLink}\n                              </code>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => copyTrackingLink(application.trackingLink)}\n                                data-testid={`button-copy-link-${application.id}`}\n                                className=\"gap-2\"\n                              >\n                                <Copy className=\"h-4 w-4\" />\n                                Copy\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Quick Actions */}\n                        <div className=\"flex flex-wrap gap-2 pt-2\">\n                          {application.trackingLink && (\n                            <Link href={`/analytics/${application.id}`}>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`button-analytics-${application.id}`} className=\"gap-2\">\n                                <TrendingUp className=\"h-4 w-4\" />\n                                View Analytics\n                              </Button>\n                            </Link>\n                          )}\n                          <Link href={`/messages?application=${application.id}`}>\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-message-${application.id}`} className=\"gap-2\">\n                              <MessageSquare className=\"h-4 w-4\" />\n                              Message Company\n                            </Button>\n                          </Link>\n                          <Link href={`/offers/${application.offer?.id}`}>\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-offer-${application.id}`} className=\"gap-2\">\n                              <ExternalLink className=\"h-4 w-4\" />\n                              View Offer\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":9828},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\n// CSS imports temporarily removed due to Vite resolution issues\n// Styles will be added via global CSS if needed\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760,\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName} data-testid=\"button-upload\">\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":1663},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"design_guidelines.md":{"content":"# Affiliate Marketplace App - Design Guidelines\n\n## Design Approach\n\n**Reference-Based Design** drawing inspiration from:\n- **Airbnb** - Marketplace browsing, card layouts, and discovery patterns\n- **Linear** - Clean dashboards, modern typography, and status indicators\n- **Stripe** - Financial interfaces, data visualization, and professional aesthetic\n- **Instagram/TikTok** - Creator-focused elements, video galleries, and social proof\n\n**Design Principles:**\n- Creator empowerment through visual clarity\n- Professional credibility for company profiles\n- Seamless marketplace discovery\n- Data-driven decision making\n\n---\n\n## Color Palette\n\n### Light Mode\n- **Primary Brand**: 210 90% 55% (vibrant blue - trust and professionalism)\n- **Primary Hover**: 210 90% 50%\n- **Secondary**: 200 90% 50% (energetic cyan - action and opportunity)\n- **Background**: 0 0% 100%\n- **Surface**: 240 10% 98%\n- **Border**: 240 6% 90%\n- **Text Primary**: 240 10% 10%\n- **Text Secondary**: 240 5% 45%\n- **Success**: 142 76% 45% (earnings, approvals)\n- **Warning**: 38 92% 55% (pending actions)\n- **Error**: 0 84% 60%\n\n### Dark Mode\n- **Primary Brand**: 210 90% 60%\n- **Primary Hover**: 210 90% 65%\n- **Secondary**: 200 90% 55%\n- **Background**: 240 10% 10%\n- **Surface**: 240 8% 14%\n- **Border**: 240 6% 20%\n- **Text Primary**: 0 0% 98%\n- **Text Secondary**: 240 5% 65%\n\n---\n\n## Typography\n\n**Font Families:**\n- **Primary**: Inter (via Google Fonts) - UI elements, body text, data\n- **Display**: Cal Sans (or Sora) - Hero headlines, marketing sections\n- **Mono**: JetBrains Mono - Tracking codes, analytics numbers\n\n**Scale:**\n- Display XL: 72px / 900 weight (landing heroes)\n- Display L: 48px / 800 weight (page titles)\n- Heading 1: 36px / 700 weight (section headers)\n- Heading 2: 28px / 600 weight (card titles)\n- Heading 3: 20px / 600 weight (subsections)\n- Body Large: 18px / 500 weight (important text)\n- Body: 16px / 400 weight (standard)\n- Body Small: 14px / 400 weight (metadata)\n- Caption: 12px / 500 weight (labels, badges)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 1, 2, 4, 6, 8, 12, 16, 20, 24 for consistent rhythm\n\n**Container Widths:**\n- Marketing pages: max-w-7xl (1280px)\n- App dashboards: max-w-screen-2xl with sidebar\n- Content sections: max-w-6xl\n- Forms: max-w-2xl\n- Modals: max-w-4xl\n\n**Grid Systems:**\n- Offer cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\n- Analytics: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n- Video gallery: grid-cols-2 md:grid-cols-3 lg:grid-cols-4\n\n---\n\n## Core Components\n\n### Navigation\n**Desktop**: Fixed top navbar with logo left, main nav center (Browse, Dashboard, Messages, Analytics), user menu right with avatar and dropdown\n**Mobile**: Bottom tab bar (Home, Browse, Messages, Profile) with FAB for quick apply\n\n### Offer Cards\n- 16:9 thumbnail with gradient overlay at bottom\n- Company logo badge (40px circle) positioned bottom-left over image\n- Category badge top-right (colored by niche)\n- Title (2 lines max, truncate)\n- Company name with verified checkmark\n- Commission amount in large, bold text\n- Commission type tag (Sale/Lead/Retainer)\n- Heart icon for favorites (top-right, subtle)\n- Hover: Lift with shadow elevation, scale 1.02\n\n### Status Badges\n- Pending: Warning color, pulsing dot animation\n- Approved: Success color, checkmark icon\n- Active: Secondary color, activity indicator\n- Completed: Neutral gray, archive icon\n- Pills with 6px border radius, 10px padding\n\n### Video Player\nCustom player with:\n- Thumbnail preview with play button overlay (large 80px circle)\n- Progress bar (accent color)\n- Minimal controls (play/pause, volume, fullscreen)\n- Video count indicator (e.g., \"Video 3 of 12\")\n- Creator credit overlay (bottom-left, small text)\n\n### Analytics Cards\n- White/dark surface with subtle border\n- Icon + metric title (small caps)\n- Large number display (mono font, 36px)\n- Percentage change with up/down arrow and color coding\n- Sparkline graph (optional for trends)\n- Grid layout with equal heights\n\n### Application Flow Modal\n- Multi-step progress indicator at top (dots or steps)\n- Large, clear step titles\n- Form fields with floating labels\n- Sticky action buttons at bottom\n- Success state with confetti animation\n- 600px width, centered\n\n### Messaging Interface\nSplit view (desktop):\n- Left: Conversation list (320px fixed, scrollable)\n- Right: Active conversation with chat bubbles\n- Creator messages: left-aligned, surface color\n- Company messages: right-aligned, primary color\n- Timestamp below each message\n- Typing indicator (animated dots)\n- Sticky input field with attachment button\n\n### Review & Rating\n- Star rating (interactive, 40px stars)\n- Category ratings (horizontal bars with labels)\n- Text area with character counter\n- Example reviews carousel below\n- Average rating display with breakdown graph\n\n---\n\n## Page-Specific Treatments\n\n### Landing Page\n**Hero**: Full viewport (90vh) with split design\n- Left 50%: Bold headline \"Turn Your Influence Into Income\", subheading, dual CTAs (primary \"Browse Offers\", secondary \"List Your Brand\")\n- Right 50%: Animated illustration or large hero image showing creators and brands connecting\n\n**Features**: 3-column grid showcasing creator benefits, company benefits, platform features with icons and short descriptions\n\n**Stats Section**: Full-width with 4 columns of animated counting numbers (e.g., \"10K+ Creators\", \"$5M+ Earned\", \"500+ Brands\", \"95% Approval Rate\")\n\n**How It Works**: 3-step process with large numbered circles, illustrations, and descriptions for both creators and companies\n\n**Video Showcase**: Grid of example success stories with video previews\n\n### Creator Dashboard\n**Overview Section**: 4-metric card grid (Total Earnings, Active Offers, Pending Applications, Messages)\n**Quick Actions**: Horizontal scrollable pills (Browse New Offers, View Analytics, Check Messages)\n**Recommended Offers**: 3-4 cards with \"Why recommended\" tag\n**Recent Activity**: Timeline view of application updates\n\n### Offer Detail Page\n**Hero**: 16:9 featured image/video with play overlay, breadcrumb navigation above\n**Tabbed Interface**: Sticky tab bar (Overview, Videos, Requirements, Reviews)\n**Videos Tab**: 4-column grid of video thumbnails with play button overlays, click to open full-screen player with navigation\n**Overview**: Two-column layout - left has description, right has key info cards (commission, payment terms, requirements summary)\n**Sticky CTA Bar**: Fixed bottom bar with \"Apply Now\" button, favorite heart, share button\n\n### My Applications\n**Filter Bar**: Sticky top bar with status filters (All, Pending, Approved, Active, Completed)\n**List View**: Cards with offer thumbnail left, details center, status badge and actions right\n**Quick Actions**: Copy tracking link button, view analytics, message company icons\n**Empty State**: Illustration with \"No applications yet\" message and CTA to browse offers\n\n### Company Dashboard\n**Performance Overview**: Large metrics with graphs showing application volume, approval rate, creator engagement\n**Active Offers**: Table view with sortable columns (Name, Applications, Status, Performance)\n**Quick Create**: Prominent \"Create New Offer\" button with icon\n\n### Admin Approval Queue\n**Split View**: Pending items left (list), detail panel right\n**Approval Controls**: Clear approve/reject buttons with reason textarea for rejections\n**Document Viewer**: Inline PDF/image viewer for verification documents\n\n---\n\n## Image Strategy\n\n**Required Images:**\n1. **Landing Hero**: High-quality lifestyle image showing diverse creators (photographers, videographers, influencers) with professional equipment - warm, authentic, aspirational (1920x1080)\n2. **Offer Thumbnails**: Product/service images from companies (16:9 ratio)\n3. **Company Logos**: Professional brand marks (square, 512x512)\n4. **Creator Avatars**: Profile photos (circular, 200x200)\n5. **Example Videos**: 6-12 short-form video files showcasing product promotions\n6. **Empty States**: Friendly illustrations for \"No applications\", \"No messages\", \"No favorites\" states\n7. **Success Illustrations**: Celebration graphics for approved applications, completed campaigns\n\nUse CDN-hosted placeholder services (Unsplash API, placeholder.com) for demo content.\n\n---\n\n## Animations\n\nUse sparingly for meaningful interactions:\n- Page transitions: Fade + slight vertical slide (200ms)\n- Card hovers: Scale 1.02 with shadow elevation (150ms ease-out)\n- Button clicks: Scale 0.98 (100ms)\n- Status changes: Color fade transition (300ms)\n- Modal entry: Fade + scale from 0.95 (250ms)\n- Success states: Confetti burst (one-time, 2s)\n- Loading states: Skeleton screens with shimmer effect\n\n**No autoplay carousels or distracting motion** - maintain professional focus.","size_bytes":8757},"client/src/pages/favorites.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, Star, Play } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Favorites() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: favorites } = useQuery<any[]>({\n    queryKey: [\"/api/favorites\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">Favorite Offers</h1>\n        <p className=\"text-muted-foreground mt-1\">Your saved offers for later</p>\n      </div>\n\n      {/* Favorites Grid */}\n      {!favorites || favorites.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"p-12 text-center\">\n            <Heart className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n            <h3 className=\"font-semibold text-lg mb-2\">No favorites yet</h3>\n            <p className=\"text-muted-foreground\">Save offers by clicking the heart icon</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {favorites.map((favorite: any) => {\n            const offer = favorite.offer;\n            return (\n              <Link key={favorite.id} href={`/offers/${offer.id}`}>\n                <Card className=\"hover-elevate cursor-pointer border-card-border h-full\" data-testid={`favorite-${offer.id}`}>\n                  <div className=\"aspect-video relative bg-muted rounded-t-lg overflow-hidden\">\n                    {offer.featuredImageUrl ? (\n                      <img src={offer.featuredImageUrl} alt={offer.title} className=\"w-full h-full object-cover\" />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center\">\n                        <Play className=\"h-12 w-12 text-muted-foreground/50\" />\n                      </div>\n                    )}\n                    {offer.isPriority && (\n                      <Badge className=\"absolute top-2 right-2 bg-primary\">\n                        Featured\n                      </Badge>\n                    )}\n                  </div>\n\n                  <CardContent className=\"p-4 space-y-3\">\n                    <h3 className=\"font-semibold line-clamp-1\">{offer.title}</h3>\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">{offer.shortDescription}</p>\n\n                    <div className=\"flex flex-wrap gap-1\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">{offer.primaryNiche}</Badge>\n                    </div>\n\n                    <div className=\"flex items-center justify-between pt-2 border-t\">\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                        <Star className=\"h-3 w-3 fill-primary text-primary\" />\n                        <span>{offer.company?.averageRating?.toFixed(1) || '5.0'}</span>\n                      </div>\n                      <div className=\"font-mono font-semibold text-primary\">\n                        ${offer.commissionAmount || offer.commissionPercentage + '%'}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4142},"client/src/pages/payment-settings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { DollarSign, Plus, Trash2 } from \"lucide-react\";\n\nexport default function PaymentSettings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [payoutMethod, setPayoutMethod] = useState(\"etransfer\");\n  const [payoutEmail, setPayoutEmail] = useState(\"\");\n  const [bankRoutingNumber, setBankRoutingNumber] = useState(\"\");\n  const [bankAccountNumber, setBankAccountNumber] = useState(\"\");\n  const [paypalEmail, setPaypalEmail] = useState(\"\");\n  const [cryptoWalletAddress, setCryptoWalletAddress] = useState(\"\");\n  const [cryptoNetwork, setCryptoNetwork] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: paymentMethods } = useQuery<any[]>({\n    queryKey: [\"/api/payment-settings\"],\n    enabled: isAuthenticated,\n  });\n\n  const addPaymentMethodMutation = useMutation({\n    mutationFn: async () => {\n      const payload: any = {\n        payoutMethod,\n      };\n\n      if (payoutMethod === 'etransfer') {\n        payload.payoutEmail = payoutEmail;\n      } else if (payoutMethod === 'wire') {\n        payload.bankRoutingNumber = bankRoutingNumber;\n        payload.bankAccountNumber = bankAccountNumber;\n      } else if (payoutMethod === 'paypal') {\n        payload.paypalEmail = paypalEmail;\n      } else if (payoutMethod === 'crypto') {\n        payload.cryptoWalletAddress = cryptoWalletAddress;\n        payload.cryptoNetwork = cryptoNetwork;\n      }\n\n      return await apiRequest(\"POST\", \"/api/payment-settings\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Payment method added successfully\",\n      });\n      setPayoutEmail(\"\");\n      setBankRoutingNumber(\"\");\n      setBankAccountNumber(\"\");\n      setPaypalEmail(\"\");\n      setCryptoWalletAddress(\"\");\n      setCryptoNetwork(\"\");\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add payment method\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-6 max-w-2xl\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Payment Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">Configure how you receive payments</p>\n      </div>\n\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Saved Payment Methods</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {!paymentMethods || paymentMethods.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <DollarSign className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No payment methods yet</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Add a payment method to receive payouts</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {paymentMethods.map((method: any) => (\n                <Card key={method.id} className=\"border-card-border\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <DollarSign className=\"h-5 w-5 text-muted-foreground\" />\n                        <div>\n                          <div className=\"font-medium capitalize\">{method.payoutMethod.replace('_', ' ')}</div>\n                          <div className=\"text-sm text-muted-foreground\">{method.payoutEmail}</div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {method.isDefault && <Badge>Default</Badge>}\n                        <Button variant=\"ghost\" size=\"icon\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Add Payment Method</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"method\">Payout Method</Label>\n            <Select value={payoutMethod} onValueChange={setPayoutMethod}>\n              <SelectTrigger id=\"method\" data-testid=\"select-payout-method\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"etransfer\">E-Transfer</SelectItem>\n                <SelectItem value=\"wire\">Wire/ACH</SelectItem>\n                <SelectItem value=\"paypal\">PayPal</SelectItem>\n                <SelectItem value=\"crypto\">Cryptocurrency</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* E-Transfer Fields */}\n          {payoutMethod === 'etransfer' && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                value={payoutEmail}\n                onChange={(e) => setPayoutEmail(e.target.value)}\n                data-testid=\"input-payout-email\"\n              />\n            </div>\n          )}\n\n          {/* Wire/ACH Fields */}\n          {payoutMethod === 'wire' && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"routing\">Bank Routing Number</Label>\n                <Input\n                  id=\"routing\"\n                  placeholder=\"123456789\"\n                  value={bankRoutingNumber}\n                  onChange={(e) => setBankRoutingNumber(e.target.value)}\n                  data-testid=\"input-routing-number\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"account\">Bank Account Number</Label>\n                <Input\n                  id=\"account\"\n                  placeholder=\"123456789012\"\n                  value={bankAccountNumber}\n                  onChange={(e) => setBankAccountNumber(e.target.value)}\n                  data-testid=\"input-account-number\"\n                />\n              </div>\n            </>\n          )}\n\n          {/* PayPal Fields */}\n          {payoutMethod === 'paypal' && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"paypal-email\">PayPal Email</Label>\n              <Input\n                id=\"paypal-email\"\n                type=\"email\"\n                placeholder=\"your@paypal.com\"\n                value={paypalEmail}\n                onChange={(e) => setPaypalEmail(e.target.value)}\n                data-testid=\"input-paypal-email\"\n              />\n            </div>\n          )}\n\n          {/* Crypto Fields */}\n          {payoutMethod === 'crypto' && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"wallet\">Wallet Address</Label>\n                <Input\n                  id=\"wallet\"\n                  placeholder=\"0x...\"\n                  value={cryptoWalletAddress}\n                  onChange={(e) => setCryptoWalletAddress(e.target.value)}\n                  data-testid=\"input-crypto-wallet\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"network\">Network</Label>\n                <Select value={cryptoNetwork} onValueChange={setCryptoNetwork}>\n                  <SelectTrigger id=\"network\" data-testid=\"select-crypto-network\">\n                    <SelectValue placeholder=\"Select network\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"ethereum\">Ethereum (ERC-20)</SelectItem>\n                    <SelectItem value=\"bsc\">Binance Smart Chain (BEP-20)</SelectItem>\n                    <SelectItem value=\"polygon\">Polygon (MATIC)</SelectItem>\n                    <SelectItem value=\"bitcoin\">Bitcoin</SelectItem>\n                    <SelectItem value=\"tron\">Tron (TRC-20)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </>\n          )}\n\n          <Button\n            onClick={() => addPaymentMethodMutation.mutate()}\n            disabled={\n              addPaymentMethodMutation.isPending ||\n              (payoutMethod === 'etransfer' && !payoutEmail) ||\n              (payoutMethod === 'wire' && (!bankRoutingNumber || !bankAccountNumber)) ||\n              (payoutMethod === 'paypal' && !paypalEmail) ||\n              (payoutMethod === 'crypto' && (!cryptoWalletAddress || !cryptoNetwork))\n            }\n            className=\"gap-2\"\n            data-testid=\"button-add-payment\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            {addPaymentMethodMutation.isPending ? \"Adding...\" : \"Add Payment Method\"}\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10570},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/company-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, FileText, TrendingUp, DollarSign, Plus, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function CompanyDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats } = useQuery<any>({\n    queryKey: [\"/api/company/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: applications = [], isLoading: loadingApplications } = useQuery<any[]>({\n    queryKey: [\"/api/company/applications\"],\n    enabled: isAuthenticated,\n  });\n\n  const completeApplicationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      return await apiRequest('POST', `/api/applications/${applicationId}/complete`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/company/applications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/company/stats\"] });\n      toast({\n        title: \"Work Approved\",\n        description: \"Creator work has been marked as complete.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to mark work as complete\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkComplete = (applicationId: string, creatorName: string) => {\n    if (confirm(`Mark work as complete for ${creatorName}? This action cannot be undone.`)) {\n      completeApplicationMutation.mutate(applicationId);\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Company Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">Manage your offers and track creator performance</p>\n        </div>\n        <Link href=\"/company/offers/create\">\n          <Button className=\"gap-2\" data-testid=\"button-create-offer\">\n            <Plus className=\"h-4 w-4\" />\n            Create New Offer\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Creators</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.activeCreators || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {stats?.pendingApplications || 0} pending applications\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Live Offers</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.liveOffers || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {stats?.draftOffers || 0} drafts\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Applications</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalApplications || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">All time</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Clicks</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalClicks || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {stats?.conversions || 0} conversions\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {stats?.companyProfile?.status === 'pending' && (\n        <Card className=\"border-card-border bg-muted/50\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start gap-4\">\n              <div className=\"flex-1\">\n                <h3 className=\"font-semibold mb-2\">Company Approval Pending</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your company registration is under review. You'll be able to create offers once approved.\n                </p>\n              </div>\n              <Badge variant=\"secondary\">Pending</Badge>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0\">\n            <CardTitle>Recent Applications</CardTitle>\n            <Badge variant=\"secondary\" data-testid=\"badge-applications-count\">{applications.length}</Badge>\n          </CardHeader>\n          <CardContent>\n            {loadingApplications ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-pulse text-sm text-muted-foreground\">Loading applications...</div>\n              </div>\n            ) : applications.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileText className=\"h-8 w-8 text-muted-foreground/50 mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">No applications yet</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {applications.slice(0, 5).map((app: any) => (\n                  <div key={app.id} className=\"flex items-start justify-between gap-4 p-3 rounded-md border border-border hover-elevate\" data-testid={`application-${app.id}`}>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 flex-wrap mb-1\">\n                        <h4 className=\"font-medium text-sm truncate\" data-testid={`text-creator-${app.id}`}>{app.creatorName}</h4>\n                        <Badge \n                          variant={\n                            app.status === 'completed' ? 'default' : \n                            app.status === 'approved' || app.status === 'active' ? 'secondary' : \n                            'outline'\n                          }\n                          data-testid={`badge-status-${app.id}`}\n                        >\n                          {app.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground truncate\" data-testid={`text-offer-${app.id}`}>{app.offerTitle}</p>\n                      <p className=\"text-xs text-tertiary-foreground mt-1\">\n                        {formatDistanceToNow(new Date(app.createdAt), { addSuffix: true })}\n                      </p>\n                    </div>\n                    {(app.status === 'approved' || app.status === 'active') && (\n                      <Button \n                        size=\"sm\" \n                        onClick={() => handleMarkComplete(app.id, app.creatorName)}\n                        disabled={completeApplicationMutation.isPending}\n                        className=\"gap-1\"\n                        data-testid={`button-complete-${app.id}`}\n                      >\n                        <CheckCircle className=\"h-3 w-3\" />\n                        Complete\n                      </Button>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader>\n            <CardTitle>Top Performing Creators</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8\">\n              <Users className=\"h-8 w-8 text-muted-foreground/50 mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">No creators yet</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9626},"client/src/pages/browse.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { Search, SlidersHorizontal, TrendingUp, DollarSign, Clock, Star, Play, Heart } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst NICHES = [\n  \"Technology\", \"Fashion\", \"Beauty\", \"Fitness\", \"Gaming\", \n  \"Travel\", \"Food\", \"Lifestyle\", \"Business\", \"Education\"\n];\n\nconst COMMISSION_TYPES = [\n  { value: \"per_sale\", label: \"Per Sale\" },\n  { value: \"per_lead\", label: \"Per Lead\" },\n  { value: \"per_click\", label: \"Per Click\" },\n  { value: \"monthly_retainer\", label: \"Monthly Retainer\" },\n  { value: \"hybrid\", label: \"Hybrid\" },\n];\n\nexport default function Browse() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedNiches, setSelectedNiches] = useState<string[]>([]);\n  const [commissionType, setCommissionType] = useState<string>(\"\");\n  const [commissionRange, setCommissionRange] = useState([0, 10000]);\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: offers, isLoading: offersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/offers\", { search: searchTerm, niches: selectedNiches, commissionType, sortBy }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchTerm) params.append('search', searchTerm);\n      if (selectedNiches.length > 0) params.append('niches', selectedNiches.join(','));\n      if (commissionType) params.append('commissionType', commissionType);\n      if (sortBy) params.append('sortBy', sortBy);\n      \n      const url = `/api/offers${params.toString() ? '?' + params.toString() : ''}`;\n      const res = await fetch(url, { credentials: 'include' });\n      if (!res.ok) throw new Error('Failed to fetch offers');\n      return res.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  const toggleNiche = (niche: string) => {\n    setSelectedNiches(prev =>\n      prev.includes(niche) ? prev.filter(n => n !== niche) : [...prev, niche]\n    );\n  };\n\n  const clearFilters = () => {\n    setSelectedNiches([]);\n    setCommissionType(\"\");\n    setCommissionRange([0, 10000]);\n    setSearchTerm(\"\");\n  };\n\n  const { data: favorites = [] } = useQuery<any[]>({\n    queryKey: [\"/api/favorites\"],\n    enabled: isAuthenticated,\n  });\n\n  const favoriteMutation = useMutation({\n    mutationFn: async ({ offerId, isFav }: { offerId: string; isFav: boolean }) => {\n      if (isFav) {\n        await apiRequest(\"DELETE\", `/api/favorites/${offerId}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/favorites\", { offerId });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/favorites\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update favorites\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFavoriteToggle = (e: React.MouseEvent, offerId: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const isFav = favorites.some(f => f.offerId === offerId);\n    favoriteMutation.mutate({ offerId, isFav });\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">Browse Offers</h1>\n        <p className=\"text-muted-foreground mt-1\">Discover exclusive affiliate opportunities from verified brands</p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search offers...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search\"\n          />\n        </div>\n\n        <Select value={sortBy} onValueChange={setSortBy}>\n          <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-sort\">\n            <SelectValue placeholder=\"Sort by\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"newest\">Newest First</SelectItem>\n            <SelectItem value=\"highest_commission\">Highest Commission</SelectItem>\n            <SelectItem value=\"most_popular\">Most Popular</SelectItem>\n            <SelectItem value=\"trending\">Trending</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Sheet>\n          <SheetTrigger asChild>\n            <Button variant=\"outline\" data-testid=\"button-filters\" className=\"gap-2\">\n              <SlidersHorizontal className=\"h-4 w-4\" />\n              Filters\n              {(selectedNiches.length > 0 || commissionType) && (\n                <Badge variant=\"secondary\" className=\"ml-1\">\n                  {selectedNiches.length + (commissionType ? 1 : 0)}\n                </Badge>\n              )}\n            </Button>\n          </SheetTrigger>\n          <SheetContent>\n            <SheetHeader>\n              <SheetTitle>Filter Offers</SheetTitle>\n              <SheetDescription>Refine your search with advanced filters</SheetDescription>\n            </SheetHeader>\n\n            <div className=\"space-y-6 mt-6\">\n              {/* Niche Filter */}\n              <div className=\"space-y-3\">\n                <Label>Niche/Category</Label>\n                <div className=\"space-y-2\">\n                  {NICHES.map((niche) => (\n                    <div key={niche} className=\"flex items-center gap-2\">\n                      <Checkbox\n                        id={`niche-${niche}`}\n                        checked={selectedNiches.includes(niche)}\n                        onCheckedChange={() => toggleNiche(niche)}\n                        data-testid={`checkbox-niche-${niche}`}\n                      />\n                      <Label\n                        htmlFor={`niche-${niche}`}\n                        className=\"text-sm font-normal cursor-pointer\"\n                      >\n                        {niche}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Commission Type */}\n              <div className=\"space-y-3\">\n                <Label>Commission Type</Label>\n                <Select value={commissionType} onValueChange={setCommissionType}>\n                  <SelectTrigger data-testid=\"select-commission-type\">\n                    <SelectValue placeholder=\"All types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All types</SelectItem>\n                    {COMMISSION_TYPES.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Commission Range */}\n              <div className=\"space-y-3\">\n                <Label>Commission Range</Label>\n                <div className=\"px-2 py-4\">\n                  <Slider\n                    value={commissionRange}\n                    onValueChange={setCommissionRange}\n                    max={10000}\n                    step={100}\n                    data-testid=\"slider-commission\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <span>${commissionRange[0]}</span>\n                  <span>${commissionRange[1]}</span>\n                </div>\n              </div>\n\n              <div className=\"pt-4 flex gap-3\">\n                <Button onClick={clearFilters} variant=\"outline\" className=\"flex-1\" data-testid=\"button-clear-filters\">\n                  Clear All\n                </Button>\n              </div>\n            </div>\n          </SheetContent>\n        </Sheet>\n      </div>\n\n      {/* Offers Grid */}\n      {offersLoading ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4, 5, 6, 7, 8].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"aspect-video bg-muted rounded-t-lg\" />\n              <CardContent className=\"p-4 space-y-3\">\n                <div className=\"h-4 bg-muted rounded\" />\n                <div className=\"h-3 bg-muted rounded w-2/3\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : !offers || offers.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"p-12 text-center\">\n            <TrendingUp className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n            <h3 className=\"font-semibold text-lg mb-2\">No offers found</h3>\n            <p className=\"text-muted-foreground\">Try adjusting your filters or search terms</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {offers.map((offer) => {\n            const isFavorite = favorites.some(f => f.offerId === offer.id);\n            return (\n              <Link key={offer.id} href={`/offers/${offer.id}`}>\n                <Card className=\"hover-elevate cursor-pointer border-card-border h-full\" data-testid={`card-offer-${offer.id}`}>\n                  <div className=\"aspect-video relative bg-muted rounded-t-lg overflow-hidden\">\n                    {offer.featuredImageUrl ? (\n                      <img src={offer.featuredImageUrl} alt={offer.title} className=\"w-full h-full object-cover\" />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center\">\n                        <Play className=\"h-12 w-12 text-muted-foreground/50\" />\n                      </div>\n                    )}\n                    {offer.isPriority && (\n                      <Badge className=\"absolute top-2 right-2 bg-primary\">\n                        Featured\n                      </Badge>\n                    )}\n                    <button\n                      className=\"absolute top-2 left-2 h-8 w-8 rounded-full bg-background/80 backdrop-blur flex items-center justify-center hover-elevate\"\n                      onClick={(e) => handleFavoriteToggle(e, offer.id)}\n                      data-testid={`button-favorite-${offer.id}`}\n                    >\n                      <Heart className={`h-4 w-4 ${isFavorite ? 'fill-primary text-primary' : ''}`} />\n                    </button>\n                  </div>\n\n                <CardContent className=\"p-4 space-y-3\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <h3 className=\"font-semibold line-clamp-1 flex-1\">{offer.title}</h3>\n                    {offer.company?.logoUrl && (\n                      <img src={offer.company.logoUrl} alt={offer.company.tradeName} className=\"h-8 w-8 rounded-full object-cover\" />\n                    )}\n                  </div>\n\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">{offer.shortDescription}</p>\n\n                  <div className=\"flex flex-wrap gap-1\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">{offer.primaryNiche}</Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between pt-2 border-t\">\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                      <Star className=\"h-3 w-3 fill-primary text-primary\" />\n                      <span>{offer.company?.averageRating?.toFixed(1) || '5.0'}</span>\n                    </div>\n                    <div className=\"font-mono font-semibold text-primary\">\n                      ${offer.commissionAmount || offer.commissionPercentage + '%'}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":13313},"client/src/pages/offer-detail.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Heart, Star, Play, CheckCircle2, DollarSign, Clock, MapPin, Users } from \"lucide-react\";\n\nexport default function OfferDetail() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, params] = useRoute(\"/offers/:id\");\n  const offerId = params?.id;\n\n  const [showApplyDialog, setShowApplyDialog] = useState(false);\n  const [applicationMessage, setApplicationMessage] = useState(\"\");\n  const [preferredCommission, setPreferredCommission] = useState(\"\");\n  const [termsAccepted, setTermsAccepted] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState<any>(null);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: offer, isLoading: offerLoading } = useQuery<any>({\n    queryKey: [\"/api/offers\", offerId],\n    enabled: !!offerId && isAuthenticated,\n  });\n\n  const { data: isFavorite } = useQuery<boolean>({\n    queryKey: [\"/api/favorites\", offerId],\n    enabled: !!offerId && isAuthenticated,\n  });\n\n  const favoriteMutation = useMutation({\n    mutationFn: async () => {\n      if (isFavorite) {\n        await apiRequest(\"DELETE\", `/api/favorites/${offerId}`);\n      } else {\n        await apiRequest(\"POST\", \"/api/favorites\", { offerId });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/favorites\", offerId] });\n      toast({\n        title: isFavorite ? \"Removed from favorites\" : \"Added to favorites\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update favorites\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const applyMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/applications\", {\n        offerId,\n        message: applicationMessage,\n        preferredCommission,\n      });\n    },\n    onSuccess: () => {\n      setShowApplyDialog(false);\n      toast({\n        title: \"Application Submitted!\",\n        description: \"You'll hear back within 4 hours. Check My Applications for updates.\",\n      });\n      setApplicationMessage(\"\");\n      setPreferredCommission(\"\");\n      setTermsAccepted(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || offerLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  if (!offer) {\n    return <div className=\"text-center py-12\">\n      <p className=\"text-muted-foreground\">Offer not found</p>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-6 pb-20\">\n      {/* Hero Image */}\n      <div className=\"aspect-[21/9] relative bg-muted rounded-lg overflow-hidden\">\n        {offer.featuredImageUrl ? (\n          <img src={offer.featuredImageUrl} alt={offer.title} className=\"w-full h-full object-cover\" />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center\">\n            <Play className=\"h-20 w-20 text-muted-foreground/50\" />\n          </div>\n        )}\n        {offer.isPriority && (\n          <Badge className=\"absolute top-4 right-4 bg-primary text-lg px-4 py-2\">\n            Featured\n          </Badge>\n        )}\n      </div>\n\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between gap-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-3\">\n            {offer.company?.logoUrl && (\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={offer.company.logoUrl} alt={offer.company.tradeName} />\n                <AvatarFallback>{offer.company.tradeName?.[0]}</AvatarFallback>\n              </Avatar>\n            )}\n            <div>\n              <h1 className=\"text-3xl font-bold\">{offer.title}</h1>\n              <p className=\"text-muted-foreground\">{offer.company?.tradeName}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => favoriteMutation.mutate()}\n            data-testid=\"button-favorite\"\n            className=\"h-10 w-10\"\n          >\n            <Heart className={`h-5 w-5 ${isFavorite ? 'fill-primary text-primary' : ''}`} />\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"videos\" data-testid=\"tab-videos\">Videos ({offer.videos?.length || 0})</TabsTrigger>\n          <TabsTrigger value=\"requirements\" data-testid=\"tab-requirements\">Requirements</TabsTrigger>\n          <TabsTrigger value=\"reviews\" data-testid=\"tab-reviews\">Reviews</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle>About This Offer</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">{offer.fullDescription}</p>\n              \n              <div className=\"grid sm:grid-cols-2 gap-4 pt-4 border-t\">\n                <div className=\"space-y-1\">\n                  <div className=\"text-sm text-muted-foreground\">Commission</div>\n                  <div className=\"text-2xl font-bold font-mono text-primary\">\n                    ${offer.commissionAmount || offer.commissionPercentage + '%'}\n                  </div>\n                </div>\n                <div className=\"space-y-1\">\n                  <div className=\"text-sm text-muted-foreground\">Commission Type</div>\n                  <Badge>{offer.commissionType.replace('_', ' ')}</Badge>\n                </div>\n                {offer.paymentSchedule && (\n                  <div className=\"space-y-1\">\n                    <div className=\"text-sm text-muted-foreground\">Payment Schedule</div>\n                    <div className=\"font-semibold\">{offer.paymentSchedule}</div>\n                  </div>\n                )}\n                {offer.minimumPayout && (\n                  <div className=\"space-y-1\">\n                    <div className=\"text-sm text-muted-foreground\">Minimum Payout</div>\n                    <div className=\"font-semibold font-mono\">${offer.minimumPayout}</div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"videos\" className=\"space-y-6\">\n          {!offer.videos || offer.videos.length === 0 ? (\n            <Card className=\"border-card-border\">\n              <CardContent className=\"p-12 text-center\">\n                <Play className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No example videos available</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {offer.videos.map((video: any) => (\n                <Card\n                  key={video.id}\n                  className=\"hover-elevate cursor-pointer border-card-border\"\n                  onClick={() => setSelectedVideo(video)}\n                  data-testid={`video-${video.id}`}\n                >\n                  <div className=\"aspect-video relative bg-muted rounded-t-lg overflow-hidden\">\n                    {video.thumbnailUrl ? (\n                      <img src={video.thumbnailUrl} alt={video.title} className=\"w-full h-full object-cover\" />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center\">\n                        <Play className=\"h-8 w-8 text-muted-foreground/50\" />\n                      </div>\n                    )}\n                    <div className=\"absolute inset-0 bg-black/20 flex items-center justify-center\">\n                      <Play className=\"h-12 w-12 text-white\" />\n                    </div>\n                  </div>\n                  <CardContent className=\"p-3\">\n                    <h4 className=\"font-semibold text-sm line-clamp-1\">{video.title}</h4>\n                    {video.creatorCredit && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">by {video.creatorCredit}</p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"requirements\" className=\"space-y-6\">\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle>Creator Requirements</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {offer.minimumFollowers && (\n                <div className=\"flex items-start gap-3\">\n                  <Users className=\"h-5 w-5 text-muted-foreground mt-0.5\" />\n                  <div>\n                    <div className=\"font-semibold\">Minimum Followers</div>\n                    <div className=\"text-muted-foreground\">{offer.minimumFollowers.toLocaleString()}</div>\n                  </div>\n                </div>\n              )}\n              {offer.allowedPlatforms && offer.allowedPlatforms.length > 0 && (\n                <div className=\"flex items-start gap-3\">\n                  <CheckCircle2 className=\"h-5 w-5 text-muted-foreground mt-0.5\" />\n                  <div>\n                    <div className=\"font-semibold\">Allowed Platforms</div>\n                    <div className=\"flex gap-2 mt-1 flex-wrap\">\n                      {offer.allowedPlatforms.map((platform: string) => (\n                        <Badge key={platform} variant=\"secondary\">{platform}</Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n              {offer.geographicRestrictions && offer.geographicRestrictions.length > 0 && (\n                <div className=\"flex items-start gap-3\">\n                  <MapPin className=\"h-5 w-5 text-muted-foreground mt-0.5\" />\n                  <div>\n                    <div className=\"font-semibold\">Geographic Restrictions</div>\n                    <div className=\"text-muted-foreground\">{offer.geographicRestrictions.join(', ')}</div>\n                  </div>\n                </div>\n              )}\n              {offer.contentStyleRequirements && (\n                <div className=\"pt-4 border-t\">\n                  <div className=\"font-semibold mb-2\">Content Style Requirements</div>\n                  <p className=\"text-muted-foreground\">{offer.contentStyleRequirements}</p>\n                </div>\n              )}\n              {offer.brandSafetyRequirements && (\n                <div className=\"pt-4 border-t\">\n                  <div className=\"font-semibold mb-2\">Brand Safety Requirements</div>\n                  <p className=\"text-muted-foreground\">{offer.brandSafetyRequirements}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reviews\" className=\"space-y-6\">\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle>Creator Reviews</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <Star className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No reviews yet</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Sticky Apply Button */}\n      <div className=\"fixed bottom-0 left-0 right-0 border-t bg-background/95 backdrop-blur p-4 z-40\">\n        <div className=\"max-w-7xl mx-auto flex justify-end\">\n          <Dialog open={showApplyDialog} onOpenChange={setShowApplyDialog}>\n            <DialogTrigger asChild>\n              <Button size=\"lg\" className=\"gap-2\" data-testid=\"button-apply\">\n                Apply Now\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Apply to {offer.title}</DialogTitle>\n                <DialogDescription>\n                  Tell the company why you're interested in promoting their offer\n                </DialogDescription>\n              </DialogHeader>\n\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"message\">Why are you interested? *</Label>\n                  <Textarea\n                    id=\"message\"\n                    placeholder=\"Tell the company about your audience and why you'd be a great fit...\"\n                    value={applicationMessage}\n                    onChange={(e) => setApplicationMessage(e.target.value.slice(0, 500))}\n                    className=\"min-h-32\"\n                    data-testid=\"textarea-application-message\"\n                  />\n                  <p className=\"text-xs text-muted-foreground text-right\">\n                    {applicationMessage.length}/500\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"commission\">Preferred Commission Model</Label>\n                  <Select value={preferredCommission} onValueChange={setPreferredCommission}>\n                    <SelectTrigger id=\"commission\" data-testid=\"select-preferred-commission\">\n                      <SelectValue placeholder=\"Select preferred model\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"default\">Standard Commission</SelectItem>\n                      {offer.commissionType === 'hybrid' && (\n                        <>\n                          <SelectItem value=\"per_sale\">Per Sale</SelectItem>\n                          <SelectItem value=\"retainer\">Monthly Retainer</SelectItem>\n                        </>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center gap-2 pt-4\">\n                  <Checkbox\n                    id=\"terms\"\n                    checked={termsAccepted}\n                    onCheckedChange={(checked) => setTermsAccepted(checked as boolean)}\n                    data-testid=\"checkbox-terms\"\n                  />\n                  <Label htmlFor=\"terms\" className=\"text-sm font-normal cursor-pointer\">\n                    I accept the terms and conditions and agree to promote this offer ethically\n                  </Label>\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button\n                  onClick={() => applyMutation.mutate()}\n                  disabled={!applicationMessage || !termsAccepted || applyMutation.isPending}\n                  data-testid=\"button-submit-application\"\n                >\n                  {applyMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Video Player Dialog */}\n      {selectedVideo && (\n        <Dialog open={!!selectedVideo} onOpenChange={() => setSelectedVideo(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>{selectedVideo.title}</DialogTitle>\n              {selectedVideo.description && (\n                <DialogDescription>{selectedVideo.description}</DialogDescription>\n              )}\n            </DialogHeader>\n            <div className=\"aspect-video bg-muted rounded-lg overflow-hidden\">\n              {selectedVideo.videoUrl && (\n                <video src={selectedVideo.videoUrl} controls className=\"w-full h-full\" />\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":18205},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\nexport enum ObjectAccessGroupType {}\n\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n  return granted === ObjectPermission.WRITE;\n}\n\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  throw new Error(`Unknown access group type: ${group.type}`);\n}\n\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n  if (!userId) {\n    return false;\n  }\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n  // For MVP: Skip complex ACL rules since we only use owner and public/private visibility\n  // Complex group-based ACL rules would require database lookups which aren't implemented yet\n  return false;\n}\n","size_bytes":2574},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/pages/creator-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DollarSign, TrendingUp, FileText, MessageSquare, Heart, Star, Play } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function CreatorDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats } = useQuery<any>({\n    queryKey: [\"/api/creator/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: recommendedOffers } = useQuery<any[]>({\n    queryKey: [\"/api/offers/recommended\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">\n      <div className=\"animate-pulse text-lg\">Loading...</div>\n    </div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">Welcome back, {user?.firstName || 'Creator'}!</h1>\n        <p className=\"text-muted-foreground mt-1\">Here's an overview of your creator journey</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Earnings</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\">${stats?.totalEarnings || '0.00'}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              +${stats?.monthlyEarnings || '0.00'} this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Offers</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.activeOffers || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {stats?.pendingApplications || 0} pending applications\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Clicks</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.totalClicks || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {stats?.monthlyClicks || 0} this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Messages</CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.unreadMessages || 0}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Unread messages</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-3\">\n            <Link href=\"/browse\">\n              <Button data-testid=\"button-browse-offers\" className=\"gap-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                Browse New Offers\n              </Button>\n            </Link>\n            <Link href=\"/applications\">\n              <Button variant=\"outline\" data-testid=\"button-view-applications\" className=\"gap-2\">\n                <FileText className=\"h-4 w-4\" />\n                My Applications\n              </Button>\n            </Link>\n            <Link href=\"/analytics\">\n              <Button variant=\"outline\" data-testid=\"button-view-analytics\" className=\"gap-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                View Analytics\n              </Button>\n            </Link>\n            <Link href=\"/messages\">\n              <Button variant=\"outline\" data-testid=\"button-messages\" className=\"gap-2\">\n                <MessageSquare className=\"h-4 w-4\" />\n                Messages\n                {stats?.unreadMessages > 0 && (\n                  <Badge variant=\"destructive\" className=\"ml-1\">{stats.unreadMessages}</Badge>\n                )}\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recommended Offers */}\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Recommended For You</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Offers matching your niche and audience</p>\n        </CardHeader>\n        <CardContent>\n          {!recommendedOffers || recommendedOffers.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Heart className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No recommended offers yet</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Complete your profile to get personalized recommendations</p>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {recommendedOffers.slice(0, 3).map((offer: any) => (\n                <Link key={offer.id} href={`/offers/${offer.id}`}>\n                  <Card className=\"hover-elevate cursor-pointer border-card-border h-full\">\n                    <div className=\"aspect-video relative bg-muted rounded-t-lg overflow-hidden\">\n                      {offer.featuredImageUrl ? (\n                        <img src={offer.featuredImageUrl} alt={offer.title} className=\"w-full h-full object-cover\" />\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center\">\n                          <Play className=\"h-12 w-12 text-muted-foreground/50\" />\n                        </div>\n                      )}\n                      {offer.isPriority && (\n                        <Badge className=\"absolute top-2 right-2 bg-primary\">\n                          Featured\n                        </Badge>\n                      )}\n                    </div>\n                    <CardContent className=\"p-4 space-y-2\">\n                      <h3 className=\"font-semibold line-clamp-1\">{offer.title}</h3>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">{offer.shortDescription}</p>\n                      <div className=\"flex items-center justify-between pt-2\">\n                        <Badge variant=\"secondary\">{offer.commissionType.replace('_', ' ')}</Badge>\n                        <span className=\"font-mono font-semibold text-primary\">\n                          ${offer.commissionAmount || '0'}\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8237},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, Users, DollarSign, Shield, Zap, Target, Star, CheckCircle2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = () => {\n    setLocation(\"/login\");\n  };\n\n  const handleRegister = () => {\n    setLocation(\"/register\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b sticky top-0 z-50 bg-background/95 backdrop-blur\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-8 w-8 rounded-md bg-primary flex items-center justify-center\">\n              <Zap className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl font-bold\">CreatorLink</span>\n          </div>\n          <Button onClick={handleLogin} data-testid=\"button-login\">\n            Sign In\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/10 via-background to-secondary/10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 sm:py-32\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold tracking-tight\">\n                Turn Your Influence Into{\" \"}\n                <span className=\"text-primary\">Income</span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-xl\">\n                The ultimate marketplace connecting creators with top brands. Discover exclusive affiliate opportunities, earn real commissions, and grow your creator business.\n              </p>\n              <div className=\"flex flex-wrap gap-4\">\n                <Button size=\"lg\" onClick={handleRegister} data-testid=\"button-get-started\" className=\"text-base\">\n                  Get Started\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" onClick={handleLogin} data-testid=\"button-list-brand\" className=\"text-base\">\n                  Sign In\n                </Button>\n              </div>\n              \n              {/* Stats */}\n              <div className=\"grid grid-cols-3 gap-6 pt-8 border-t\">\n                <div>\n                  <div className=\"text-3xl font-bold text-primary\">10K+</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Creators</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold text-primary\">$5M+</div>\n                  <div className=\"text-sm text-muted-foreground\">Earned</div>\n                </div>\n                <div>\n                  <div className=\"text-3xl font-bold text-primary\">500+</div>\n                  <div className=\"text-sm text-muted-foreground\">Brands</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"aspect-square rounded-2xl bg-gradient-to-br from-primary/20 to-secondary/20 p-8 flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"inline-flex items-center justify-center w-24 h-24 rounded-full bg-primary text-primary-foreground\">\n                    <TrendingUp className=\"h-12 w-12\" />\n                  </div>\n                  <p className=\"text-lg font-semibold\">Start earning today with instant approvals</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section className=\"py-20 bg-card/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold\">Why Choose CreatorLink?</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to monetize your audience and grow your income\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"hover-elevate border-card-border\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 text-primary\">\n                  <Zap className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Instant Approvals</h3>\n                <p className=\"text-muted-foreground\">\n                  Get approved in minutes, not days. Start promoting offers within 7 minutes of applying.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate border-card-border\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 text-primary\">\n                  <DollarSign className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">High Commissions</h3>\n                <p className=\"text-muted-foreground\">\n                  Earn competitive rates with multiple commission structures: per-sale, retainers, and hybrid models.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate border-card-border\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 text-primary\">\n                  <Target className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Smart Matching</h3>\n                <p className=\"text-muted-foreground\">\n                  Find offers tailored to your niche and audience with advanced filtering and recommendations.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate border-card-border\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 text-primary\">\n                  <Users className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Direct Communication</h3>\n                <p className=\"text-muted-foreground\">\n                  Chat directly with brands through our built-in messaging system. No middlemen.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate border-card-border\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 text-primary\">\n                  <TrendingUp className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Real-Time Analytics</h3>\n                <p className=\"text-muted-foreground\">\n                  Track clicks, conversions, and earnings with comprehensive analytics dashboards.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover-elevate border-card-border\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 text-primary\">\n                  <Shield className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Verified Brands</h3>\n                <p className=\"text-muted-foreground\">\n                  Work with confidence. All companies are manually verified to ensure legitimacy.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold\">How It Works</h2>\n            <p className=\"text-xl text-muted-foreground\">Get started in three simple steps</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-12\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary text-primary-foreground text-2xl font-bold\">\n                1\n              </div>\n              <h3 className=\"text-xl font-semibold\">Browse Offers</h3>\n              <p className=\"text-muted-foreground\">\n                Explore thousands of affiliate opportunities from verified brands in your niche.\n              </p>\n            </div>\n\n            <div className=\"text-center space-y-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary text-primary-foreground text-2xl font-bold\">\n                2\n              </div>\n              <h3 className=\"text-xl font-semibold\">Apply & Get Approved</h3>\n              <p className=\"text-muted-foreground\">\n                Submit a quick application and get approved automatically within 7 minutes.\n              </p>\n            </div>\n\n            <div className=\"text-center space-y-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary text-primary-foreground text-2xl font-bold\">\n                3\n              </div>\n              <h3 className=\"text-xl font-semibold\">Promote & Earn</h3>\n              <p className=\"text-muted-foreground\">\n                Share your unique tracking link and earn commissions on every conversion.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 bg-card/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold\">Trusted by Creators</h2>\n            <p className=\"text-xl text-muted-foreground\">See what our community has to say</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"border-card-border\">\n                <CardContent className=\"p-6 space-y-4\">\n                  <div className=\"flex gap-1\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <Star key={star} className=\"h-4 w-4 fill-primary text-primary\" />\n                    ))}\n                  </div>\n                  <p className=\"text-muted-foreground\">\n                    \"CreatorLink has completely transformed how I monetize my content. The approval process is instant and the commissions are fantastic!\"\n                  </p>\n                  <div className=\"flex items-center gap-3 pt-4 border-t\">\n                    <div className=\"h-10 w-10 rounded-full bg-primary/10\" />\n                    <div>\n                      <div className=\"font-semibold\">Creator Name</div>\n                      <div className=\"text-sm text-muted-foreground\">Content Creator</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/10 to-secondary/10\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center space-y-8\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold\">Ready to Start Earning?</h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Join thousands of creators already making money with CreatorLink\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            <Button size=\"lg\" onClick={handleLogin} data-testid=\"button-join-now\" className=\"text-base\">\n              Get Started Free\n            </Button>\n          </div>\n\n          <div className=\"flex flex-wrap justify-center items-center gap-8 pt-8 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-4 w-4 text-primary\" />\n              <span>No credit card required</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-4 w-4 text-primary\" />\n              <span>Instant approvals</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle2 className=\"h-4 w-4 text-primary\" />\n              <span>Free to join</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-8 w-8 rounded-md bg-primary flex items-center justify-center\">\n                <Zap className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <span className=\"font-bold\">CreatorLink</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              © 2025 CreatorLink. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13821},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"replit.md":{"content":"# CreatorLink - Affiliate Marketplace Platform\n\n## Overview\n\nCreatorLink is a multi-sided marketplace platform connecting video content creators with brands for affiliate marketing opportunities. The platform enables creators to discover and apply for affiliate offers, track their performance, and earn commissions, while companies can list offers, manage creator partnerships, and monitor campaign results. The application features role-based dashboards for creators, companies, and administrators.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript, using Vite as the build tool and development server.\n\n**UI Component System**: shadcn/ui (Radix UI primitives) with Tailwind CSS for styling. The design follows a \"New York\" style variant with comprehensive component coverage including forms, dialogs, data tables, and navigation elements.\n\n**Routing**: Wouter for client-side routing with role-based route protection. Different dashboard views are rendered based on user roles (creator, company, admin).\n\n**State Management**: \n- TanStack Query (React Query) for server state management, data fetching, and caching\n- Local React state for UI-specific concerns\n- WebSocket connections for real-time messaging features\n\n**Design System**: Custom design tokens following inspiration from Airbnb (marketplace patterns), Linear (clean dashboards), Stripe (financial interfaces), and Instagram/TikTok (creator-focused elements). Uses HSL color system with comprehensive light/dark mode support.\n\n### Backend Architecture\n\n**Server Framework**: Express.js with TypeScript running on Node.js.\n\n**API Design**: RESTful API endpoints with role-based middleware protection. Authentication required for most routes with specific role checks (creator, company, admin) where needed.\n\n**Authentication**: Custom username/password authentication using Passport Local Strategy with bcrypt password hashing. Sessions stored in PostgreSQL with express-session and connect-pg-simple. Users register with username, email, and password.\n\n**Real-time Communication**: WebSocket server integrated with HTTP server for real-time messaging between creators and companies.\n\n**File Upload**: Uppy integration for client-side file handling with AWS S3-compatible upload via Google Cloud Storage. Custom ACL (Access Control List) system for object-level permissions with owner, visibility, and group-based access rules.\n\n### Database Architecture\n\n**Database**: PostgreSQL (via Neon serverless) with connection pooling.\n\n**ORM**: Drizzle ORM for type-safe database operations and schema management.\n\n**Schema Design**:\n- User system with role-based access (creator, company, admin)\n- Creator profiles with social media links, follower counts, and niche preferences\n- Company profiles with approval workflow (pending, approved, rejected)\n- Offers with multiple commission types (per_sale, per_lead, per_click, monthly_retainer, hybrid)\n- Offer videos for promotional content\n- Application system with auto-approval workflow and tracking links\n- Messaging system with conversations and real-time updates\n- Reviews and ratings for offers\n- Favorites/bookmarks for creators\n- Click events with comprehensive metadata (IP, geo-location, device, browser)\n- Analytics tracking for clicks, conversions, and earnings (aggregated from click events)\n- Payment settings for payout methods\n\n**Key Relationships**:\n- Users have one-to-one relationships with creator or company profiles\n- Offers belong to companies and can have many videos, applications, and reviews\n- Applications connect creators to offers with status tracking\n- Conversations facilitate messaging between creators and companies\n- Analytics track performance metrics per application\n\n### External Dependencies\n\n**Authentication & Sessions**:\n- Passport Local Strategy - Username/password authentication\n- bcrypt - Password hashing (10 salt rounds)\n- Session management via PostgreSQL with 7-day cookie TTL\n\n**Database**:\n- Neon (PostgreSQL serverless) - Primary data storage\n- Drizzle Kit - Database migrations and schema management\n\n**File Storage**:\n- Google Cloud Storage - Object storage for media files (avatars, videos, promotional content)\n- Custom ACL implementation for access control\n\n**UI Libraries**:\n- Radix UI - Accessible component primitives\n- Tailwind CSS - Utility-first styling\n- Recharts - Data visualization for analytics dashboards\n- Uppy - File upload handling\n\n**Development Tools**:\n- Vite - Frontend build tool and dev server\n- TypeScript - Type safety across frontend and backend\n- ESBuild - Backend bundling for production\n\n**WebSocket**:\n- ws library - Real-time bidirectional communication for messaging\n\n**Geo-location**:\n- geoip-lite - IP-to-location lookup (MaxMind GeoLite2 database)\n\n**Design Assets**:\n- Google Fonts (Inter, JetBrains Mono) - Typography\n- Lucide React - Icon system\n\n## Recent Changes\n\n### Offer Video Upload System (Latest - October 2025)\n\n**Core Features:**\n- **6-12 Video Requirement**: Enforces minimum 6 videos and maximum 12 videos per offer\n- **Video Upload Interface**: Integrated Uppy file uploader with drag-and-drop and file browser\n- **Video Metadata**: Captures title (required), description, creator credit, and original platform (e.g., TikTok, Instagram)\n- **Object Storage Integration**: Videos uploaded to Google Cloud Storage with public ACL\n- **Video Management UI**: Grid display with video cards showing title, description, and delete buttons\n- **Real-time Validation**: UI shows video count (X of 12) and alerts when minimum requirement not met\n- **Authorization**: Only company that owns the offer can add/delete videos\n\n**Technical Implementation:**\n- **API Endpoints**: \n  - GET /api/offers/:offerId/videos - Fetch all videos for an offer\n  - POST /api/offers/:offerId/videos - Upload and save video with metadata\n  - DELETE /api/offer-videos/:id - Delete a specific video\n- **Database Schema**: `offerVideos` table with fields: id, offerId, videoUrl (path), title, description, creatorCredit, originalPlatform, thumbnailUrl, orderIndex\n- **Storage**: Videos stored in object storage with only path saved in database\n- **UI Components**: Video upload dialog with form validation, video grid display, and count indicator\n- **Uppy Configuration**: Custom CSS handling due to Vite resolution - styles managed via component logic\n\n**User Flow:**\n1. Company creates/edits an offer and navigates to offer detail page\n2. System displays video count and alerts if less than 6 videos uploaded\n3. Company clicks \"Add Video\" button to open upload dialog\n4. Company uploads video file via Uppy interface\n5. Company fills in video metadata (title required)\n6. System saves video to object storage and creates database record\n7. Video appears in grid with option to delete\n8. Process repeats until 6-12 videos are uploaded\n\n### Admin Review Management Security Hardening (October 2025)\n\n**Security Improvements:**\n- **Input Validation**: Added Zod validation schemas (`adminReviewUpdateSchema`, `adminNoteSchema`) to prevent mass-assignment vulnerabilities\n- **Field Whitelisting**: Admin review updates only allow editing specific fields (reviewText, ratings) via `.pick()` schema\n- **Excluded Admin Fields**: `insertReviewSchema` explicitly omits admin-only fields (adminNote, isApproved, approvedBy, isHidden, etc.)\n- **Audit Trail Enhancement**: Added `adminNoteUpdatedBy` and `adminNoteUpdatedAt` to track who modified internal notes and when\n- **Server-Side Enforcement**: `isEdited` flag set automatically in storage layer, not via API to prevent client manipulation\n\n**Security Pattern:**\nAll admin routes now follow the pattern: Zod validation → role check → storage operation with automatic audit tracking. This ensures only authorized fields can be modified and all admin actions are fully traceable.\n\n### Enhanced Real-Time Messaging System (October 2025)\n\n**UI/UX Improvements:**\n- **Typing Indicators**: Real-time typing status with 3-second timeout and animated bubble display\n- **Read Receipts**: Double-check marks show when messages are read, single check for sent\n- **Connection Status**: Live online/offline/reconnecting badge with auto-reconnect on disconnect\n- **Message Grouping**: Consecutive messages from same sender within 1 minute are grouped for cleaner UI\n- **Date Separators**: Smart date labels (Today, Yesterday, full dates) separate message sections\n- **Sound Notifications**: Optional notification sound for new messages with toggle in UI (persisted to localStorage)\n- **Better Timestamps**: Contextual time display (h:mm a for today, \"Yesterday h:mm a\", full date for older)\n- **Start Conversation**: Companies can initiate conversations with creators directly from applications page\n- **Auto-Read Tracking**: Messages automatically marked as read when viewing conversation\n- **Improved Empty States**: Helpful messages guide users when no conversations exist\n- **URL Deep Linking**: Direct conversation access via `/messages?conversation={id}` query parameter\n- **Message Creator Button**: Added to company applications page for quick communication\n\n**WebSocket Architecture (Production-Ready):**\n- **Persistent Single Connection**: WebSocket effect depends ONLY on `isAuthenticated` to prevent unnecessary reconnections on UI state changes (conversation switches, sound toggles)\n- **Ref-Based State Access**: Uses `selectedConversationRef` and `userIdRef` to avoid closure staleness in WebSocket handlers\n- **Robust Reconnection**: Per-effect `shouldReconnect` flag prevents old effect instances from reconnecting; auto-reconnects on unintentional disconnects with 3-second delay\n- **Handshake Failure Handling**: Socket assigned to `wsRef.current` immediately upon creation (not after `onopen`) so error/close handlers can identify and recover from handshake failures\n- **Identity Checks**: All handlers verify `socket === wsRef.current` before mutating state to prevent stale sockets from interfering\n- **Conversation-Aware Typing**: Typing indicators clear on conversation switch; both `user_typing` and `user_stop_typing` events check `conversationId` to ensure conversation-scoped behavior\n- **WebSocket Events**: Extended to handle `new_message`, `typing_start`, `typing_stop`, `mark_read`, and `messages_read` events\n\n### Custom Authentication System (October 2025)\n- **Replaced Replit Auth**: Migrated from OpenID Connect to custom username/password authentication\n- **User Schema Updates**: Added `username` (unique, required) and `password` (bcrypt hashed, required) fields to users table\n- **Login/Registration Pages**: Created dedicated `/login` and `/register` pages with form validation\n- **Passport Local Strategy**: Implemented secure credential verification with bcrypt.compare\n- **Session-based Auth**: HttpOnly cookies with PostgreSQL session store for security\n- **Auto-login on Registration**: Users automatically logged in after successful account creation\n- **Role Selection**: Users select Creator or Company role during registration\n- **Landing Page Updates**: \"Get Started\" button redirects to registration, \"Sign In\" to login\n\n### Click Tracking System (October 2025)\n- **Individual Click Storage**: Each click creates a `click_events` record with full metadata\n- **IP Normalization**: Properly extracts client IP from X-Forwarded-For header (handles proxy chains)\n- **Geo-location**: Real-time country/city lookup using geoip-lite (MaxMind GeoLite2)\n- **Device Detection**: Parses user agent to identify device type (mobile/tablet/desktop) and browser\n- **Unique Click Calculation**: Counts distinct normalized IP addresses per day for accurate analytics\n- **Tracking Endpoint**: `/track/:code` → logs metadata → redirects to product URL\n- **Metadata Captured**: IP address, country, city, user agent, device type, browser, referer, timestamp\n\n### Database Export & Migration Utilities (October 2025)\n- **Export Script**: `scripts/export-database.ts` exports all tables to timestamped JSON files\n- **Migration Guide**: `MIGRATION_GUIDE.md` provides step-by-step instructions for database portability\n- **SQL Dump Support**: Instructions for PostgreSQL pg_dump for large datasets\n- **External DB Setup**: Guides for Neon, Supabase, and local PostgreSQL setup\n- **Security Considerations**: Password hashes excluded from JSON export, environment variables documented","size_bytes":12449},"client/src/pages/company-offers.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, Plus, DollarSign, Users, Eye, MoreVertical } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function CompanyOffers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: offers = [], isLoading: loadingOffers } = useQuery<any[]>({\n    queryKey: [\"/api/company/offers\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col sm:flex-row justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">My Offers</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your affiliate offers and track performance\n          </p>\n        </div>\n        <Link href=\"/company/offers/create\">\n          <Button className=\"gap-2\" data-testid=\"button-create-offer\">\n            <Plus className=\"h-4 w-4\" />\n            Create New Offer\n          </Button>\n        </Link>\n      </div>\n\n      {loadingOffers ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-pulse text-lg text-muted-foreground\">\n            Loading offers...\n          </div>\n        </div>\n      ) : offers.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <TrendingUp className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No offers yet</h3>\n            <p className=\"text-sm text-muted-foreground mb-4 text-center max-w-md\">\n              Create your first affiliate offer to start working with creators\n            </p>\n            <Link href=\"/company/offers/create\">\n              <Button data-testid=\"button-create-first-offer\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Your First Offer\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {offers.map((offer: any) => (\n            <Card key={offer.id} className=\"border-card-border\" data-testid={`card-offer-${offer.id}`}>\n              <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n                <div className=\"flex-1 min-w-0\">\n                  <CardTitle className=\"text-lg line-clamp-1\">{offer.title}</CardTitle>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Badge \n                      variant={offer.status === 'live' ? 'default' : 'secondary'}\n                      data-testid={`badge-status-${offer.id}`}\n                    >\n                      {offer.status}\n                    </Badge>\n                    <Badge variant=\"outline\" data-testid={`badge-type-${offer.id}`}>\n                      {offer.commissionType?.replace(/_/g, ' ')}\n                    </Badge>\n                  </div>\n                </div>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\" \n                      className=\"h-8 w-8\"\n                      data-testid={`button-menu-${offer.id}`}\n                    >\n                      <MoreVertical className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem asChild>\n                      <Link href={`/company/offers/${offer.id}`}>\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        View Details\n                      </Link>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                    {offer.shortDescription || offer.description || \"No description\"}\n                  </p>\n                  {offer.primaryNiche && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {offer.primaryNiche}\n                    </Badge>\n                  )}\n                </div>\n                \n                <div className=\"grid grid-cols-3 gap-4 pt-3 border-t\">\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">Commission</div>\n                    <div className=\"text-sm font-semibold flex items-center justify-center gap-1\">\n                      <DollarSign className=\"h-3 w-3\" />\n                      {offer.commissionPercentage || offer.commissionAmount || offer.commissionRate || 0}\n                      {offer.commissionType === 'per_sale' && '%'}\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">Applications</div>\n                    <div className=\"text-sm font-semibold flex items-center justify-center gap-1\">\n                      <Users className=\"h-3 w-3\" />\n                      {offer.applicationCount || 0}\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">Clicks</div>\n                    <div className=\"text-sm font-semibold\">\n                      {offer.clickCount || 0}\n                    </div>\n                  </div>\n                </div>\n\n                <Link href={`/company/offers/${offer.id}`}>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    data-testid={`button-view-${offer.id}`}\n                  >\n                    View Offer\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7109},"scripts/export-database.ts":{"content":"import { db } from \"../server/db\";\nimport * as schema from \"../shared/schema\";\nimport { writeFileSync } from \"fs\";\n\n/**\n * Database Export Utility\n * Exports all data from the database to JSON files for backup/migration\n */\n\nasync function exportDatabase() {\n  console.log(\"🔄 Starting database export...\\n\");\n\n  try {\n    // Export all tables\n    const data: Record<string, any[]> = {};\n\n    console.log(\"📊 Exporting tables:\");\n\n    // Users (excluding passwords for security)\n    const users = await db.select({\n      id: schema.users.id,\n      username: schema.users.username,\n      email: schema.users.email,\n      firstName: schema.users.firstName,\n      lastName: schema.users.lastName,\n      role: schema.users.role,\n      profileImageUrl: schema.users.profileImageUrl,\n      createdAt: schema.users.createdAt,\n    }).from(schema.users);\n    data.users = users;\n    console.log(`  ✓ Users: ${users.length} records`);\n\n    // Creator profiles\n    const creatorProfiles = await db.select().from(schema.creatorProfiles);\n    data.creatorProfiles = creatorProfiles;\n    console.log(`  ✓ Creator Profiles: ${creatorProfiles.length} records`);\n\n    // Company profiles\n    const companyProfiles = await db.select().from(schema.companyProfiles);\n    data.companyProfiles = companyProfiles;\n    console.log(`  ✓ Company Profiles: ${companyProfiles.length} records`);\n\n    // Offers\n    const offers = await db.select().from(schema.offers);\n    data.offers = offers;\n    console.log(`  ✓ Offers: ${offers.length} records`);\n\n    // Offer videos\n    const offerVideos = await db.select().from(schema.offerVideos);\n    data.offerVideos = offerVideos;\n    console.log(`  ✓ Offer Videos: ${offerVideos.length} records`);\n\n    // Applications\n    const applications = await db.select().from(schema.applications);\n    data.applications = applications;\n    console.log(`  ✓ Applications: ${applications.length} records`);\n\n    // Conversations\n    const conversations = await db.select().from(schema.conversations);\n    data.conversations = conversations;\n    console.log(`  ✓ Conversations: ${conversations.length} records`);\n\n    // Messages\n    const messages = await db.select().from(schema.messages);\n    data.messages = messages;\n    console.log(`  ✓ Messages: ${messages.length} records`);\n\n    // Reviews\n    const reviews = await db.select().from(schema.reviews);\n    data.reviews = reviews;\n    console.log(`  ✓ Reviews: ${reviews.length} records`);\n\n    // Favorites\n    const favorites = await db.select().from(schema.favorites);\n    data.favorites = favorites;\n    console.log(`  ✓ Favorites: ${favorites.length} records`);\n\n    // Click events\n    const clickEvents = await db.select().from(schema.clickEvents);\n    data.clickEvents = clickEvents;\n    console.log(`  ✓ Click Events: ${clickEvents.length} records`);\n\n    // Payment settings\n    const paymentSettings = await db.select().from(schema.paymentSettings);\n    data.paymentSettings = paymentSettings;\n    console.log(`  ✓ Payment Settings: ${paymentSettings.length} records`);\n\n    // Payments\n    const payments = await db.select().from(schema.payments);\n    data.payments = payments;\n    console.log(`  ✓ Payments: ${payments.length} records`);\n\n    // Retainer contracts\n    const retainerContracts = await db.select().from(schema.retainerContracts);\n    data.retainerContracts = retainerContracts;\n    console.log(`  ✓ Retainer Contracts: ${retainerContracts.length} records`);\n\n    // Retainer applications\n    const retainerApplications = await db.select().from(schema.retainerApplications);\n    data.retainerApplications = retainerApplications;\n    console.log(`  ✓ Retainer Applications: ${retainerApplications.length} records`);\n\n    // Retainer deliverables\n    const retainerDeliverables = await db.select().from(schema.retainerDeliverables);\n    data.retainerDeliverables = retainerDeliverables;\n    console.log(`  ✓ Retainer Deliverables: ${retainerDeliverables.length} records`);\n\n    // Write to file\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `database-export-${timestamp}.json`;\n    \n    writeFileSync(filename, JSON.stringify(data, null, 2));\n    \n    console.log(`\\n✅ Export complete!`);\n    console.log(`📁 File saved: ${filename}`);\n    console.log(`📊 Total records exported: ${Object.values(data).reduce((sum, arr) => sum + arr.length, 0)}`);\n    \n    // Create SQL dump instructions\n    console.log(`\\n📝 Additional export options:`);\n    console.log(`\\nTo export as SQL (for PostgreSQL):`);\n    console.log(`pg_dump $DATABASE_URL > database-dump.sql`);\n    \n    console.log(`\\nTo export specific table as CSV:`);\n    console.log(`psql $DATABASE_URL -c \"COPY users TO STDOUT WITH CSV HEADER\" > users.csv`);\n\n  } catch (error) {\n    console.error(\"❌ Export failed:\", error);\n    throw error;\n  }\n}\n\nexportDatabase()\n  .then(() => {\n    console.log(\"\\n✨ Done!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"\\n💥 Error:\", error);\n    process.exit(1);\n  });\n","size_bytes":5065},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Zap } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  role: z.enum([\"creator\", \"company\"]),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"creator\",\n    },\n  });\n\n  const onSubmit = async (data: RegisterForm) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          username: data.username,\n          email: data.email,\n          password: data.password,\n          firstName: data.firstName,\n          lastName: data.lastName,\n          role: data.role,\n        }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Registration failed\");\n      }\n\n      toast({\n        title: \"Success!\",\n        description: \"Account created successfully. Redirecting...\",\n      });\n\n      // Redirect based on role\n      setTimeout(() => {\n        window.location.href = data.role === \"creator\" ? \"/browse\" : \"/company/dashboard\";\n      }, 1000);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <div className=\"h-10 w-10 rounded-md bg-primary flex items-center justify-center\">\n            <Zap className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <span className=\"text-2xl font-bold\">CreatorLink</span>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Create your account</CardTitle>\n            <CardDescription>Join the marketplace and start earning</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>I am a</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                          className=\"grid grid-cols-2 gap-4\"\n                        >\n                          <div>\n                            <RadioGroupItem\n                              value=\"creator\"\n                              id=\"creator\"\n                              className=\"peer sr-only\"\n                            />\n                            <label\n                              htmlFor=\"creator\"\n                              className=\"flex items-center justify-center rounded-md border-2 border-muted bg-card p-4 hover-elevate active-elevate-2 peer-data-[state=checked]:border-primary cursor-pointer\"\n                              data-testid=\"role-creator\"\n                            >\n                              <span className=\"text-sm font-medium\">Creator</span>\n                            </label>\n                          </div>\n                          <div>\n                            <RadioGroupItem\n                              value=\"company\"\n                              id=\"company\"\n                              className=\"peer sr-only\"\n                            />\n                            <label\n                              htmlFor=\"company\"\n                              className=\"flex items-center justify-center rounded-md border-2 border-muted bg-card p-4 hover-elevate active-elevate-2 peer-data-[state=checked]:border-primary cursor-pointer\"\n                              data-testid=\"role-company\"\n                            >\n                              <span className=\"text-sm font-medium\">Company</span>\n                            </label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"johndoe\" {...field} data-testid=\"input-username\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John\" {...field} data-testid=\"input-firstname\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Doe\" {...field} data-testid=\"input-lastname\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-confirm-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-register\"\n                >\n                  {isLoading ? \"Creating account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-4 text-center text-sm\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                Sign in\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9743},"client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building2, Sparkles } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function Onboarding() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedRole, setSelectedRole] = useState<'creator' | 'company' | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleRoleSelection = async () => {\n    if (!selectedRole) return;\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(\"/api/user/role\", {\n        method: \"POST\",\n        body: JSON.stringify({ role: selectedRole }),\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to set role\");\n      }\n\n      toast({\n        title: \"Welcome!\",\n        description: `Your account has been set up as a ${selectedRole}.`,\n      });\n\n      // Force page reload to refresh user session and redirect to appropriate dashboard\n      window.location.href = selectedRole === 'creator' ? '/browse' : '/company/dashboard';\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to set role\",\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-muted p-4\">\n      <div className=\"w-full max-w-4xl\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">Welcome to CreatorLink</h1>\n          <p className=\"text-muted-foreground\">Choose how you'd like to use the platform</p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Creator Card */}\n          <Card \n            className={`cursor-pointer transition-all hover-elevate ${\n              selectedRole === 'creator' ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => setSelectedRole('creator')}\n            data-testid=\"card-role-creator\"\n          >\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <Sparkles className=\"h-6 w-6 text-primary\" />\n                </div>\n                <CardTitle>I'm a Creator</CardTitle>\n              </div>\n              <CardDescription>\n                Monetize your content by promoting brands and earning commissions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Browse and apply to affiliate offers</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Get unique tracking links</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Earn commissions on sales</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Track performance analytics</span>\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n\n          {/* Company Card */}\n          <Card \n            className={`cursor-pointer transition-all hover-elevate ${\n              selectedRole === 'company' ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => setSelectedRole('company')}\n            data-testid=\"card-role-company\"\n          >\n            <CardHeader>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <Building2 className=\"h-6 w-6 text-primary\" />\n                </div>\n                <CardTitle>I'm a Company</CardTitle>\n              </div>\n              <CardDescription>\n                Connect with creators to promote your products and services\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Create affiliate offers</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Manage creator partnerships</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Track campaign performance</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-0.5\">✓</span>\n                  <span>Approve creator work</span>\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-8 text-center\">\n          <Button\n            size=\"lg\"\n            onClick={handleRoleSelection}\n            disabled={!selectedRole || isSubmitting}\n            className=\"min-w-48\"\n            data-testid=\"button-continue\"\n          >\n            {isSubmitting ? \"Setting up...\" : \"Continue\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6041},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Zap } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Login failed\");\n      }\n\n      const result = await response.json();\n\n      toast({\n        title: \"Welcome back!\",\n        description: \"Login successful. Redirecting...\",\n      });\n\n      // Redirect based on role\n      setTimeout(() => {\n        if (result.role === \"creator\") {\n          window.location.href = \"/browse\";\n        } else if (result.role === \"company\") {\n          window.location.href = \"/company/dashboard\";\n        } else if (result.role === \"admin\") {\n          window.location.href = \"/admin\";\n        } else {\n          window.location.href = \"/\";\n        }\n      }, 1000);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <div className=\"h-10 w-10 rounded-md bg-primary flex items-center justify-center\">\n            <Zap className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <span className=\"text-2xl font-bold\">CreatorLink</span>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Welcome back</CardTitle>\n            <CardDescription>Sign in to your account to continue</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"johndoe\" {...field} data-testid=\"input-username\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} data-testid=\"input-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-login\"\n                >\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-4 text-center text-sm\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                Create account\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4762},"server/localAuth.ts":{"content":"import type { Express, Request } from \"express\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\n\n// Middleware to check if user is authenticated\nexport function isAuthenticated(req: Request, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).send(\"Unauthorized\");\n}\n\n// Setup session middleware\nfunction getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Setup Passport Local Strategy\nexport async function setupAuth(app: Express) {\n  // Set trust proxy for session cookies\n  app.set(\"trust proxy\", 1);\n\n  // Setup session middleware BEFORE passport\n  app.use(getSession());\n  // Configure Passport Local Strategy\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        \n        if (!user) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        const isValidPassword = await bcrypt.compare(password, user.password);\n        \n        if (!isValidPassword) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    })\n  );\n\n  // Serialize user to session\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  // Deserialize user from session\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Initialize passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password, firstName, lastName, role } = req.body;\n\n      // Validate inputs\n      if (!username || !email || !password) {\n        return res.status(400).json({ error: \"Username, email, and password are required\" });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ error: \"Password must be at least 6 characters\" });\n      }\n\n      if (![\"creator\", \"company\"].includes(role)) {\n        return res.status(400).json({ error: \"Invalid role\" });\n      }\n\n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ error: \"Email already registered\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        firstName: firstName || null,\n        lastName: lastName || null,\n        role,\n      });\n\n      // Create profile based on role\n      if (role === 'creator') {\n        await storage.createCreatorProfile({\n          userId: user.id,\n          bio: null,\n          youtubeUrl: null,\n          tiktokUrl: null,\n          instagramUrl: null,\n          youtubeFollowers: null,\n          tiktokFollowers: null,\n          instagramFollowers: null,\n          niches: [],\n        });\n      } else if (role === 'company') {\n        await storage.createCompanyProfile({\n          userId: user.id,\n          legalName: username,\n          websiteUrl: null,\n          description: null,\n          logoUrl: null,\n          industry: null,\n          status: 'pending',\n        });\n      }\n\n      // Log the user in\n      req.login(user, (err) => {\n        if (err) {\n          console.error(\"Login error after registration:\", err);\n          return res.status(500).json({ error: \"Registration successful but login failed\" });\n        }\n        res.json({ success: true, user: { id: user.id, username: user.username, role: user.role } });\n      });\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: error.message || \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        console.error(\"Login error:\", err);\n        return res.status(500).json({ error: \"Login failed\" });\n      }\n\n      if (!user) {\n        return res.status(401).json({ error: info?.message || \"Invalid credentials\" });\n      }\n\n      req.login(user, (loginErr) => {\n        if (loginErr) {\n          console.error(\"Session login error:\", loginErr);\n          return res.status(500).json({ error: \"Login failed\" });\n        }\n        \n        res.json({ \n          success: true, \n          user: { \n            id: user.id, \n            username: user.username, \n            email: user.email,\n            role: user.role \n          },\n          role: user.role\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/auth/user\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n}\n","size_bytes":6362},"client/src/pages/company-creators.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Users, MessageSquare, TrendingUp, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function CompanyCreators() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: applications = [], isLoading: loadingCreators } = useQuery<any[]>({\n    queryKey: [\"/api/company/applications\"],\n    enabled: isAuthenticated,\n  });\n\n  // Get unique creators from approved applications\n  const creators = applications\n    .filter((app: any) => app.status === 'approved' && app.creator)\n    .reduce((acc: any[], app: any) => {\n      const existing = acc.find(c => c.id === app.creator.id);\n      if (!existing) {\n        acc.push({\n          ...app.creator,\n          applications: [app],\n          totalClicks: app.clickCount || 0,\n          totalConversions: app.conversionCount || 0,\n          totalEarnings: parseFloat(app.totalEarnings || '0'),\n        });\n      } else {\n        existing.applications.push(app);\n        existing.totalClicks += app.clickCount || 0;\n        existing.totalConversions += app.conversionCount || 0;\n        existing.totalEarnings += parseFloat(app.totalEarnings || '0');\n      }\n      return acc;\n    }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Creators</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Manage relationships with creators promoting your offers\n        </p>\n      </div>\n\n      {loadingCreators ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-pulse text-lg text-muted-foreground\">\n            Loading creators...\n          </div>\n        </div>\n      ) : creators.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Users className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No active creators yet</h3>\n            <p className=\"text-sm text-muted-foreground text-center max-w-md\">\n              Approved creators will appear here when they start promoting your offers\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {creators.map((creator: any) => (\n            <Card key={creator.id} className=\"border-card-border\" data-testid={`card-creator-${creator.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start gap-3\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={creator.profileImageUrl} />\n                    <AvatarFallback>\n                      {creator.firstName?.[0] || 'C'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-lg line-clamp-1\">\n                      {creator.firstName || 'Creator'}\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {creator.applications.length} active {creator.applications.length === 1 ? 'offer' : 'offers'}\n                    </p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {creator.bio && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                    {creator.bio}\n                  </p>\n                )}\n\n                <div className=\"grid grid-cols-3 gap-3 pt-3 border-t\">\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">Clicks</div>\n                    <div className=\"text-sm font-semibold\">{creator.totalClicks}</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">Conversions</div>\n                    <div className=\"text-sm font-semibold\">{creator.totalConversions}</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">Earned</div>\n                    <div className=\"text-sm font-semibold\">${creator.totalEarnings.toFixed(2)}</div>\n                  </div>\n                </div>\n\n                {(creator.youtubeUrl || creator.tiktokUrl || creator.instagramUrl) && (\n                  <div className=\"flex flex-wrap gap-2 pt-2\">\n                    {creator.youtubeUrl && (\n                      <Badge variant=\"outline\" className=\"gap-1\">\n                        <ExternalLink className=\"h-3 w-3\" />\n                        YouTube\n                      </Badge>\n                    )}\n                    {creator.tiktokUrl && (\n                      <Badge variant=\"outline\" className=\"gap-1\">\n                        <ExternalLink className=\"h-3 w-3\" />\n                        TikTok\n                      </Badge>\n                    )}\n                    {creator.instagramUrl && (\n                      <Badge variant=\"outline\" className=\"gap-1\">\n                        <ExternalLink className=\"h-3 w-3\" />\n                        Instagram\n                      </Badge>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 pt-2\">\n                  <Link href=\"/company/messages\" className=\"flex-1\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full gap-2\"\n                      data-testid={`button-message-${creator.id}`}\n                    >\n                      <MessageSquare className=\"h-4 w-4\" />\n                      Message\n                    </Button>\n                  </Link>\n                  <Link href=\"/company/analytics\" className=\"flex-1\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full gap-2\"\n                      data-testid={`button-analytics-${creator.id}`}\n                    >\n                      <TrendingUp className=\"h-4 w-4\" />\n                      Analytics\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7352},"MIGRATION_GUIDE.md":{"content":"# Database Migration Guide\n\nThis guide helps you export your CreatorLink data from Replit and run it elsewhere.\n\n## Option 1: Export to JSON (Recommended for Small Datasets)\n\n### Step 1: Export Your Data\n\nRun the export script:\n```bash\nnpm run tsx scripts/export-database.ts\n```\n\nThis creates a `database-export-[timestamp].json` file with all your data.\n\n### Step 2: Download the Export File\n\nClick on the exported JSON file in the Files panel and download it to your computer.\n\n---\n\n## Option 2: PostgreSQL Dump (Recommended for Large Datasets)\n\n### Step 1: Export as SQL\n\nIn the Replit Shell, run:\n```bash\npg_dump $DATABASE_URL > database-dump.sql\n```\n\n### Step 2: Download the SQL File\n\nDownload `database-dump.sql` from the Files panel.\n\n---\n\n## Setting Up a New Database\n\n### Option A: Neon.tech (Same Provider as Replit)\n\n1. Go to [neon.tech](https://neon.tech)\n2. Create a free account\n3. Create a new project\n4. Copy the connection string\n5. It will look like: `postgresql://user:pass@host.neon.tech/dbname`\n\n### Option B: Supabase (Free Tier Available)\n\n1. Go to [supabase.com](https://supabase.com)\n2. Create a new project\n3. Go to Settings → Database\n4. Copy the connection string (use the \"Connection pooling\" one)\n\n### Option C: Local PostgreSQL\n\n1. Install PostgreSQL locally\n2. Create a database:\n   ```bash\n   createdb creatorlink\n   ```\n3. Connection string: `postgresql://localhost/creatorlink`\n\n---\n\n## Importing Your Data\n\n### Method 1: Import from JSON\n\n1. Set up your new database URL:\n   ```bash\n   export DATABASE_URL=\"your-new-database-url\"\n   ```\n\n2. Run schema migrations:\n   ```bash\n   npm run db:push\n   ```\n\n3. Create an import script or manually insert data using the exported JSON\n\n### Method 2: Import from SQL Dump\n\n1. Run the import:\n   ```bash\n   psql your-new-database-url < database-dump.sql\n   ```\n\n---\n\n## Running the Project Elsewhere\n\n### Step 1: Clone/Download Your Code\n\nDownload all project files from Replit.\n\n### Step 2: Set Environment Variables\n\nCreate a `.env` file:\n```env\nDATABASE_URL=your-new-database-url\nSESSION_SECRET=your-session-secret\nNODE_ENV=development\n\n# Optional: Stripe keys if using payments\nSTRIPE_SECRET_KEY=your-stripe-key\nVITE_STRIPE_PUBLIC_KEY=your-public-key\n```\n\n### Step 3: Install Dependencies\n\n```bash\nnpm install\n```\n\n### Step 4: Run Migrations\n\n```bash\nnpm run db:push\n```\n\n### Step 5: Start the App\n\n```bash\nnpm run dev\n```\n\nYour app should now be running with your data!\n\n---\n\n## Important Notes\n\n### Security Considerations\n\n1. **Passwords**: The JSON export excludes password hashes for security. Users will need to reset passwords.\n2. **Environment Secrets**: Never commit `.env` files to version control\n3. **API Keys**: You'll need to set up new Stripe/payment keys if using those features\n\n### File Storage\n\nIf you've uploaded files (images, videos) to Replit's Object Storage, you'll need to:\n1. Download those files manually\n2. Upload them to a new storage service (AWS S3, Google Cloud Storage, Cloudflare R2, etc.)\n3. Update the URLs in your database\n\n### What's Portable\n\n✅ **Included in export:**\n- All user accounts (except passwords)\n- Creator and company profiles\n- Offers and applications\n- Messages and conversations\n- Reviews and ratings\n- Click tracking data\n- Payment records\n\n❌ **Not included:**\n- Password hashes (security)\n- Active sessions\n- Uploaded files (images/videos)\n- Stripe connection data\n\n---\n\n## Testing Your Migration\n\n1. Start with a test database first\n2. Import a small sample of data\n3. Test all features work correctly\n4. Then do the full migration\n\n---\n\n## Troubleshooting\n\n### \"Permission denied\" error\n- Make sure your new database user has CREATE/INSERT permissions\n\n### Missing tables\n- Run `npm run db:push` to create the schema first\n\n### Connection timeout\n- Check your DATABASE_URL is correct\n- Verify firewall/network settings allow database connections\n\n---\n\n## Need Help?\n\n- Check the Replit database documentation\n- Review the PostgreSQL documentation\n- Contact your hosting provider's support\n\n---\n\n## Quick Reference: npm Scripts\n\n```bash\n# Export data to JSON\nnpm run tsx scripts/export-database.ts\n\n# Push schema to database\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n","size_bytes":4230},"client/src/pages/company-applications.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { FileText, CheckCircle, Clock, XCircle, MessageCircle } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function CompanyApplications() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: applications = [], isLoading: loadingApplications } = useQuery<any[]>({\n    queryKey: [\"/api/company/applications\"],\n    enabled: isAuthenticated,\n  });\n\n  const completeApplicationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      const response = await apiRequest('POST', `/api/applications/${applicationId}/complete`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/company/applications\"] });\n      toast({\n        title: \"Work Approved\",\n        description: \"Creator work has been marked as complete.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to mark work as complete\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const startConversationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      const response = await apiRequest('POST', '/api/conversations/start', { applicationId });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      // Redirect to company messages with conversation selected\n      setLocation(`/company/messages?conversation=${data.conversationId}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start conversation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveApplicationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      const response = await apiRequest('PUT', `/api/applications/${applicationId}/approve`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/company/applications\"] });\n      toast({\n        title: \"Application Approved\",\n        description: \"Creator has been approved and tracking link generated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectApplicationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      const response = await apiRequest('PUT', `/api/applications/${applicationId}/reject`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/company/applications\"] });\n      toast({\n        title: \"Application Rejected\",\n        description: \"Application has been rejected.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkComplete = (applicationId: string, creatorName: string) => {\n    if (confirm(`Mark work as complete for ${creatorName}? This action cannot be undone.`)) {\n      completeApplicationMutation.mutate(applicationId);\n    }\n  };\n\n  const handleApprove = (applicationId: string) => {\n    if (confirm(\"Approve this application? This will generate a tracking link for the creator.\")) {\n      approveApplicationMutation.mutate(applicationId);\n    }\n  };\n\n  const handleReject = (applicationId: string) => {\n    if (confirm(\"Reject this application? This action cannot be undone.\")) {\n      rejectApplicationMutation.mutate(applicationId);\n    }\n  };\n\n  const handleMessageCreator = (applicationId: string) => {\n    startConversationMutation.mutate(applicationId);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Applications</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Review and manage creator applications for your offers\n        </p>\n      </div>\n\n      {loadingApplications ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-pulse text-lg text-muted-foreground\">\n            Loading applications...\n          </div>\n        </div>\n      ) : applications.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <FileText className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No applications yet</h3>\n            <p className=\"text-sm text-muted-foreground text-center max-w-md\">\n              Creators will appear here when they apply to your offers\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {applications.map((app: any) => (\n            <Card key={app.id} className=\"border-card-border\" data-testid={`card-application-${app.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarImage src={app.creator?.profileImageUrl} />\n                      <AvatarFallback>\n                        {app.creator?.firstName?.[0] || 'C'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <CardTitle className=\"text-lg\">\n                        {app.creator?.firstName || 'Creator'}\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {app.offer?.title || 'Offer'}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusIcon(app.status)}\n                    <Badge \n                      variant={\n                        app.status === 'approved' ? 'default' : \n                        app.status === 'pending' ? 'secondary' : \n                        'destructive'\n                      }\n                      data-testid={`badge-status-${app.id}`}\n                    >\n                      {app.status}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <div className=\"text-muted-foreground mb-1\">Applied</div>\n                    <div className=\"font-medium\">\n                      {formatDistanceToNow(new Date(app.createdAt), { addSuffix: true })}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground mb-1\">Total Clicks</div>\n                    <div className=\"font-medium\">{app.clickCount || 0}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground mb-1\">Conversions</div>\n                    <div className=\"font-medium\">{app.conversionCount || 0}</div>\n                  </div>\n                  <div>\n                    <div className=\"text-muted-foreground mb-1\">Earnings</div>\n                    <div className=\"font-medium\">${app.totalEarnings || '0.00'}</div>\n                  </div>\n                </div>\n\n                {app.trackingLink && (\n                  <div className=\"p-3 bg-muted/50 rounded-md\">\n                    <div className=\"text-xs text-muted-foreground mb-1\">Tracking Link</div>\n                    <code className=\"text-xs break-all\">{app.trackingLink}</code>\n                  </div>\n                )}\n\n                {/* Approve/Reject buttons for pending applications */}\n                {app.status === 'pending' && (\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => handleApprove(app.id)}\n                      variant=\"default\"\n                      className=\"flex-1\"\n                      disabled={approveApplicationMutation.isPending}\n                      data-testid={`button-approve-${app.id}`}\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      {approveApplicationMutation.isPending ? 'Approving...' : 'Approve'}\n                    </Button>\n                    <Button\n                      onClick={() => handleReject(app.id)}\n                      variant=\"destructive\"\n                      className=\"flex-1\"\n                      disabled={rejectApplicationMutation.isPending}\n                      data-testid={`button-reject-${app.id}`}\n                    >\n                      <XCircle className=\"h-4 w-4 mr-2\" />\n                      {rejectApplicationMutation.isPending ? 'Rejecting...' : 'Reject'}\n                    </Button>\n                  </div>\n                )}\n\n                {/* Message and Complete buttons for approved applications */}\n                {(app.status === 'approved' || app.status === 'rejected') && (\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => handleMessageCreator(app.id)}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      disabled={startConversationMutation.isPending}\n                      data-testid={`button-message-creator-${app.id}`}\n                    >\n                      <MessageCircle className=\"h-4 w-4 mr-2\" />\n                      {startConversationMutation.isPending ? 'Opening...' : 'Message Creator'}\n                    </Button>\n\n                    {app.status === 'approved' && !app.completedAt && (\n                      <Button\n                        onClick={() => handleMarkComplete(app.id, app.creator?.firstName || 'this creator')}\n                        variant=\"default\"\n                        className=\"flex-1\"\n                        disabled={completeApplicationMutation.isPending}\n                        data-testid={`button-mark-complete-${app.id}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        {completeApplicationMutation.isPending ? 'Processing...' : 'Mark Work Complete'}\n                      </Button>\n                    )}\n                  </div>\n                )}\n\n                {app.completedAt && (\n                  <div className=\"flex items-center gap-2 text-sm text-green-600 dark:text-green-400\">\n                    <CheckCircle className=\"h-4 w-4\" />\n                    <span>\n                      Work completed {formatDistanceToNow(new Date(app.completedAt), { addSuffix: true })}\n                    </span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":12574},"client/src/pages/company-reviews.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Star, MessageSquare } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function CompanyReviews() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: offers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/offers\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: reviews = [], isLoading: loadingReviews } = useQuery<any[]>({\n    queryKey: [\"/api/reviews\"],\n    enabled: isAuthenticated,\n  });\n\n  // Filter reviews for this company's offers\n  const companyReviews = reviews.filter((review: any) => \n    offers.some((offer: any) => offer.id === review.offerId)\n  );\n\n  const renderStars = (rating: number) => {\n    return (\n      <div className=\"flex gap-0.5\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-4 w-4 ${\n              star <= rating\n                ? 'fill-yellow-400 text-yellow-400'\n                : 'text-muted-foreground/30'\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const averageRating = companyReviews.length > 0\n    ? (companyReviews.reduce((sum: number, r: any) => sum + r.rating, 0) / companyReviews.length).toFixed(1)\n    : '0.0';\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Reviews</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          See what creators are saying about your offers\n        </p>\n      </div>\n\n      {companyReviews.length > 0 && (\n        <div className=\"grid gap-6 md:grid-cols-3\">\n          <Card className=\"border-card-border\">\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Average Rating</CardTitle>\n              <Star className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{averageRating}</div>\n              <div className=\"flex gap-1 mt-2\">\n                {renderStars(Math.round(parseFloat(averageRating)))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-card-border\">\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Reviews</CardTitle>\n              <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{companyReviews.length}</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Across {offers.length} {offers.length === 1 ? 'offer' : 'offers'}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-card-border\">\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">5-Star Reviews</CardTitle>\n              <Star className=\"h-4 w-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {companyReviews.filter((r: any) => r.rating === 5).length}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {companyReviews.length > 0\n                  ? `${Math.round((companyReviews.filter((r: any) => r.rating === 5).length / companyReviews.length) * 100)}%`\n                  : '0%'} of total\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {loadingReviews ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-pulse text-lg text-muted-foreground\">\n            Loading reviews...\n          </div>\n        </div>\n      ) : companyReviews.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Star className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No reviews yet</h3>\n            <p className=\"text-sm text-muted-foreground text-center max-w-md\">\n              Reviews from creators will appear here once they complete campaigns\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {companyReviews.map((review: any) => (\n            <Card key={review.id} className=\"border-card-border\" data-testid={`card-review-${review.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarImage src={review.creator?.profileImageUrl} />\n                      <AvatarFallback>\n                        {review.creator?.firstName?.[0] || 'C'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <CardTitle className=\"text-base\">\n                        {review.creator?.firstName || 'Creator'}\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {review.offer?.title || 'Offer'}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col items-end gap-2\">\n                    {renderStars(review.rating)}\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(review.createdAt), { addSuffix: true })}\n                    </span>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm\">{review.comment}</p>\n                \n                {review.response && (\n                  <div className=\"mt-4 p-3 bg-muted/50 rounded-md\">\n                    <div className=\"text-xs font-semibold text-muted-foreground mb-1\">\n                      Your Response\n                    </div>\n                    <p className=\"text-sm\">{review.response}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7347},"client/src/pages/company-offer-create.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function CompanyOfferCreate() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    productName: \"\",\n    shortDescription: \"\",\n    fullDescription: \"\",\n    primaryNiche: \"\",\n    productUrl: \"\",\n    commissionType: \"per_sale\" as const,\n    commissionRate: \"\",\n    commissionAmount: \"\",\n    status: \"draft\" as const,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Please log in to create offers\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const createOfferMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      // Build payload that exactly matches createOfferSchema\n      const payload: any = {\n        title: data.title,\n        productName: data.productName,\n        shortDescription: data.shortDescription,\n        fullDescription: data.fullDescription,\n        primaryNiche: data.primaryNiche,\n        productUrl: data.productUrl,\n        commissionType: data.commissionType,\n        commissionPercentage: data.commissionType === \"per_sale\" && data.commissionRate ? data.commissionRate : null,\n        commissionAmount: data.commissionType !== \"per_sale\" && data.commissionAmount ? data.commissionAmount : null,\n      };\n      \n      return await apiRequest(\"POST\", \"/api/offers\", payload);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Offer Created\",\n        description: \"Your offer has been created successfully\",\n      });\n      setLocation(\"/company/offers\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create offer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validation\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter an offer title\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.productName.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a product name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.shortDescription.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a short description\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.fullDescription.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a full description\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.primaryNiche.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a primary niche\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.productUrl.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a product URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate URL format\n    if (formData.productUrl.trim() && !formData.productUrl.match(/^https?:\\/\\/.+/i) && !formData.productUrl.includes('.')) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid URL (e.g., https://example.com or example.com)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.commissionType === \"per_sale\" && !formData.commissionRate) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a commission rate for per-sale offers\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.commissionType === \"per_sale\" && formData.commissionRate) {\n      const rate = parseFloat(formData.commissionRate);\n      if (isNaN(rate) || rate <= 0 || rate > 100) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Commission rate must be between 0 and 100\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    if (formData.commissionType !== \"per_sale\" && !formData.commissionAmount) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a commission amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.commissionType !== \"per_sale\" && formData.commissionAmount) {\n      const amount = parseFloat(formData.commissionAmount);\n      if (isNaN(amount) || amount <= 0) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Commission amount must be greater than 0\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    createOfferMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/company/offers\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-3xl font-bold\">Create New Offer</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Set up an affiliate offer for creators to promote\n          </p>\n        </div>\n      </div>\n\n      <Card className=\"border-card-border\">\n        <CardHeader>\n          <CardTitle>Offer Details</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Offer Title *</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"e.g., Premium Fitness App Affiliate Program\"\n                maxLength={100}\n                data-testid=\"input-title\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"productName\">Product Name *</Label>\n              <Input\n                id=\"productName\"\n                value={formData.productName}\n                onChange={(e) => setFormData({ ...formData, productName: e.target.value })}\n                placeholder=\"e.g., FitPro Premium\"\n                data-testid=\"input-product-name\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"shortDescription\">Short Description * (Max 200 characters)</Label>\n              <Textarea\n                id=\"shortDescription\"\n                value={formData.shortDescription}\n                onChange={(e) => setFormData({ ...formData, shortDescription: e.target.value })}\n                placeholder=\"Brief summary for search results and previews...\"\n                maxLength={200}\n                rows={2}\n                data-testid=\"input-short-description\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                {formData.shortDescription.length}/200 characters\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fullDescription\">Full Description *</Label>\n              <Textarea\n                id=\"fullDescription\"\n                value={formData.fullDescription}\n                onChange={(e) => setFormData({ ...formData, fullDescription: e.target.value })}\n                placeholder=\"Detailed description of your offer, target audience, benefits, and what makes it special...\"\n                rows={6}\n                data-testid=\"input-full-description\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"primaryNiche\">Primary Niche *</Label>\n              <Select\n                value={formData.primaryNiche}\n                onValueChange={(value) => setFormData({ ...formData, primaryNiche: value })}\n              >\n                <SelectTrigger id=\"primaryNiche\" data-testid=\"select-primary-niche\">\n                  <SelectValue placeholder=\"Select a niche\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"fitness\">Fitness & Health</SelectItem>\n                  <SelectItem value=\"tech\">Technology & Software</SelectItem>\n                  <SelectItem value=\"beauty\">Beauty & Fashion</SelectItem>\n                  <SelectItem value=\"food\">Food & Cooking</SelectItem>\n                  <SelectItem value=\"gaming\">Gaming</SelectItem>\n                  <SelectItem value=\"finance\">Finance & Investing</SelectItem>\n                  <SelectItem value=\"education\">Education & Learning</SelectItem>\n                  <SelectItem value=\"travel\">Travel & Lifestyle</SelectItem>\n                  <SelectItem value=\"home\">Home & Garden</SelectItem>\n                  <SelectItem value=\"entertainment\">Entertainment</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"productUrl\">Product URL *</Label>\n              <Input\n                id=\"productUrl\"\n                value={formData.productUrl}\n                onChange={(e) => setFormData({ ...formData, productUrl: e.target.value })}\n                placeholder=\"https://yourproduct.com\"\n                data-testid=\"input-product-url\"\n              />\n            </div>\n\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"commissionType\">Commission Type *</Label>\n                <Select\n                  value={formData.commissionType}\n                  onValueChange={(value: any) =>\n                    setFormData({ ...formData, commissionType: value })\n                  }\n                >\n                  <SelectTrigger id=\"commissionType\" data-testid=\"select-commission-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"per_sale\">Per Sale (Percentage)</SelectItem>\n                    <SelectItem value=\"per_lead\">Per Lead (Flat Rate)</SelectItem>\n                    <SelectItem value=\"per_click\">Per Click (CPC)</SelectItem>\n                    <SelectItem value=\"monthly_retainer\">Monthly Retainer</SelectItem>\n                    <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {formData.commissionType === \"per_sale\" ? (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"commissionRate\">Commission Rate (%) *</Label>\n                  <Input\n                    id=\"commissionRate\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={formData.commissionRate}\n                    onChange={(e) =>\n                      setFormData({ ...formData, commissionRate: e.target.value })\n                    }\n                    placeholder=\"e.g., 10\"\n                    data-testid=\"input-commission-rate\"\n                  />\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"commissionAmount\">Commission Amount ($) *</Label>\n                  <Input\n                    id=\"commissionAmount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData.commissionAmount}\n                    onChange={(e) =>\n                      setFormData({ ...formData, commissionAmount: e.target.value })\n                    }\n                    placeholder=\"e.g., 50.00\"\n                    data-testid=\"input-commission-amount\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Status</Label>\n              <Select\n                value={formData.status}\n                onValueChange={(value: any) => setFormData({ ...formData, status: value })}\n              >\n                <SelectTrigger id=\"status\" data-testid=\"select-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"live\">Live</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-muted-foreground\">\n                Draft offers are not visible to creators\n              </p>\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={createOfferMutation.isPending}\n                data-testid=\"button-create-offer\"\n              >\n                {createOfferMutation.isPending ? \"Creating...\" : \"Create Offer\"}\n              </Button>\n              <Link href=\"/company/offers\">\n                <Button type=\"button\" variant=\"outline\" data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n              </Link>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border-card-border bg-muted/50\">\n        <CardContent className=\"p-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            <strong>Note:</strong> After creating your offer, you'll need to upload 6-12\n            promotional videos before it can go live. You can do this from the offer details page.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14933},"client/src/pages/admin-reviews.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Star, Eye, EyeOff, Trash2, FileText, CheckCircle2, AlertCircle } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function AdminReviews() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [selectedReview, setSelectedReview] = useState<any>(null);\n  const [isNoteDialogOpen, setIsNoteDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [adminNote, setAdminNote] = useState(\"\");\n  const [editedReview, setEditedReview] = useState<any>(null);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: reviews = [], isLoading: loadingReviews } = useQuery<any[]>({\n    queryKey: [\"/api/admin/reviews\"],\n    enabled: isAuthenticated,\n  });\n\n  const hideReviewMutation = useMutation({\n    mutationFn: async (reviewId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/reviews/${reviewId}/hide`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reviews\"] });\n      toast({\n        title: \"Success\",\n        description: \"Review hidden successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to hide review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteReviewMutation = useMutation({\n    mutationFn: async (reviewId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/admin/reviews/${reviewId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reviews\"] });\n      toast({\n        title: \"Success\",\n        description: \"Review deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveNoteMutation = useMutation({\n    mutationFn: async ({ reviewId, note }: { reviewId: string; note: string }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/reviews/${reviewId}/note`, { note });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reviews\"] });\n      toast({\n        title: \"Success\",\n        description: \"Admin note saved successfully\",\n      });\n      setIsNoteDialogOpen(false);\n      setAdminNote(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save note\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateReviewMutation = useMutation({\n    mutationFn: async ({ reviewId, updates }: { reviewId: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/admin/reviews/${reviewId}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reviews\"] });\n      toast({\n        title: \"Success\",\n        description: \"Review updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditedReview(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveReviewMutation = useMutation({\n    mutationFn: async (reviewId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/reviews/${reviewId}/approve`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reviews\"] });\n      toast({\n        title: \"Success\",\n        description: \"Review approved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddNote = (review: any) => {\n    setSelectedReview(review);\n    setAdminNote(review.adminNote || \"\");\n    setIsNoteDialogOpen(true);\n  };\n\n  const handleEdit = (review: any) => {\n    setSelectedReview(review);\n    setEditedReview({\n      reviewText: review.reviewText || \"\",\n      overallRating: review.overallRating,\n      paymentSpeedRating: review.paymentSpeedRating,\n      communicationRating: review.communicationRating,\n      offerQualityRating: review.offerQualityRating,\n      supportRating: review.supportRating,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const renderStars = (rating: number) => {\n    return (\n      <div className=\"flex gap-0.5\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-4 w-4 ${\n              star <= rating\n                ? 'fill-yellow-400 text-yellow-400'\n                : 'text-muted-foreground/30'\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (isLoading || loadingReviews) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Review Management</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          View, approve, edit, or delete reviews across the platform\n        </p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card className=\"border-card-border\" data-testid=\"card-total-reviews\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Reviews</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-reviews\">{reviews.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\" data-testid=\"card-hidden-reviews\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Hidden</CardTitle>\n            <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-hidden-reviews\">\n              {reviews.filter((r: any) => r.isHidden).length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\" data-testid=\"card-pending-approval\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Approval</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-pending-approval\">\n              {reviews.filter((r: any) => !r.isApproved).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {reviews.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-12\">\n              <FileText className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No reviews yet</h3>\n              <p className=\"text-muted-foreground\">\n                Reviews will appear here once creators start submitting them\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {reviews.map((review: any) => (\n            <Card \n              key={review.id} \n              className={`border-card-border ${review.isHidden ? 'opacity-50' : ''}`}\n              data-testid={`card-review-${review.id}`}\n            >\n              <CardHeader>\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {renderStars(review.overallRating)}\n                      <span className=\"text-sm text-muted-foreground\">\n                        {new Date(review.createdAt).toLocaleDateString()}\n                      </span>\n                      {review.isHidden && (\n                        <Badge variant=\"secondary\" data-testid={`badge-hidden-${review.id}`}>\n                          <EyeOff className=\"h-3 w-3 mr-1\" />\n                          Hidden\n                        </Badge>\n                      )}\n                      {!review.isApproved && (\n                        <Badge variant=\"outline\" data-testid={`badge-pending-${review.id}`}>\n                          <AlertCircle className=\"h-3 w-3 mr-1\" />\n                          Pending Approval\n                        </Badge>\n                      )}\n                    </div>\n                    <CardTitle className=\"text-base\">Creator ID: {review.creatorId}</CardTitle>\n                    <CardDescription>Company ID: {review.companyId}</CardDescription>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    {!review.isApproved && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => approveReviewMutation.mutate(review.id)}\n                        disabled={approveReviewMutation.isPending}\n                        data-testid={`button-approve-${review.id}`}\n                      >\n                        <CheckCircle2 className=\"h-4 w-4 mr-1\" />\n                        Approve\n                      </Button>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(review)}\n                      data-testid={`button-edit-${review.id}`}\n                    >\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleAddNote(review)}\n                      data-testid={`button-note-${review.id}`}\n                    >\n                      <FileText className=\"h-4 w-4 mr-1\" />\n                      Note\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => hideReviewMutation.mutate(review.id)}\n                      disabled={hideReviewMutation.isPending}\n                      data-testid={`button-hide-${review.id}`}\n                    >\n                      <EyeOff className=\"h-4 w-4 mr-1\" />\n                      {review.isHidden ? 'Hidden' : 'Hide'}\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => {\n                        if (confirm('Are you sure you want to permanently delete this review?')) {\n                          deleteReviewMutation.mutate(review.id);\n                        }\n                      }}\n                      disabled={deleteReviewMutation.isPending}\n                      data-testid={`button-delete-${review.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"text-sm font-medium mb-2\">Review Text:</h4>\n                    <p className=\"text-sm text-muted-foreground\">{review.reviewText || 'No review text'}</p>\n                  </div>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Payment Speed</p>\n                      {renderStars(review.paymentSpeedRating)}\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Communication</p>\n                      {renderStars(review.communicationRating)}\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Offer Quality</p>\n                      {renderStars(review.offerQualityRating)}\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Support</p>\n                      {renderStars(review.supportRating)}\n                    </div>\n                  </div>\n                  {review.companyResponse && (\n                    <div className=\"bg-muted p-3 rounded-md\">\n                      <h4 className=\"text-sm font-medium mb-1\">Company Response:</h4>\n                      <p className=\"text-sm\">{review.companyResponse}</p>\n                    </div>\n                  )}\n                  {review.adminNote && (\n                    <div className=\"bg-primary/5 p-3 rounded-md border border-primary/20\">\n                      <h4 className=\"text-sm font-medium mb-1\">Admin Note:</h4>\n                      <p className=\"text-sm\">{review.adminNote}</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Admin Note Dialog */}\n      <Dialog open={isNoteDialogOpen} onOpenChange={setIsNoteDialogOpen}>\n        <DialogContent data-testid=\"dialog-admin-note\">\n          <DialogHeader>\n            <DialogTitle>Admin Note</DialogTitle>\n            <DialogDescription>\n              Add an internal note about this review (not visible to users)\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"adminNote\">Note</Label>\n              <Textarea\n                id=\"adminNote\"\n                value={adminNote}\n                onChange={(e) => setAdminNote(e.target.value)}\n                placeholder=\"Add your internal note here...\"\n                rows={4}\n                data-testid=\"textarea-admin-note\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsNoteDialogOpen(false)}\n              data-testid=\"button-cancel-note\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => selectedReview && saveNoteMutation.mutate({ \n                reviewId: selectedReview.id, \n                note: adminNote \n              })}\n              disabled={saveNoteMutation.isPending}\n              data-testid=\"button-save-note\"\n            >\n              Save Note\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Review Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-edit-review\">\n          <DialogHeader>\n            <DialogTitle>Edit Review</DialogTitle>\n            <DialogDescription>\n              Modify the review content and ratings\n            </DialogDescription>\n          </DialogHeader>\n          {editedReview && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"reviewText\">Review Text</Label>\n                <Textarea\n                  id=\"reviewText\"\n                  value={editedReview.reviewText}\n                  onChange={(e) => setEditedReview({ ...editedReview, reviewText: e.target.value })}\n                  placeholder=\"Review text...\"\n                  rows={4}\n                  data-testid=\"textarea-review-text\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Overall Rating: {editedReview.overallRating}</Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"5\"\n                    value={editedReview.overallRating}\n                    onChange={(e) => setEditedReview({ ...editedReview, overallRating: parseInt(e.target.value) })}\n                    className=\"w-full\"\n                    data-testid=\"input-overall-rating\"\n                  />\n                </div>\n                <div>\n                  <Label>Payment Speed: {editedReview.paymentSpeedRating}</Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"5\"\n                    value={editedReview.paymentSpeedRating}\n                    onChange={(e) => setEditedReview({ ...editedReview, paymentSpeedRating: parseInt(e.target.value) })}\n                    className=\"w-full\"\n                    data-testid=\"input-payment-speed-rating\"\n                  />\n                </div>\n                <div>\n                  <Label>Communication: {editedReview.communicationRating}</Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"5\"\n                    value={editedReview.communicationRating}\n                    onChange={(e) => setEditedReview({ ...editedReview, communicationRating: parseInt(e.target.value) })}\n                    className=\"w-full\"\n                    data-testid=\"input-communication-rating\"\n                  />\n                </div>\n                <div>\n                  <Label>Offer Quality: {editedReview.offerQualityRating}</Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"5\"\n                    value={editedReview.offerQualityRating}\n                    onChange={(e) => setEditedReview({ ...editedReview, offerQualityRating: parseInt(e.target.value) })}\n                    className=\"w-full\"\n                    data-testid=\"input-offer-quality-rating\"\n                  />\n                </div>\n                <div>\n                  <Label>Support: {editedReview.supportRating}</Label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"5\"\n                    value={editedReview.supportRating}\n                    onChange={(e) => setEditedReview({ ...editedReview, supportRating: parseInt(e.target.value) })}\n                    className=\"w-full\"\n                    data-testid=\"input-support-rating\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsEditDialogOpen(false)}\n              data-testid=\"button-cancel-edit\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => selectedReview && editedReview && updateReviewMutation.mutate({\n                reviewId: selectedReview.id,\n                updates: { ...editedReview, isEdited: true }\n              })}\n              disabled={updateReviewMutation.isPending}\n              data-testid=\"button-save-edit\"\n            >\n              Save Changes\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":20562},"client/src/pages/admin-companies.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Building2, CheckCircle2, XCircle } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function AdminCompanies() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [selectedCompany, setSelectedCompany] = useState<any>(null);\n  const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false);\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: companies = [], isLoading: loadingCompanies } = useQuery<any[]>({\n    queryKey: [\"/api/admin/companies\"],\n    enabled: isAuthenticated,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (companyId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/companies/${companyId}/approve`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company approved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ companyId, reason }: { companyId: string; reason: string }) => {\n      const response = await apiRequest(\"POST\", `/api/admin/companies/${companyId}/reject`, { reason });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company rejected\",\n      });\n      setIsRejectDialogOpen(false);\n      setRejectionReason(\"\");\n      setSelectedCompany(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReject = (company: any) => {\n    setSelectedCompany(company);\n    setIsRejectDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Company Approvals</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Review and approve companies to join the platform\n        </p>\n      </div>\n\n      {loadingCompanies ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-pulse text-lg text-muted-foreground\">\n            Loading companies...\n          </div>\n        </div>\n      ) : companies.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <CheckCircle2 className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">All caught up!</h3>\n            <p className=\"text-sm text-muted-foreground text-center max-w-md\">\n              No pending companies to review at this time\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {companies.map((company: any) => (\n            <Card key={company.id} className=\"border-card-border\" data-testid={`card-company-${company.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between gap-2\">\n                  <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-center w-10 h-10 rounded-lg bg-primary/10 shrink-0\">\n                      <Building2 className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle className=\"text-lg line-clamp-1\">{company.legalName}</CardTitle>\n                      <Badge \n                        variant={company.status === 'approved' ? 'default' : 'secondary'}\n                        className=\"mt-2\"\n                        data-testid={`badge-status-${company.id}`}\n                      >\n                        {company.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {company.websiteUrl && (\n                  <div>\n                    <div className=\"text-xs text-muted-foreground mb-1\">Website</div>\n                    <a \n                      href={company.websiteUrl} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-sm text-primary hover:underline break-all\"\n                      data-testid={`link-website-${company.id}`}\n                    >\n                      {company.websiteUrl}\n                    </a>\n                  </div>\n                )}\n                \n                {company.description && (\n                  <div>\n                    <div className=\"text-xs text-muted-foreground mb-1\">Description</div>\n                    <p className=\"text-sm line-clamp-3\">{company.description}</p>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-2 pt-3 border-t\">\n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    className=\"gap-2\"\n                    onClick={() => approveMutation.mutate(company.id)}\n                    disabled={approveMutation.isPending || company.status === 'approved'}\n                    data-testid={`button-approve-${company.id}`}\n                  >\n                    <CheckCircle2 className=\"h-4 w-4\" />\n                    Approve\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"gap-2\"\n                    onClick={() => handleReject(company)}\n                    disabled={rejectMutation.isPending || company.status === 'rejected'}\n                    data-testid={`button-reject-${company.id}`}\n                  >\n                    <XCircle className=\"h-4 w-4\" />\n                    Reject\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Rejection Dialog */}\n      <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}>\n        <DialogContent data-testid=\"dialog-reject-company\">\n          <DialogHeader>\n            <DialogTitle>Reject Company</DialogTitle>\n            <DialogDescription>\n              Provide a reason for rejecting this company registration\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reason\">Rejection Reason</Label>\n              <Textarea\n                id=\"reason\"\n                placeholder=\"Enter reason for rejection...\"\n                value={rejectionReason}\n                onChange={(e) => setRejectionReason(e.target.value)}\n                className=\"min-h-[100px]\"\n                data-testid=\"textarea-rejection-reason\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsRejectDialogOpen(false);\n                setRejectionReason(\"\");\n                setSelectedCompany(null);\n              }}\n              data-testid=\"button-cancel-reject\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => {\n                if (selectedCompany && rejectionReason.trim()) {\n                  rejectMutation.mutate({ \n                    companyId: selectedCompany.id, \n                    reason: rejectionReason \n                  });\n                }\n              }}\n              disabled={!rejectionReason.trim() || rejectMutation.isPending}\n              data-testid=\"button-confirm-reject\"\n            >\n              {rejectMutation.isPending ? \"Rejecting...\" : \"Reject Company\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":9617},"client/src/pages/company-offer-detail.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, DollarSign, Users, Eye, Calendar, Upload, Trash2, Video, AlertCircle } from \"lucide-react\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function CompanyOfferDetail() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, params] = useRoute(\"/company/offers/:id\");\n  const offerId = params?.id;\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: offer, isLoading: offerLoading } = useQuery<any>({\n    queryKey: [`/api/offers/${offerId}`],\n    enabled: !!offerId && isAuthenticated,\n  });\n\n  const { data: applications = [] } = useQuery<any[]>({\n    queryKey: [\"/api/company/applications\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: videos = [], isLoading: videosLoading } = useQuery<any[]>({\n    queryKey: [`/api/offers/${offerId}/videos`],\n    enabled: !!offerId && isAuthenticated,\n  });\n\n  // Filter applications for this offer\n  const offerApplications = applications.filter((app: any) => app.offerId === offerId);\n\n  // Video upload state\n  const [showVideoDialog, setShowVideoDialog] = useState(false);\n  const [videoUrl, setVideoUrl] = useState(\"\");\n  const [videoTitle, setVideoTitle] = useState(\"\");\n  const [videoDescription, setVideoDescription] = useState(\"\");\n  const [creatorCredit, setCreatorCredit] = useState(\"\");\n  const [originalPlatform, setOriginalPlatform] = useState(\"\");\n\n  const createVideoMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", `/api/offers/${offerId}/videos`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/offers/${offerId}/videos`] });\n      setShowVideoDialog(false);\n      setVideoUrl(\"\");\n      setVideoTitle(\"\");\n      setVideoDescription(\"\");\n      setCreatorCredit(\"\");\n      setOriginalPlatform(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Video added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add video\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteVideoMutation = useMutation({\n    mutationFn: async (videoId: string) => {\n      return await apiRequest(\"DELETE\", `/api/offer-videos/${videoId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/offers/${offerId}/videos`] });\n      toast({\n        title: \"Success\",\n        description: \"Video deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete video\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetUploadUrl = async () => {\n    const response = await fetch(\"/api/objects/upload\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: any) => {\n    if (result.successful && result.successful[0]) {\n      const uploadedUrl = result.successful[0].uploadURL.split(\"?\")[0];\n      setVideoUrl(uploadedUrl);\n    }\n  };\n\n  const handleSubmitVideo = () => {\n    if (!videoUrl || !videoTitle) {\n      toast({\n        title: \"Error\",\n        description: \"Video URL and title are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createVideoMutation.mutate({\n      videoUrl,\n      title: videoTitle,\n      description: videoDescription,\n      creatorCredit,\n      originalPlatform,\n    });\n  };\n\n  const videoCount = videos.length;\n  const canAddMoreVideos = videoCount < 12;\n  const hasMinimumVideos = videoCount >= 6;\n\n  if (isLoading || offerLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!offer) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen gap-4\">\n        <h2 className=\"text-2xl font-bold\">Offer not found</h2>\n        <Link href=\"/company/offers\">\n          <Button>Back to My Offers</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/company/offers\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n        </Link>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold\">{offer.title}</h1>\n          <p className=\"text-muted-foreground mt-1\">{offer.productName}</p>\n        </div>\n        <Badge\n          variant={offer.status === 'approved' ? 'default' : 'secondary'}\n          data-testid=\"badge-status\"\n        >\n          {offer.status}\n        </Badge>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Applications</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{offerApplications.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">View Count</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{offer.viewCount || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Commission</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {offer.commissionPercentage ? `${offer.commissionPercentage}%` : \n               offer.commissionAmount ? `$${offer.commissionAmount}` : 'N/A'}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Created</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-sm font-bold\">\n              {new Date(offer.createdAt).toLocaleDateString()}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Offer Details</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <h3 className=\"font-semibold mb-2\">Short Description</h3>\n            <p className=\"text-muted-foreground\">{offer.shortDescription}</p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-2\">Full Description</h3>\n            <p className=\"text-muted-foreground whitespace-pre-wrap\">{offer.fullDescription}</p>\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Primary Niche</h3>\n              <Badge variant=\"outline\">{offer.primaryNiche}</Badge>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-2\">Commission Type</h3>\n              <Badge variant=\"outline\">{offer.commissionType?.replace(/_/g, ' ')}</Badge>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-2\">Product URL</h3>\n            <a \n              href={offer.productUrl} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-primary hover:underline\"\n            >\n              {offer.productUrl}\n            </a>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Video className=\"h-5 w-5\" />\n            Promotional Videos\n          </CardTitle>\n          <CardDescription>\n            Upload 6-12 videos showcasing your product. Videos help creators understand and promote your offer.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {!hasMinimumVideos && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                You need at least 6 videos to publish this offer. Currently: {videoCount}/6\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              {videoCount} of 12 videos uploaded\n            </div>\n            <Button\n              onClick={() => setShowVideoDialog(true)}\n              disabled={!canAddMoreVideos || createVideoMutation.isPending}\n              data-testid=\"button-add-video\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Add Video\n            </Button>\n          </div>\n\n          {videosLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading videos...</div>\n          ) : videos.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No videos uploaded yet. Add your first video to get started.\n            </div>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {videos.map((video: any) => (\n                <Card key={video.id} className=\"overflow-hidden\">\n                  <CardContent className=\"p-4 space-y-2\">\n                    <div className=\"aspect-video bg-muted rounded-md flex items-center justify-center\">\n                      <Video className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-sm line-clamp-1\" data-testid={`text-video-title-${video.id}`}>\n                        {video.title}\n                      </h4>\n                      {video.description && (\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                          {video.description}\n                        </p>\n                      )}\n                      {video.creatorCredit && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Credit: {video.creatorCredit}\n                        </p>\n                      )}\n                    </div>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"w-full\"\n                      onClick={() => deleteVideoMutation.mutate(video.id)}\n                      disabled={deleteVideoMutation.isPending}\n                      data-testid={`button-delete-video-${video.id}`}\n                    >\n                      <Trash2 className=\"h-3 w-3 mr-2\" />\n                      Delete\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={showVideoDialog} onOpenChange={setShowVideoDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Add Promotional Video</DialogTitle>\n            <DialogDescription>\n              Upload a video that showcases your product or service\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Video File</Label>\n              <div className=\"mt-2\">\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={524288000}\n                  onGetUploadParameters={handleGetUploadUrl}\n                  onComplete={handleUploadComplete}\n                >\n                  {videoUrl ? \"Video Uploaded ✓\" : \"Upload Video\"}\n                </ObjectUploader>\n              </div>\n              {videoUrl && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Video uploaded successfully\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"video-title\">Title *</Label>\n              <Input\n                id=\"video-title\"\n                value={videoTitle}\n                onChange={(e) => setVideoTitle(e.target.value)}\n                placeholder=\"e.g., Product Demo\"\n                data-testid=\"input-video-title\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"video-description\">Description</Label>\n              <Textarea\n                id=\"video-description\"\n                value={videoDescription}\n                onChange={(e) => setVideoDescription(e.target.value)}\n                placeholder=\"Brief description of the video\"\n                rows={3}\n                data-testid=\"input-video-description\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"creator-credit\">Creator Credit</Label>\n              <Input\n                id=\"creator-credit\"\n                value={creatorCredit}\n                onChange={(e) => setCreatorCredit(e.target.value)}\n                placeholder=\"e.g., @username\"\n                data-testid=\"input-creator-credit\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"original-platform\">Original Platform</Label>\n              <Input\n                id=\"original-platform\"\n                value={originalPlatform}\n                onChange={(e) => setOriginalPlatform(e.target.value)}\n                placeholder=\"e.g., TikTok, Instagram, YouTube\"\n                data-testid=\"input-original-platform\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowVideoDialog(false)}\n              data-testid=\"button-cancel-video\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSubmitVideo}\n              disabled={!videoUrl || !videoTitle || createVideoMutation.isPending}\n              data-testid=\"button-submit-video\"\n            >\n              {createVideoMutation.isPending ? \"Adding...\" : \"Add Video\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {offerApplications.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Applications</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {offerApplications.slice(0, 5).map((app: any) => (\n                <div key={app.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-md\">\n                  <div>\n                    <p className=\"font-medium\">{app.creatorName || 'Creator'}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {new Date(app.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <Badge variant={app.status === 'approved' ? 'default' : 'secondary'}>\n                    {app.status}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n            {offerApplications.length > 5 && (\n              <Link href=\"/company/applications\">\n                <Button variant=\"outline\" className=\"w-full mt-4\" data-testid=\"button-view-all\">\n                  View All Applications\n                </Button>\n              </Link>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":17296},"client/src/pages/admin-offers.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, CheckCircle2, XCircle, DollarSign } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function AdminOffers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: offers = [], isLoading: loadingOffers } = useQuery<any[]>({\n    queryKey: [\"/api/admin/offers\"],\n    enabled: isAuthenticated,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (offerId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/offers/${offerId}/approve`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/offers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Offer approved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve offer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (offerId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/offers/${offerId}/reject`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/offers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Offer rejected\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject offer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Offer Approvals</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Review and approve affiliate offers\n        </p>\n      </div>\n\n      {loadingOffers ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-pulse text-lg text-muted-foreground\">\n            Loading offers...\n          </div>\n        </div>\n      ) : offers.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <CheckCircle2 className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">All caught up!</h3>\n            <p className=\"text-sm text-muted-foreground text-center max-w-md\">\n              No pending offers to review at this time\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {offers.map((offer: any) => (\n            <Card key={offer.id} className=\"border-card-border\" data-testid={`card-offer-${offer.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between gap-2\">\n                  <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-center w-10 h-10 rounded-lg bg-primary/10 shrink-0\">\n                      <TrendingUp className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle className=\"text-lg line-clamp-1\">{offer.title}</CardTitle>\n                      <div className=\"flex items-center gap-2 mt-2\">\n                        <Badge \n                          variant={offer.status === 'approved' ? 'default' : 'secondary'}\n                          data-testid={`badge-status-${offer.id}`}\n                        >\n                          {offer.status}\n                        </Badge>\n                        {offer.primaryNiche && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {offer.primaryNiche}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                  {offer.shortDescription || offer.description || \"No description\"}\n                </p>\n                \n                {offer.productUrl && (\n                  <div>\n                    <div className=\"text-xs text-muted-foreground mb-1\">Product URL</div>\n                    <a \n                      href={offer.productUrl} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-xs text-primary hover:underline break-all\"\n                      data-testid={`link-product-${offer.id}`}\n                    >\n                      {offer.productUrl}\n                    </a>\n                  </div>\n                )}\n\n                <div className=\"flex items-center gap-4 pt-3 border-t\">\n                  <div>\n                    <div className=\"text-xs text-muted-foreground mb-1\">Commission</div>\n                    <div className=\"text-sm font-semibold flex items-center gap-1\">\n                      <DollarSign className=\"h-3 w-3\" />\n                      {offer.commissionPercentage || offer.commissionAmount || offer.commissionRate || 0}\n                      {offer.commissionType === 'per_sale' && '%'}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-muted-foreground mb-1\">Type</div>\n                    <div className=\"text-sm\">\n                      {offer.commissionType?.replace(/_/g, ' ') || 'N/A'}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-2 pt-3 border-t\">\n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    className=\"gap-2\"\n                    onClick={() => approveMutation.mutate(offer.id)}\n                    disabled={approveMutation.isPending || offer.status === 'approved'}\n                    data-testid={`button-approve-${offer.id}`}\n                  >\n                    <CheckCircle2 className=\"h-4 w-4\" />\n                    Approve\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"gap-2\"\n                    onClick={() => rejectMutation.mutate(offer.id)}\n                    disabled={rejectMutation.isPending || offer.status === 'rejected'}\n                    data-testid={`button-reject-${offer.id}`}\n                  >\n                    <XCircle className=\"h-4 w-4\" />\n                    Reject\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7941},"REQUIREMENTS_COMPLIANCE_REPORT.md":{"content":"# CreatorLink Requirements Compliance Report\n*Generated: October 22, 2025*\n\n## Executive Summary\n\nThis report evaluates the CreatorLink platform against the comprehensive development checklist requirements, excluding mobile app development as requested.\n\n**Overall Compliance**: ~75% (Estimated)\n- **Fully Implemented**: Core functionality, authentication, database, tracking, messaging, admin features\n- **Partially Implemented**: Payment processing, video upload requirements, filtering\n- **Not Implemented**: Email notifications, advanced analytics, some admin features\n\n---\n\n## ✅ FULLY IMPLEMENTED SECTIONS\n\n### 1. Technical Infrastructure (90%)\n\n#### ✅ Backend Architecture\n- [x] Express.js backend with TypeScript\n- [x] Development, staging, and production environment support (via Replit)\n- [x] PostgreSQL database (Neon serverless)\n- [x] Custom session-based authentication (Passport Local Strategy)\n- [x] Real-time messaging (WebSocket with ws library)\n- [x] HTTPS/SSL certificates (via Replit platform)\n- [x] Rate limiting capabilities\n- [x] Role-based access control middleware\n\n#### ✅ Database Implementation\n- [x] Users table (with username, email, password, role)\n- [x] Creators table (creator_profiles)\n- [x] Companies table (company_profiles)\n- [x] Offers table\n- [x] ExampleVideos table (offer_videos)\n- [x] Applications table\n- [x] TrackingLinks (via trackingCode in applications)\n- [x] ClickEvents table (click_events)\n- [x] Messages table\n- [x] Conversations table\n- [x] Reviews table\n- [x] Transactions table (payments)\n- [x] Favorites table\n- [x] Analytics table (aggregated from click_events)\n- [x] PaymentSettings table\n- [x] Database indexes for performance\n- [x] Automatic backups (via Neon)\n\n#### ✅ Video Storage & CDN\n- [x] Google Cloud Storage integration\n- [x] Custom ACL system for access control\n- [x] Video URL storage in database\n- [x] Object storage service implementation\n\n---\n\n### 2. User Authentication & Roles (100%)\n\n#### ✅ Authentication System\n- [x] User registration endpoint\n- [x] Login endpoint  \n- [x] Logout endpoint\n- [x] Password hashing with bcrypt (10 rounds)\n- [x] Session management via PostgreSQL\n- [x] Email as username\n- [x] Custom username support\n- [ ] Forgot password flow (NOT IMPLEMENTED)\n- [ ] Reset password flow (NOT IMPLEMENTED)\n- [ ] Email verification (NOT IMPLEMENTED)\n- [ ] Two-factor authentication (NOT IMPLEMENTED)\n\n#### ✅ Role-Based Access Control\n- [x] Creator role permissions defined\n- [x] Company role permissions defined\n- [x] Admin role permissions defined\n- [x] Middleware for role checking (`requireRole`)\n- [x] Access control tested across endpoints\n\n---\n\n### 3. Creator Features (85%)\n\n#### ✅ Registration & Profile\n- [x] Creator registration form\n- [x] Role selection during registration\n- [x] Creator profile page\n- [x] Social media links integration (YouTube, TikTok, Instagram)\n- [x] Follower count display\n- [x] Profile editing\n- [x] Avatar upload functionality (via object storage)\n- [x] Bio section\n- [x] Preferred niches selection\n- [ ] Email verification (NOT IMPLEMENTED)\n\n#### ✅ Browse & Discovery\n- [x] Home screen with offer browsing\n- [x] Offer card layout\n- [x] Filter system:\n  - [x] Niche/Category (multi-select)\n  - [x] Commission Type dropdown\n  - [x] Commission Range slider (implemented but needs server-side support)\n  - [ ] Minimum Payout slider (NOT IMPLEMENTED)\n  - [ ] Company Rating filter (NOT IMPLEMENTED)\n  - [ ] Trending toggle (sort option exists)\n  - [ ] Priority Listings badge (exists in schema, not filtering)\n- [x] Sort options (Newest, Highest Commission, Most Popular, Trending)\n- [x] Search functionality\n- [ ] Pagination/infinite scroll (basic loading, not paginated)\n\n#### ✅ Offer Detail Page\n- [x] Display company logo and name\n- [x] Show product/service description\n- [x] Display niche tags\n- [x] Show commission structure clearly\n- [x] Display payment schedule\n- [x] List requirements (followers, content style, geo restrictions)\n- [x] Embed example videos with player\n- [x] Show video metadata\n- [ ] Display company rating (NOT IMPLEMENTED - no rating aggregation)\n- [ ] Show number of active creators (NOT IMPLEMENTED)\n- [x] \"Apply Now\" button\n- [x] \"Save to Favorites\" icon\n\n#### ✅ Application System\n- [x] Application modal/form\n- [x] \"Why interested?\" text field\n- [x] Preferred commission model dropdown\n- [x] Terms checkbox\n- [x] Submit functionality\n- [x] Success message after submission\n- [x] **CRITICAL: 7-minute auto-approval workflow** ✅\n- [x] Generate unique tracking link upon approval\n- [x] Display tracking link in app\n- [x] Add instructions for using link\n- [ ] Push notification on approval (NOT IMPLEMENTED)\n- [ ] Email with tracking link (NOT IMPLEMENTED)\n\n#### ✅ My Applications Dashboard\n- [x] List view of all applications\n- [x] Status indicators (Pending, Approved, Rejected, Active, Completed)\n- [x] Quick actions (Message Company, Copy Link, View Analytics)\n- [x] Filtering by status\n- [ ] Application timeline (NOT IMPLEMENTED)\n\n#### ✅ Analytics Dashboard\n- [x] Per-offer metrics:\n  - [x] Link clicks (total, unique)\n  - [x] Conversions (schema exists, UI implemented)\n  - [x] Earnings (total, pending, paid)\n  - [x] CTR (calculated)\n- [x] Clicks over time graph (7d, 30d, 90d, all-time)\n- [ ] Top performing content (NOT IMPLEMENTED)\n- [x] Overall stats:\n  - [x] Total earnings\n  - [x] Active offers\n  - [x] Total clicks\n  - [ ] Average commission (NOT IMPLEMENTED)\n  - [ ] Payment history (schema exists, UI not implemented)\n- [x] Date range selector\n- [ ] Export functionality (NOT IMPLEMENTED)\n\n#### ✅ Messaging\n- [x] Thread-based conversation UI\n- [x] Restrict creator messaging to applied companies only\n- [x] Real-time notifications (WebSocket)\n- [x] Image attachment support (schema exists)\n- [ ] Company response time indicator (NOT IMPLEMENTED)\n- [x] Prevent creator-to-creator messaging\n- [x] Read receipts (implemented with double-check marks)\n- [x] Typing indicators\n- [x] Connection status display\n- [x] Message grouping\n- [x] Date separators\n- [x] Sound notifications (optional, with toggle)\n\n#### ✅ Favorites\n- [x] Heart icon to save offers\n- [x] \"Saved\" tab/page\n- [x] Remove from favorites option\n- [ ] Sorting (Date Added, Commission, Category) (NOT IMPLEMENTED)\n\n#### ✅ Reviews & Ratings\n- [x] 5-star rating interface\n- [x] Text review field\n- [x] Category ratings (Payment Speed, Communication, Offer Quality, Support)\n- [x] Display reviews on company profile\n- [ ] Display reviews on offer pages (NOT IMPLEMENTED)\n- [ ] Prompt for review after campaign completion (NOT IMPLEMENTED)\n\n---\n\n### 4. Company Features (80%)\n\n#### ✅ Registration & Onboarding\n- [x] **CRITICAL: Manual approval - NO auto-approval** ✅\n- [x] Multi-step registration form:\n  - [x] Company information section\n  - [x] Contact information section\n  - [x] Verification documents upload\n  - [ ] Initial offer preview (NOT IMPLEMENTED)\n- [x] Email verification (account created, but no email sent)\n- [ ] Website verification (Meta tag/DNS TXT) (NOT IMPLEMENTED)\n- [x] Admin approval workflow\n- [ ] Approval notification emails (NOT IMPLEMENTED)\n- [ ] Rejection notification with reason (NOT IMPLEMENTED)\n- [ ] Re-application after 30 days (NOT IMPLEMENTED)\n- [x] Show registration status in dashboard\n\n#### ⚠️ Payment Setup (Schema Only - UI NOT IMPLEMENTED)\n- [x] Payment settings table exists\n- [x] API endpoints for payment settings\n- [ ] Payment setup page UI (NOT IMPLEMENTED)\n- [ ] Payout method selection UI (NOT IMPLEMENTED)\n- [ ] Tax information collection (NOT IMPLEMENTED)\n- [ ] Multiple payout methods (schema supports, UI missing)\n- [ ] Encrypted payment information (needs implementation)\n\n#### ⚠️ Create Offer (PARTIAL)\n- [x] Offer creation form with:\n  - [x] Basic Information section\n  - [x] Commission Structure section (Per-Action OR Monthly Retainer)\n  - [x] Creator Requirements section\n  - [ ] **CRITICAL: Example Videos section (6-12 required)** ⚠️ MISSING UI\n  - [x] Terms & Conditions section\n- [x] Rich text editor for descriptions (textarea)\n- [x] Niche selection (primary + additional)\n- [x] Commission calculator for different types\n- [x] Allow multiple retainer tiers\n- [ ] **CRITICAL: Enforce 6-12 video requirement** ❌ NOT ENFORCED IN UI\n- [ ] Video upload from device (MISSING UI)\n- [ ] Video URL embedding (schema supports, UI missing)\n- [ ] Drag-and-drop video reordering (NOT IMPLEMENTED)\n- [ ] Video upload progress (NOT IMPLEMENTED)\n- [ ] Display one-time listing fee (NOT IMPLEMENTED)\n- [ ] Priority listing checkbox (+$199) (NOT IMPLEMENTED)\n- [x] Save draft capability (status: 'draft')\n\n#### ✅ Edit Offer\n- [x] Allow editing description and images\n- [x] Allow commission amount changes\n- [x] Allow requirement updates\n- [ ] Allow adding/removing example videos (UI NOT IMPLEMENTED)\n- [x] Enable/disable applications toggle (via status)\n- [x] Pause offer option\n- [x] Archive offer option\n- [ ] Prevent editing with active retainer contracts (NOT IMPLEMENTED)\n\n#### ✅ Company Analytics Dashboard\n- [x] Metrics overview:\n  - [x] Total active creators\n  - [x] Total applications\n  - [x] Pending applications\n  - [ ] Conversion rate (NOT CALCULATED)\n  - [x] Total link clicks\n  - [ ] Total conversions (schema exists, not aggregated)\n  - [ ] Total creator payouts (NOT CALCULATED)\n  - [ ] ROI calculator (NOT IMPLEMENTED)\n- [x] Per-offer analytics (basic)\n- [x] Creator management interface:\n  - [x] List view with filters\n  - [x] Status indicators\n  - [x] Quick actions (Message, View Analytics)\n  - [ ] Approve Payout (NOT IMPLEMENTED)\n  - [ ] Remove (NOT IMPLEMENTED)\n  - [ ] Bulk actions (NOT IMPLEMENTED)\n- [ ] Graphs:\n  - [ ] Applications over time (NOT IMPLEMENTED)\n  - [ ] Clicks over time (NOT IMPLEMENTED)\n  - [ ] Conversion funnel (NOT IMPLEMENTED)\n  - [ ] Geographic heatmap (data collected, not visualized)\n- [ ] Export options (CSV, PDF) (NOT IMPLEMENTED)\n\n#### ✅ Messaging\n- [x] Messaging interface for companies\n- [x] Allow messaging creators who applied\n- [x] Thread view\n- [x] Support attachments (schema exists)\n- [ ] Canned response templates (NOT IMPLEMENTED)\n- [ ] Mark as resolved option (NOT IMPLEMENTED)\n- [x] Prevent company-to-company messaging\n\n#### ⚠️ Payment Management (Schema Only)\n- [ ] Payout approval system (NOT IMPLEMENTED)\n- [ ] Pending approvals (NOT IMPLEMENTED)\n- [ ] Scheduled payouts (NOT IMPLEMENTED)\n- [ ] Completed payments (NOT IMPLEMENTED)\n- [ ] Disputed payments (NOT IMPLEMENTED)\n- [ ] Dispute resolution interface (NOT IMPLEMENTED)\n\n---\n\n### 5. Super Admin Features (75%)\n\n#### ✅ Dashboard Overview\n- [x] Display total users (partial - not fully implemented)\n- [x] Show new registrations (partial)\n- [x] Display active offers count\n- [x] Show pending approvals queue\n- [ ] Display revenue metrics (NOT IMPLEMENTED)\n- [ ] Platform health status (NOT IMPLEMENTED)\n- [ ] Recent activity feed (NOT IMPLEMENTED)\n\n#### ✅ Company Management\n- [x] Company list table with filters\n- [x] Individual company detail pages (basic)\n- [x] Show verification documents viewer (schema exists)\n- [x] Display all company offers\n- [ ] Show payment history (NOT IMPLEMENTED)\n- [ ] List creator relationships (NOT IMPLEMENTED)\n- [x] Actions:\n  - [x] Approve/Reject registration ✅\n  - [ ] Request additional info (NOT IMPLEMENTED)\n  - [ ] Suspend account (NOT IMPLEMENTED)\n  - [ ] Ban permanently (NOT IMPLEMENTED)\n  - [ ] Edit company details (NOT IMPLEMENTED)\n  - [ ] Refund listing fees (NOT IMPLEMENTED)\n  - [ ] Adjust platform fees per company (NOT IMPLEMENTED)\n\n#### ✅ Offer Management\n- [x] Offer list table with filters\n- [x] Individual offer detail pages\n- [x] Display example videos viewer (basic)\n- [x] Show application stats\n- [x] Display active creators\n- [ ] Show performance metrics (NOT FULLY IMPLEMENTED)\n- [x] Actions:\n  - [x] Approve/Reject offer ✅\n  - [ ] Request edits with notes (NOT IMPLEMENTED)\n  - [ ] Feature on homepage (NOT IMPLEMENTED)\n  - [ ] Remove from platform (NOT IMPLEMENTED)\n  - [ ] Adjust listing fees (NOT IMPLEMENTED)\n\n#### ⚠️ Creator Management\n- [ ] Creator list table (NOT IMPLEMENTED)\n- [ ] Individual creator detail pages (basic profile exists)\n- [ ] Show profile details (partial)\n- [ ] Display application history (NOT IMPLEMENTED)\n- [ ] Show active offers (NOT IMPLEMENTED)\n- [ ] Display earnings history (NOT IMPLEMENTED)\n- [ ] Show reviews given (NOT IMPLEMENTED)\n- [ ] Actions:\n  - [ ] Suspend account (NOT IMPLEMENTED)\n  - [ ] Ban permanently (NOT IMPLEMENTED)\n  - [ ] Adjust payout (NOT IMPLEMENTED)\n  - [ ] Remove reviews (delete exists, not in creator context)\n\n#### ✅ Review Management System\n- [x] **CRITICAL: Review dashboard** ✅\n- [x] Review list table with filters\n- [x] Search by keyword\n- [x] Review actions:\n  - [x] View full review with context ✅\n  - [x] Edit review (rating and text) ✅\n  - [x] Flag as \"Admin Edited\" ✅\n  - [x] Add internal notes ✅\n  - [ ] Add new review on creator's behalf (NOT IMPLEMENTED)\n  - [x] Delete review with reason ✅\n  - [ ] Respond to review as platform (NOT IMPLEMENTED)\n- [ ] Moderation settings:\n  - [ ] Auto-approve toggle (NOT IMPLEMENTED)\n  - [ ] Auto-flag rules (NOT IMPLEMENTED)\n  - [ ] Email notifications for new reviews (NOT IMPLEMENTED)\n\n#### ⚠️ Messaging Oversight\n- [ ] View all conversations (NOT IMPLEMENTED)\n- [ ] Search functionality (NOT IMPLEMENTED)\n- [ ] Flag inappropriate messages (NOT IMPLEMENTED)\n- [ ] Step into conversations (NOT IMPLEMENTED)\n- [ ] Auto-flag banned keywords (NOT IMPLEMENTED)\n- [ ] Export conversation history (NOT IMPLEMENTED)\n\n#### ⚠️ Analytics & Reports\n- [ ] Financial reports (NOT IMPLEMENTED)\n- [ ] User reports (NOT IMPLEMENTED)\n- [ ] Platform health reports (NOT IMPLEMENTED)\n\n#### ⚠️ Configuration Settings\n- [ ] Niche management (NOT IMPLEMENTED)\n- [ ] Fee configuration (NOT IMPLEMENTED)\n- [ ] Automation settings (7-min auto-approval works, but no UI config)\n- [ ] Content moderation (NOT IMPLEMENTED)\n- [ ] Payment processing config (NOT IMPLEMENTED)\n\n---\n\n### 6. Tracking & Analytics System (95%)\n\n#### ✅ Centralized Tracking Infrastructure\n- [x] **CRITICAL: Custom tracking system (NO GA4 per company)** ✅\n- [x] Generate unique tracking links\n- [x] Short link format: `/track/{unique-code}` ✅\n- [x] 8+ character alphanumeric code generator\n- [x] Log all clicks with metadata ✅\n- [ ] GA4 Measurement Protocol integration (NOT IMPLEMENTED)\n- [ ] Segment/Mixpanel integration (NOT IMPLEMENTED)\n- [x] Auto-generate tracking link 7 minutes after application approval ✅\n- [ ] UTM parameters generation (NOT IMPLEMENTED)\n- [ ] QR code generation (NOT IMPLEMENTED)\n- [x] Real-time tracking dashboard (analytics page)\n\n#### ✅ Click Tracking\n- [x] Redirect endpoint (`/track/:code`) ✅\n- [x] Log click events to database ✅\n- [x] Track IP address (normalized) ✅\n- [x] Track user agent ✅\n- [x] Track referrer ✅\n- [x] Track country/location (geoip-lite) ✅\n- [x] Track device type ✅\n- [x] Identify unique clicks (IP + date window) ✅\n- [x] Update click counts ✅\n- [ ] Send event to analytics platform (NOT IMPLEMENTED)\n- [x] Redirect to final destination ✅\n\n#### ⚠️ Conversion Tracking\n- [ ] Postback URL option (NOT IMPLEMENTED)\n- [ ] Pixel tracking option (NOT IMPLEMENTED)\n- [ ] Manual confirmation option (NOT IMPLEMENTED)\n- [x] Store conversion data (schema exists)\n- [x] Link conversions to creators\n- [x] Update conversion metrics in dashboards (partial)\n\n#### ⚠️ Analytics Events\n- [x] Track link_click events ✅\n- [ ] Track offer_view events (NOT IMPLEMENTED)\n- [ ] Track offer_apply events (NOT IMPLEMENTED)\n- [ ] Track conversion events (schema exists, not fully implemented)\n- [ ] Track video_view events (NOT IMPLEMENTED)\n- [ ] Track favorite_add events (NOT IMPLEMENTED)\n- [ ] Track message_sent events (NOT IMPLEMENTED)\n- [ ] Track review_submit events (NOT IMPLEMENTED)\n\n---\n\n### 7. Payment Processing (40%)\n\n#### ⚠️ Payment Infrastructure\n- [x] Payment table schema defined\n- [x] 7% platform fee calculation (in schema, not UI)\n- [ ] Stripe Connect integration (NOT IMPLEMENTED - schema prepared)\n- [x] Company payment method collection (schema only)\n- [x] Creator payout method collection (schema + basic UI)\n- [x] Transaction recording system (createPayment function exists)\n- [ ] Receipt generation (NOT IMPLEMENTED)\n\n#### ⚠️ Payment Workflows\n- [ ] Work completion submission (creator) (NOT IMPLEMENTED)\n- [ ] Approval system (company) (NOT IMPLEMENTED)\n- [ ] Calculate amounts (gross, fees, net) (schema supports, not calculated)\n- [ ] Schedule payments (NOT IMPLEMENTED)\n- [ ] Auto-charge company (NOT IMPLEMENTED)\n- [ ] Handle failed charges (NOT IMPLEMENTED)\n- [ ] Initiate creator payout (NOT IMPLEMENTED)\n- [ ] Confirmation emails (NOT IMPLEMENTED)\n- [ ] Update transaction records (function exists)\n- [ ] Generate tax documents (NOT IMPLEMENTED)\n\n#### ⚠️ Listing Fees\n- [ ] Charge one-time listing fee (NOT IMPLEMENTED)\n- [ ] Charge priority listing fee (+$199) (NOT IMPLEMENTED)\n- [ ] Process refunds (NOT IMPLEMENTED)\n- [ ] Track revenue from listing fees (NOT IMPLEMENTED)\n\n---\n\n### 8. Notification System (10%)\n\n#### ❌ Email Notifications (NOT IMPLEMENTED)\n- [ ] Application status change\n- [ ] New message received\n- [ ] Payment received\n- [ ] Offer approved/rejected\n- [ ] New application (for companies)\n- [ ] Review received\n- [ ] System announcements\n- [ ] Registration approval/rejection\n- [ ] Work completion approval\n- [ ] Priority listing expiration reminder\n\n#### ❌ Push Notifications (NOT IMPLEMENTED)\n- [ ] Application approval\n- [ ] New message\n- [ ] Payment received\n- [ ] New application\n- [ ] Offer approved\n\n#### ⚠️ In-App Notifications (PARTIAL via WebSocket)\n- [x] Real-time message notifications (WebSocket)\n- [ ] Notification center (NOT IMPLEMENTED)\n- [ ] Unread count badge (NOT IMPLEMENTED)\n- [ ] Mark as read functionality (messages only)\n- [ ] Clear all option (NOT IMPLEMENTED)\n- [ ] Link to relevant content (NOT IMPLEMENTED)\n\n---\n\n### 9. Security & Compliance (70%)\n\n#### ✅ Data Protection\n- [x] HTTPS for all communications (via Replit)\n- [x] Hash passwords with bcrypt (10 rounds) ✅\n- [x] Rate limiting capability (infrastructure exists)\n- [x] Sanitize user inputs (Zod validation)\n- [x] Validate file uploads (object storage)\n- [x] CSRF protection (session-based)\n- [x] Input validation on forms (Zod schemas)\n- [ ] Encryption at rest for sensitive data (NOT EXPLICITLY IMPLEMENTED)\n\n#### ❌ Privacy Compliance\n- [ ] GDPR compliance (NOT IMPLEMENTED)\n- [ ] CCPA compliance (NOT IMPLEMENTED)\n- [ ] Data export functionality (NOT IMPLEMENTED)\n- [ ] Account deletion (permanent PII removal) (NOT IMPLEMENTED)\n- [ ] Cookie consent banner (NOT IMPLEMENTED)\n- [ ] Privacy policy page (NOT IMPLEMENTED)\n- [ ] Terms of service page (NOT IMPLEMENTED)\n\n#### ⚠️ Payment Security\n- [ ] PCI DSS compliance (using Stripe would handle this)\n- [x] Never store full credit card numbers (schema doesn't include)\n- [ ] Tokenize payment methods (NOT IMPLEMENTED)\n- [ ] Fraud detection (NOT IMPLEMENTED)\n- [x] Log all financial transactions (schema exists)\n\n#### ⚠️ User Verification\n- [ ] Email verification (NOT IMPLEMENTED)\n- [ ] Phone verification (NOT IMPLEMENTED)\n- [x] Document verification for companies (upload exists, no verification flow)\n- [x] IP logging (click tracking)\n- [ ] Device fingerprinting (NOT IMPLEMENTED)\n\n---\n\n### 10. Automated Workflows (90%)\n\n#### ✅ Creator Application Auto-Approval\n- [x] **CRITICAL: 7-minute auto-approval** ✅\n- [ ] Send immediate confirmation email (NOT IMPLEMENTED)\n- [x] Wait 7 minutes ✅\n- [x] Change status to \"Approved\" ✅\n- [x] Generate unique tracking link ✅\n- [x] Create short code ✅\n- [x] Store in database with application_id ✅\n- [ ] Send approval notification email (NOT IMPLEMENTED)\n- [x] Log event in analytics (partial)\n\n#### ⚠️ Example Video Enforcement\n- [ ] **CRITICAL: Validate 6-12 videos required** ❌ NOT ENFORCED\n- [ ] Show upload count \"X of 12 videos\" (NOT IMPLEMENTED)\n- [ ] Disable submit button if <6 videos (NOT IMPLEMENTED)\n- [ ] Show warning message (NOT IMPLEMENTED)\n- [ ] Confirmation prompt if exactly 6 (NOT IMPLEMENTED)\n- [ ] Block offer submission until requirement met (NOT IMPLEMENTED)\n\n#### ❌ Payment Processing Automation\n- [ ] Calculate all fees automatically (NOT IMPLEMENTED)\n- [ ] Schedule payments (NOT IMPLEMENTED)\n- [ ] Auto-charge companies (NOT IMPLEMENTED)\n- [ ] Auto-payout to creators (NOT IMPLEMENTED)\n- [ ] Retry failed payments (NOT IMPLEMENTED)\n- [ ] Confirmation emails (NOT IMPLEMENTED)\n- [ ] Update transaction records (function exists)\n\n#### ❌ Priority Listing Expiration\n- [ ] Track 30-day priority listing period (NOT IMPLEMENTED)\n- [ ] Send reminder 7 days before expiration (NOT IMPLEMENTED)\n- [ ] Auto-remove priority badge (NOT IMPLEMENTED)\n- [ ] Log event (NOT IMPLEMENTED)\n- [ ] Offer renewal option (NOT IMPLEMENTED)\n\n---\n\n## 🎯 PRE-LAUNCH CRITICAL FEATURES STATUS\n\n### ✅ VERIFIED - Critical Requirements Met\n1. **✅ Manual company approval working (NO auto-approval)** - CONFIRMED\n2. **✅ 7-minute auto-approval for creators with tracking link** - CONFIRMED\n3. **✅ Centralized tracking working (no GA4 per company)** - CONFIRMED\n4. **✅ In-app messaging restricted correctly** - CONFIRMED\n5. **✅ Super admin review management functional** - CONFIRMED\n6. **✅ Retainer commission option available** - CONFIRMED in schema\n\n### ⚠️ PARTIALLY MET - Needs Attention\n7. **⚠️ 6-12 example videos enforced per offer** - Schema exists, UI NOT ENFORCED\n8. **⚠️ Detailed company analytics working** - Basic analytics exist, not detailed\n9. **⚠️ 7% platform fee calculated correctly** - Schema defined, not implemented in UI\n\n### ❌ NOT MET - Missing Critical Features\n10. **❌ Priority listing option available** - Schema exists, no UI or payment flow\n\n---\n\n## 📊 SUMMARY BY CATEGORY\n\n| Category | Implemented | Partial | Not Implemented | Completion % |\n|----------|-------------|---------|-----------------|--------------|\n| Technical Infrastructure | 18 | 2 | 4 | 85% |\n| User Authentication | 8 | 0 | 4 | 67% |\n| Creator Features | 42 | 8 | 15 | 75% |\n| Company Features | 28 | 6 | 24 | 62% |\n| Admin Features | 20 | 3 | 22 | 51% |\n| Tracking & Analytics | 19 | 2 | 10 | 68% |\n| Payment Processing | 6 | 0 | 20 | 23% |\n| Notifications | 2 | 0 | 20 | 9% |\n| Security & Compliance | 11 | 5 | 13 | 55% |\n| Automated Workflows | 8 | 0 | 11 | 42% |\n\n---\n\n## 🚨 CRITICAL GAPS REQUIRING IMMEDIATE ATTENTION\n\n### 1. **VIDEO UPLOAD REQUIREMENT ENFORCEMENT** (High Priority)\n**Issue**: Companies can create offers without uploading 6-12 required videos\n**Impact**: Violates core business requirement\n**Recommendation**: \n- Add video upload UI to company-offer-detail.tsx\n- Enforce 6-12 video count validation\n- Block offer approval until videos are uploaded\n- Add video management interface (upload, delete, reorder)\n\n### 2. **PAYMENT PROCESSING** (High Priority)\n**Issue**: No functional payment system despite schema being ready\n**Impact**: Platform cannot monetize or pay creators\n**Recommendation**:\n- Implement Stripe Connect integration\n- Build payment UI for companies and creators\n- Add listing fee collection ($499 + optional $199 priority)\n- Implement 7% platform fee calculation and collection\n- Build payout workflow\n\n### 3. **EMAIL NOTIFICATIONS** (Medium Priority)\n**Issue**: Zero email notifications implemented\n**Impact**: Users miss critical updates\n**Recommendation**:\n- Integrate SendGrid or Mailgun\n- Implement key notifications (application status, approvals, messages)\n- Add email templates\n\n### 4. **PRIORITY LISTING FEATURE** (Medium Priority)\n**Issue**: Schema exists but no UI or payment flow\n**Impact**: Missing revenue opportunity\n**Recommendation**:\n- Add priority listing checkbox to offer creation\n- Implement $199 additional fee\n- Add featured badge and prominence in browse page\n\n### 5. **ADVANCED FILTERING** (Low Priority)\n**Issue**: Some filters are client-side only\n**Impact**: Poor performance with large datasets\n**Recommendation**:\n- Move all filtering to server-side\n- Add missing filters (minimum payout, company rating, trending)\n- Implement pagination\n\n---\n\n## 💡 RECOMMENDATIONS\n\n### Immediate Actions (Next Sprint)\n1. **Implement video upload enforcement** - Blocks offer approval until 6-12 videos uploaded\n2. **Build payment collection UI** - At minimum, collect listing fees\n3. **Add email notifications** - Priority: application approvals, offer status changes\n4. **Complete priority listing feature** - Quick revenue opportunity\n\n### Short-term (1-2 Sprints)\n1. **Enhance analytics dashboards** - Add missing metrics and graphs\n2. **Build creator management for admin** - User list, suspend/ban capabilities\n3. **Implement conversion tracking** - Postback URLs or pixel tracking\n4. **Add data export** - CSV/PDF exports for analytics\n\n### Medium-term (2-3 Months)\n1. **Full Stripe Connect integration** - Automated payouts to creators\n2. **Email verification** - Improve security and reduce spam\n3. **Privacy compliance** - GDPR/CCPA, cookie consent, privacy policy\n4. **Advanced admin features** - Platform health, financial reports\n\n---\n\n## ✅ STRENGTHS OF CURRENT IMPLEMENTATION\n\n1. **✅ Solid Technical Foundation** - Well-architected backend with proper separation of concerns\n2. **✅ Comprehensive Database Schema** - All required tables exist with proper relationships\n3. **✅ Excellent Click Tracking** - Industry-grade tracking with geo-location and device detection\n4. **✅ Real-time Messaging** - Production-ready WebSocket implementation with typing indicators\n5. **✅ Admin Review Management** - Complete CRUD with audit trails and security\n6. **✅ Auto-approval Workflow** - Reliable 7-minute auto-approval system\n7. **✅ Role-based Access Control** - Secure middleware protecting all routes\n8. **✅ Company Manual Approval** - Proper vetting workflow implemented\n\n---\n\n## 🎯 CONCLUSION\n\nThe CreatorLink platform has achieved approximately **75% of the MVP requirements**, with excellent implementation of:\n- Core infrastructure and database\n- Authentication and authorization\n- Click tracking and analytics foundation\n- Real-time messaging\n- Application workflows\n- Admin review management\n\n**Critical gaps** exist in:\n- Video upload enforcement (blocks business requirement)\n- Payment processing (blocks monetization)\n- Email notifications (reduces user engagement)\n- Advanced analytics (limits business insights)\n\n**Priority recommendation**: Focus immediately on video upload enforcement and basic payment collection to meet the core business model requirements before public launch.\n","size_bytes":26685},"client/src/pages/company-retainer-detail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DollarSign,\n  Video,\n  Calendar,\n  Check,\n  X,\n  ArrowLeft,\n  ExternalLink,\n  User,\n  Play,\n  AlertCircle,\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport default function CompanyRetainerDetail() {\n  const [, params] = useRoute(\"/company/retainers/:id\");\n  const { toast } = useToast();\n  const contractId = params?.id;\n  const [reviewNotes, setReviewNotes] = useState<Record<string, string>>({});\n\n  const { data: contract, isLoading } = useQuery<any>({\n    queryKey: [\"/api/retainer-contracts\", contractId],\n    enabled: !!contractId,\n  });\n\n  const { data: applications } = useQuery<any[]>({\n    queryKey: [\"/api/retainer-contracts\", contractId, \"applications\"],\n    enabled: !!contractId,\n  });\n\n  const { data: deliverables } = useQuery<any[]>({\n    queryKey: [\"/api/retainer-contracts\", contractId, \"deliverables\"],\n    enabled: !!contractId,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      return await apiRequest(\"POST\", `/api/retainer-applications/${applicationId}/approve`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/retainer-contracts\", contractId, \"applications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/retainer-contracts\", contractId] });\n      toast({\n        title: \"Application Approved\",\n        description: \"The creator has been assigned to this retainer contract.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      return await apiRequest(\"POST\", `/api/retainer-applications/${applicationId}/reject`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/retainer-contracts\", contractId, \"applications\"] });\n      toast({\n        title: \"Application Rejected\",\n        description: \"The application has been rejected.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const approveDeliverableMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes?: string }) => {\n      return await apiRequest(\"POST\", `/api/retainer-deliverables/${id}/approve`, {\n        reviewNotes: notes,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/retainer-contracts\", contractId, \"deliverables\"] });\n      toast({\n        title: \"Deliverable Approved\",\n        description: \"The video has been approved.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve deliverable\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const requestRevisionMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes: string }) => {\n      return await apiRequest(\"POST\", `/api/retainer-deliverables/${id}/request-revision`, {\n        reviewNotes: notes,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/retainer-contracts\", contractId, \"deliverables\"] });\n      toast({\n        title: \"Revision Requested\",\n        description: \"The creator has been notified to revise the video.\",\n      });\n      setReviewNotes({});\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to request revision\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectDeliverableMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes: string }) => {\n      return await apiRequest(\"POST\", `/api/retainer-deliverables/${id}/reject`, {\n        reviewNotes: notes,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/retainer-contracts\", contractId, \"deliverables\"] });\n      toast({\n        title: \"Deliverable Rejected\",\n        description: \"The video has been rejected.\",\n      });\n      setReviewNotes({});\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject deliverable\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return <div className=\"space-y-6\">Loading...</div>;\n  }\n\n  if (!contract) {\n    return <div className=\"space-y-6\">Contract not found</div>;\n  }\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"default\";\n      case \"in_progress\":\n        return \"secondary\";\n      case \"completed\":\n        return \"outline\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getApplicationStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"default\";\n      case \"approved\":\n        return \"outline\";\n      case \"rejected\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const pendingApplications = applications?.filter((app: any) => app.status === \"pending\") || [];\n  const approvedApplications = applications?.filter((app: any) => app.status === \"approved\") || [];\n  const rejectedApplications = applications?.filter((app: any) => app.status === \"rejected\") || [];\n\n  const pendingDeliverables = deliverables?.filter((d: any) => d.status === \"pending_review\") || [];\n  const approvedDeliverables = deliverables?.filter((d: any) => d.status === \"approved\") || [];\n  const revisionDeliverables = deliverables?.filter((d: any) => d.status === \"revision_requested\") || [];\n  const rejectedDeliverables = deliverables?.filter((d: any) => d.status === \"rejected\") || [];\n\n  const getDeliverableStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"pending_review\":\n        return \"default\";\n      case \"approved\":\n        return \"outline\";\n      case \"revision_requested\":\n        return \"secondary\";\n      case \"rejected\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/company/retainers\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n        </Link>\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <h1 className=\"text-3xl font-bold\" data-testid=\"heading-contract-title\">\n              {contract.title}\n            </h1>\n            <Badge variant={getStatusBadgeVariant(contract.status)}>\n              {contract.status.replace(\"_\", \" \")}\n            </Badge>\n          </div>\n          <p className=\"text-muted-foreground\">Retainer Contract Details</p>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Monthly Payment\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-3\">\n              <DollarSign className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-2xl font-bold\">\n                ${parseFloat(contract.monthlyAmount).toLocaleString()}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Videos Per Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-3\">\n              <Video className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-2xl font-bold\">{contract.videosPerMonth}</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Contract Duration\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-3\">\n              <Calendar className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-2xl font-bold\">{contract.durationMonths} months</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"details\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"details\">Details</TabsTrigger>\n          <TabsTrigger value=\"applications\" data-testid=\"tab-applications\">\n            Applications ({applications?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"deliverables\" data-testid=\"tab-deliverables\">\n            Deliverables ({deliverables?.length || 0})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"details\" className=\"space-y-6\">\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle>Contract Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">Description</h4>\n                <p className=\"text-muted-foreground\">{contract.description}</p>\n              </div>\n\n              <div className=\"grid sm:grid-cols-2 gap-4 pt-4 border-t\">\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Required Platform</h4>\n                  <p className=\"text-muted-foreground\">{contract.requiredPlatform}</p>\n                </div>\n                {contract.minimumFollowers && (\n                  <div>\n                    <h4 className=\"font-semibold mb-1\">Minimum Followers</h4>\n                    <p className=\"text-muted-foreground\">\n                      {contract.minimumFollowers.toLocaleString()}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {contract.platformAccountDetails && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Platform Account Details</h4>\n                  <p className=\"text-muted-foreground\">{contract.platformAccountDetails}</p>\n                </div>\n              )}\n\n              {contract.contentGuidelines && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Content Guidelines</h4>\n                  <p className=\"text-muted-foreground\">{contract.contentGuidelines}</p>\n                </div>\n              )}\n\n              {contract.brandSafetyRequirements && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Brand Safety Requirements</h4>\n                  <p className=\"text-muted-foreground\">{contract.brandSafetyRequirements}</p>\n                </div>\n              )}\n\n              {contract.niches && contract.niches.length > 0 && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Target Niches</h4>\n                  <div className=\"flex gap-2 flex-wrap\">\n                    {contract.niches.map((niche: string, index: number) => (\n                      <Badge key={index} variant=\"outline\">\n                        {niche}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"applications\" className=\"space-y-6\">\n          {pendingApplications.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold\">Pending Applications ({pendingApplications.length})</h3>\n              {pendingApplications.map((app: any) => (\n                <Card key={app.id} className=\"border-card-border\" data-testid={`application-card-${app.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarImage src={app.creator?.avatarUrl} />\n                          <AvatarFallback>\n                            {app.creator?.username?.[0]?.toUpperCase() || \"C\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <CardTitle className=\"text-base\">\n                            {app.creator?.username || \"Unknown Creator\"}\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Applied {format(new Date(app.createdAt), \"MMM d, yyyy\")}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant={getApplicationStatusBadgeVariant(app.status)}>\n                        {app.status}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-sm mb-2\">Message</h4>\n                      <p className=\"text-sm text-muted-foreground\">{app.message}</p>\n                    </div>\n\n                    {app.portfolioLinks && app.portfolioLinks.length > 0 && (\n                      <div>\n                        <h4 className=\"font-semibold text-sm mb-2\">Portfolio Links</h4>\n                        <div className=\"flex flex-col gap-1\">\n                          {app.portfolioLinks.map((link: string, index: number) => (\n                            <a\n                              key={index}\n                              href={link}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-sm text-primary hover:underline flex items-center gap-1\"\n                            >\n                              <ExternalLink className=\"h-3 w-3\" />\n                              {link}\n                            </a>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {app.proposedStartDate && (\n                      <div>\n                        <h4 className=\"font-semibold text-sm mb-1\">Proposed Start Date</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {format(new Date(app.proposedStartDate), \"MMMM d, yyyy\")}\n                        </p>\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-2 pt-4 border-t\">\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"default\"\n                            className=\"flex-1\"\n                            data-testid={`button-approve-${app.id}`}\n                          >\n                            <Check className=\"h-4 w-4 mr-2\" />\n                            Approve\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Approve Application?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              This will assign {app.creator?.username} to the retainer contract and change the status to \"In Progress\".\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction onClick={() => approveMutation.mutate(app.id)}>\n                              Approve\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            className=\"flex-1\"\n                            data-testid={`button-reject-${app.id}`}\n                          >\n                            <X className=\"h-4 w-4 mr-2\" />\n                            Reject\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Reject Application?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              This will reject the application from {app.creator?.username}.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => rejectMutation.mutate(app.id)}\n                              className=\"bg-destructive hover:bg-destructive/90\"\n                            >\n                              Reject\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {approvedApplications.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold\">Approved ({approvedApplications.length})</h3>\n              {approvedApplications.map((app: any) => (\n                <Card key={app.id} className=\"border-card-border\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarImage src={app.creator?.avatarUrl} />\n                          <AvatarFallback>\n                            {app.creator?.username?.[0]?.toUpperCase() || \"C\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-semibold\">{app.creator?.username}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Approved {format(new Date(app.updatedAt), \"MMM d, yyyy\")}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\">Approved</Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {rejectedApplications.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold text-muted-foreground\">\n                Rejected ({rejectedApplications.length})\n              </h3>\n              {rejectedApplications.map((app: any) => (\n                <Card key={app.id} className=\"border-card-border opacity-60\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarImage src={app.creator?.avatarUrl} />\n                          <AvatarFallback>\n                            {app.creator?.username?.[0]?.toUpperCase() || \"C\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-semibold\">{app.creator?.username}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Rejected {format(new Date(app.updatedAt), \"MMM d, yyyy\")}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant=\"destructive\">Rejected</Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {!applications || applications.length === 0 && (\n            <Card className=\"border-card-border\">\n              <CardContent className=\"p-12 text-center\">\n                <User className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No applications received yet</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"deliverables\" className=\"space-y-6\">\n          {pendingDeliverables.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold\">Pending Review ({pendingDeliverables.length})</h3>\n              {pendingDeliverables.map((deliverable: any) => (\n                <Card key={deliverable.id} className=\"border-card-border\" data-testid={`deliverable-card-${deliverable.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div>\n                        <CardTitle className=\"text-base\">{deliverable.title}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Month {deliverable.monthNumber} - Video #{deliverable.videoNumber}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Submitted {format(new Date(deliverable.submittedAt), \"MMM d, yyyy\")}\n                        </p>\n                      </div>\n                      <Badge variant={getDeliverableStatusBadgeVariant(deliverable.status)}>\n                        Pending Review\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {deliverable.description && (\n                      <p className=\"text-sm text-muted-foreground\">{deliverable.description}</p>\n                    )}\n\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(deliverable.videoUrl, \"_blank\")}\n                        data-testid={`button-view-video-${deliverable.id}`}\n                      >\n                        <Play className=\"h-3 w-3 mr-1\" />\n                        View Video\n                      </Button>\n                      {deliverable.platformUrl && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.open(deliverable.platformUrl, \"_blank\")}\n                        >\n                          <ExternalLink className=\"h-3 w-3 mr-1\" />\n                          View on Platform\n                        </Button>\n                      )}\n                    </div>\n\n                    <div className=\"pt-4 border-t space-y-3\">\n                      <label className=\"text-sm font-semibold\">Review Notes (Optional)</label>\n                      <Textarea\n                        placeholder=\"Add feedback or notes about this video...\"\n                        rows={2}\n                        value={reviewNotes[deliverable.id] || \"\"}\n                        onChange={(e) =>\n                          setReviewNotes({ ...reviewNotes, [deliverable.id]: e.target.value })\n                        }\n                        data-testid={`input-review-notes-${deliverable.id}`}\n                      />\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"default\"\n                          size=\"sm\"\n                          onClick={() =>\n                            approveDeliverableMutation.mutate({\n                              id: deliverable.id,\n                              notes: reviewNotes[deliverable.id],\n                            })\n                          }\n                          data-testid={`button-approve-deliverable-${deliverable.id}`}\n                        >\n                          <Check className=\"h-3 w-3 mr-1\" />\n                          Approve\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (!reviewNotes[deliverable.id]) {\n                              toast({\n                                title: \"Notes Required\",\n                                description: \"Please add notes explaining what needs to be revised.\",\n                                variant: \"destructive\",\n                              });\n                              return;\n                            }\n                            requestRevisionMutation.mutate({\n                              id: deliverable.id,\n                              notes: reviewNotes[deliverable.id],\n                            });\n                          }}\n                          data-testid={`button-request-revision-${deliverable.id}`}\n                        >\n                          <AlertCircle className=\"h-3 w-3 mr-1\" />\n                          Request Revision\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (!reviewNotes[deliverable.id]) {\n                              toast({\n                                title: \"Notes Required\",\n                                description: \"Please add notes explaining why this is being rejected.\",\n                                variant: \"destructive\",\n                              });\n                              return;\n                            }\n                            rejectDeliverableMutation.mutate({\n                              id: deliverable.id,\n                              notes: reviewNotes[deliverable.id],\n                            });\n                          }}\n                          data-testid={`button-reject-deliverable-${deliverable.id}`}\n                        >\n                          <X className=\"h-3 w-3 mr-1\" />\n                          Reject\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {approvedDeliverables.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold\">Approved ({approvedDeliverables.length})</h3>\n              <div className=\"grid sm:grid-cols-2 gap-4\">\n                {approvedDeliverables.map((deliverable: any) => (\n                  <Card key={deliverable.id} className=\"border-card-border\">\n                    <CardContent className=\"p-4 space-y-2\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-semibold text-sm line-clamp-1\">{deliverable.title}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Month {deliverable.monthNumber} - Video #{deliverable.videoNumber}\n                          </p>\n                        </div>\n                        <Badge variant=\"outline\" className=\"shrink-0\">Approved</Badge>\n                      </div>\n                      {deliverable.reviewedAt && (\n                        <p className=\"text-xs text-muted-foreground\">\n                          {format(new Date(deliverable.reviewedAt), \"MMM d, yyyy\")}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {revisionDeliverables.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold\">Revision Requested ({revisionDeliverables.length})</h3>\n              <div className=\"grid sm:grid-cols-2 gap-4\">\n                {revisionDeliverables.map((deliverable: any) => (\n                  <Card key={deliverable.id} className=\"border-card-border\">\n                    <CardContent className=\"p-4 space-y-2\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-semibold text-sm line-clamp-1\">{deliverable.title}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Month {deliverable.monthNumber} - Video #{deliverable.videoNumber}\n                          </p>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"shrink-0\">Revision</Badge>\n                      </div>\n                      {deliverable.reviewNotes && (\n                        <p className=\"text-xs text-muted-foreground\">{deliverable.reviewNotes}</p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {!deliverables || deliverables.length === 0 && (\n            <Card className=\"border-card-border\">\n              <CardContent className=\"p-12 text-center\">\n                <Video className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">\n                  No deliverables submitted yet\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":31620},"client/src/pages/company-videos.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Play, Trash2, ExternalLink } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function CompanyVideos() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [selectedVideo, setSelectedVideo] = useState<any>(null);\n\n  // Fetch all offers for the company\n  const { data: offers, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/company/offers\"],\n  });\n\n  // Delete video mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (videoId: string) => {\n      await apiRequest(\"DELETE\", `/api/offer-videos/${videoId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/company/offers\"] });\n      toast({\n        title: \"Video Deleted\",\n        description: \"The promotional video has been removed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete video. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Collect all videos from all offers\n  const allVideos = offers?.flatMap((offer: any) => \n    (offer.videos || []).map((video: any) => ({\n      ...video,\n      offerTitle: offer.title,\n      offerId: offer.id,\n    }))\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Promotional Videos</h1>\n          <p className=\"text-muted-foreground\">Loading your videos...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-company-videos\">Promotional Videos</h1>\n        <p className=\"text-muted-foreground\">\n          All promotional videos across your offers ({allVideos.length} total)\n        </p>\n      </div>\n\n      {allVideos.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"p-12 text-center\">\n            <Play className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">No promotional videos uploaded yet</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Upload videos to your offers to showcase your products\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {allVideos.map((video: any) => (\n            <Card\n              key={video.id}\n              className=\"hover-elevate border-card-border overflow-hidden\"\n              data-testid={`video-card-${video.id}`}\n            >\n              <div\n                className=\"aspect-video relative bg-muted cursor-pointer\"\n                onClick={() => setSelectedVideo(video)}\n              >\n                {video.thumbnailUrl ? (\n                  <img\n                    src={video.thumbnailUrl}\n                    alt={video.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center\">\n                    <Play className=\"h-8 w-8 text-muted-foreground/50\" />\n                  </div>\n                )}\n                <div className=\"absolute inset-0 bg-black/20 flex items-center justify-center\">\n                  <Play className=\"h-12 w-12 text-white\" />\n                </div>\n              </div>\n              <CardContent className=\"p-4 space-y-3\">\n                <div>\n                  <h4 className=\"font-semibold line-clamp-1\" data-testid={`text-video-title-${video.id}`}>\n                    {video.title}\n                  </h4>\n                  {video.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n                      {video.description}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {video.offerTitle}\n                  </Badge>\n                </div>\n\n                {video.creatorCredit && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    by {video.creatorCredit}\n                  </p>\n                )}\n\n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      window.open(`/company/offers/${video.offerId}`, '_blank');\n                    }}\n                    data-testid={`button-view-offer-${video.id}`}\n                  >\n                    <ExternalLink className=\"h-3 w-3 mr-1\" />\n                    View Offer\n                  </Button>\n\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={(e) => e.stopPropagation()}\n                        data-testid={`button-delete-video-${video.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Video?</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete \"{video.title}\"? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteMutation.mutate(video.id)}\n                          className=\"bg-destructive hover:bg-destructive/90\"\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Video Preview Dialog */}\n      {selectedVideo && (\n        <AlertDialog open={!!selectedVideo} onOpenChange={() => setSelectedVideo(null)}>\n          <AlertDialogContent className=\"max-w-4xl\">\n            <AlertDialogHeader>\n              <AlertDialogTitle>{selectedVideo.title}</AlertDialogTitle>\n              {selectedVideo.description && (\n                <AlertDialogDescription>{selectedVideo.description}</AlertDialogDescription>\n              )}\n            </AlertDialogHeader>\n            <div className=\"aspect-video bg-muted rounded-md overflow-hidden\">\n              <video\n                src={selectedVideo.videoUrl}\n                controls\n                className=\"w-full h-full\"\n                autoPlay\n              >\n                Your browser does not support the video tag.\n              </video>\n            </div>\n            {(selectedVideo.creatorCredit || selectedVideo.originalPlatform) && (\n              <div className=\"flex gap-4 text-sm text-muted-foreground\">\n                {selectedVideo.creatorCredit && (\n                  <span>Creator: {selectedVideo.creatorCredit}</span>\n                )}\n                {selectedVideo.originalPlatform && (\n                  <span>Platform: {selectedVideo.originalPlatform}</span>\n                )}\n              </div>\n            )}\n            <AlertDialogFooter>\n              <AlertDialogCancel>Close</AlertDialogCancel>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":8582},"client/src/pages/company-retainers.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus, DollarSign, Video, Calendar, Users } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\n\nconst createRetainerSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  monthlyAmount: z.string().min(1, \"Monthly amount is required\"),\n  videosPerMonth: z.string().min(1, \"Videos per month is required\"),\n  durationMonths: z.string().min(1, \"Duration is required\"),\n  requiredPlatform: z.string().min(1, \"Platform is required\"),\n  platformAccountDetails: z.string().optional(),\n  contentGuidelines: z.string().optional(),\n  brandSafetyRequirements: z.string().optional(),\n  minimumFollowers: z.string().optional(),\n  niches: z.string().optional(),\n});\n\ntype CreateRetainerForm = z.infer<typeof createRetainerSchema>;\n\nexport default function CompanyRetainers() {\n  const { toast } = useToast();\n  const [open, setOpen] = useState(false);\n\n  const { data: contracts, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/company/retainer-contracts\"],\n  });\n\n  const form = useForm<CreateRetainerForm>({\n    resolver: zodResolver(createRetainerSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      monthlyAmount: \"\",\n      videosPerMonth: \"\",\n      durationMonths: \"\",\n      requiredPlatform: \"\",\n      platformAccountDetails: \"\",\n      contentGuidelines: \"\",\n      brandSafetyRequirements: \"\",\n      minimumFollowers: \"\",\n      niches: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CreateRetainerForm) => {\n      const payload = {\n        ...data,\n        monthlyAmount: data.monthlyAmount,\n        videosPerMonth: parseInt(data.videosPerMonth),\n        durationMonths: parseInt(data.durationMonths),\n        minimumFollowers: data.minimumFollowers ? parseInt(data.minimumFollowers) : undefined,\n        niches: data.niches ? data.niches.split(\",\").map((n) => n.trim()).filter(Boolean) : [],\n      };\n      return await apiRequest(\"POST\", \"/api/company/retainer-contracts\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/company/retainer-contracts\"] });\n      toast({\n        title: \"Retainer Contract Created\",\n        description: \"Your monthly retainer contract has been posted successfully.\",\n      });\n      setOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      const errorMessage = error?.response?.data || error?.message || \"Failed to create retainer contract\";\n      toast({\n        title: \"Error Creating Contract\",\n        description: String(errorMessage),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateRetainerForm) => {\n    createMutation.mutate(data);\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"open\":\n        return \"default\";\n      case \"in_progress\":\n        return \"secondary\";\n      case \"completed\":\n        return \"outline\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Monthly Retainers</h1>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-company-retainers\">\n            Monthly Retainers\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Hire creators for ongoing monthly video production\n          </p>\n        </div>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-retainer\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Retainer\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create Monthly Retainer Contract</DialogTitle>\n              <DialogDescription>\n                Post a monthly retainer for creators to produce a fixed number of videos\n                on brand new accounts for your brand\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contract Title</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g., TikTok Lifestyle Content - 30 Videos/Month\"\n                          data-testid=\"input-retainer-title\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Describe the type of content, brand voice, target audience, etc.\"\n                          rows={4}\n                          data-testid=\"input-retainer-description\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"monthlyAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Monthly Payment ($)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"5000.00\"\n                            data-testid=\"input-retainer-amount\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"videosPerMonth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Videos Per Month</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"30-50\"\n                            data-testid=\"input-retainer-videos\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription className=\"text-xs\">\n                          Typically 30-50 videos per month\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"durationMonths\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contract Duration (Months)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"3\"\n                            data-testid=\"input-retainer-duration\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"requiredPlatform\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Required Platform</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-retainer-platform\">\n                              <SelectValue placeholder=\"Select platform\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"TikTok\">TikTok</SelectItem>\n                            <SelectItem value=\"Instagram\">Instagram Reels</SelectItem>\n                            <SelectItem value=\"YouTube Shorts\">YouTube Shorts</SelectItem>\n                            <SelectItem value=\"Facebook Reels\">Facebook Reels</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"platformAccountDetails\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Platform Account Details (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"e.g., Creator will be given access to @brandname account, or creator should create brand new account\"\n                          rows={2}\n                          data-testid=\"input-platform-details\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"contentGuidelines\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Content Guidelines (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Specific content requirements, posting schedule, editing style, etc.\"\n                          rows={3}\n                          data-testid=\"input-content-guidelines\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"brandSafetyRequirements\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand Safety Requirements (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Topics to avoid, brand safety guidelines, compliance requirements, etc.\"\n                          rows={2}\n                          data-testid=\"input-brand-safety\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid sm:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"minimumFollowers\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Minimum Followers (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"10000\"\n                            data-testid=\"input-min-followers\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"niches\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Niches (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Fashion, Lifestyle, Beauty\"\n                            data-testid=\"input-niches\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription className=\"text-xs\">\n                          Comma-separated\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending}\n                    data-testid=\"button-submit-retainer\"\n                  >\n                    {createMutation.isPending ? \"Creating...\" : \"Create Retainer\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {contracts && contracts.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"p-12 text-center\">\n            <DollarSign className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n            <h3 className=\"font-semibold mb-2\">No Retainer Contracts</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Create your first monthly retainer contract to hire creators for ongoing video production\n            </p>\n            <Button onClick={() => setOpen(true)} data-testid=\"button-create-first-retainer\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Retainer\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {contracts?.map((contract: any) => (\n            <Card\n              key={contract.id}\n              className=\"hover-elevate border-card-border\"\n              data-testid={`retainer-card-${contract.id}`}\n            >\n              <CardHeader>\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <CardTitle className=\"text-xl\" data-testid={`text-retainer-title-${contract.id}`}>\n                        {contract.title}\n                      </CardTitle>\n                      <Badge variant={getStatusBadgeVariant(contract.status)}>\n                        {contract.status.replace(\"_\", \" \")}\n                      </Badge>\n                    </div>\n                    <p className=\"text-muted-foreground line-clamp-2\">\n                      {contract.description}\n                    </p>\n                  </div>\n                  <Link href={`/company/retainers/${contract.id}`}>\n                    <Button variant=\"outline\" data-testid={`button-view-retainer-${contract.id}`}>\n                      View Details\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                      <DollarSign className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Monthly Payment</p>\n                      <p className=\"font-semibold\">${parseFloat(contract.monthlyAmount).toLocaleString()}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                      <Video className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Videos/Month</p>\n                      <p className=\"font-semibold\">{contract.videosPerMonth}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                      <Calendar className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Duration</p>\n                      <p className=\"font-semibold\">{contract.durationMonths} months</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                      <Users className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Platform</p>\n                      <p className=\"font-semibold\">{contract.requiredPlatform}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {contract.applicationCount > 0 && (\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      <strong>{contract.applicationCount}</strong> creator{contract.applicationCount === 1 ? \"\" : \"s\"} applied\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":20022},"client/src/pages/creator-retainers.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { DollarSign, Video, Calendar, Briefcase, Send } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\n\nconst applyRetainerSchema = z.object({\n  message: z.string().min(20, \"Message must be at least 20 characters\"),\n  portfolioLinks: z.string().optional(),\n  proposedStartDate: z.string().optional(),\n});\n\ntype ApplyRetainerForm = z.infer<typeof applyRetainerSchema>;\n\nexport default function CreatorRetainers() {\n  const { toast } = useToast();\n  const [selectedContract, setSelectedContract] = useState<any>(null);\n  const [open, setOpen] = useState(false);\n\n  const { data: contracts, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/retainer-contracts\"],\n  });\n\n  const { data: myApplications } = useQuery<any[]>({\n    queryKey: [\"/api/creator/retainer-applications\"],\n  });\n\n  const form = useForm<ApplyRetainerForm>({\n    resolver: zodResolver(applyRetainerSchema),\n    defaultValues: {\n      message: \"\",\n      portfolioLinks: \"\",\n      proposedStartDate: \"\",\n    },\n  });\n\n  const applyMutation = useMutation({\n    mutationFn: async (data: ApplyRetainerForm) => {\n      const payload = {\n        message: data.message,\n        portfolioLinks: data.portfolioLinks\n          ? data.portfolioLinks.split(\",\").map((link) => link.trim()).filter(Boolean)\n          : [],\n        proposedStartDate: data.proposedStartDate || undefined,\n      };\n      return await apiRequest(\"POST\", `/api/creator/retainer-contracts/${selectedContract.id}/apply`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/creator/retainer-applications\"] });\n      toast({\n        title: \"Application Submitted\",\n        description: \"Your retainer application has been sent to the company.\",\n      });\n      setOpen(false);\n      setSelectedContract(null);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ApplyRetainerForm) => {\n    applyMutation.mutate(data);\n  };\n\n  const hasApplied = (contractId: string) => {\n    return myApplications?.some((app: any) => app.contractId === contractId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Monthly Retainers</h1>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-creator-retainers\">\n          Monthly Retainers\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Browse ongoing monthly video production contracts\n        </p>\n      </div>\n\n      {contracts && contracts.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"p-12 text-center\">\n            <Briefcase className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n            <h3 className=\"font-semibold mb-2\">No Retainer Contracts Available</h3>\n            <p className=\"text-muted-foreground\">\n              Check back later for new monthly retainer opportunities\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {contracts?.map((contract: any) => {\n            const applied = hasApplied(contract.id);\n            return (\n              <Card\n                key={contract.id}\n                className=\"hover-elevate border-card-border\"\n                data-testid={`retainer-card-${contract.id}`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <CardTitle className=\"text-xl\" data-testid={`text-retainer-title-${contract.id}`}>\n                          {contract.title}\n                        </CardTitle>\n                        {applied && (\n                          <Badge variant=\"secondary\">Applied</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        by {contract.company?.tradeName || contract.company?.legalName || \"Company\"}\n                      </p>\n                      <p className=\"text-muted-foreground line-clamp-3\">\n                        {contract.description}\n                      </p>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                        <DollarSign className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Monthly Payment</p>\n                        <p className=\"font-semibold\">\n                          ${parseFloat(contract.monthlyAmount).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                        <Video className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Videos/Month</p>\n                        <p className=\"font-semibold\">{contract.videosPerMonth}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                        <Calendar className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Duration</p>\n                        <p className=\"font-semibold\">{contract.durationMonths} months</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-md bg-primary/10 flex items-center justify-center shrink-0\">\n                        <Briefcase className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Platform</p>\n                        <p className=\"font-semibold\">{contract.requiredPlatform}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {contract.contentGuidelines && (\n                    <div className=\"pt-4 border-t\">\n                      <h4 className=\"font-semibold text-sm mb-2\">Content Guidelines</h4>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {contract.contentGuidelines}\n                      </p>\n                    </div>\n                  )}\n\n                  {contract.niches && contract.niches.length > 0 && (\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {contract.niches.map((niche: string, index: number) => (\n                        <Badge key={index} variant=\"outline\">\n                          {niche}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-2 pt-2\">\n                    <Link href={`/retainers/${contract.id}`} className=\"flex-1\">\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        data-testid={`button-view-details-${contract.id}`}\n                      >\n                        View Details\n                      </Button>\n                    </Link>\n                    {!applied && (\n                      <Button\n                        onClick={() => {\n                          setSelectedContract(contract);\n                          setOpen(true);\n                        }}\n                        className=\"flex-1\"\n                        data-testid={`button-apply-${contract.id}`}\n                      >\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        Apply Now\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Apply for Retainer Contract</DialogTitle>\n            <DialogDescription>\n              Submit your application for: {selectedContract?.title}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Cover Message</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Introduce yourself and explain why you're a great fit for this retainer...\"\n                        rows={6}\n                        data-testid=\"input-application-message\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"portfolioLinks\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Portfolio Links (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"https://tiktok.com/@yourprofile, https://instagram.com/yourprofile\"\n                        data-testid=\"input-portfolio-links\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormDescription className=\"text-xs\">\n                      Comma-separated URLs to your social profiles\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"proposedStartDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Proposed Start Date (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        data-testid=\"input-start-date\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setOpen(false);\n                    setSelectedContract(null);\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={applyMutation.isPending}\n                  data-testid=\"button-submit-application\"\n                >\n                  {applyMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13146},"client/src/pages/creator-retainer-detail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { DollarSign, Video, Calendar, ArrowLeft, Upload, Play, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Label } from \"@/components/ui/label\";\n\nconst uploadDeliverableSchema = z.object({\n  platformUrl: z.string().url(\"Must be a valid URL\").optional().or(z.literal(\"\")),\n  title: z.string().min(3, \"Title must be at least 3 characters\"),\n  description: z.string().optional(),\n  monthNumber: z.string().min(1, \"Month number is required\"),\n  videoNumber: z.string().min(1, \"Video number is required\"),\n});\n\ntype UploadDeliverableForm = z.infer<typeof uploadDeliverableSchema>;\n\nexport default function CreatorRetainerDetail() {\n  const [, params] = useRoute(\"/retainers/:id\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const contractId = params?.id;\n  const [open, setOpen] = useState(false);\n  const [videoUrl, setVideoUrl] = useState(\"\");\n\n  const { data: contract, isLoading } = useQuery<any>({\n    queryKey: [\"/api/retainer-contracts\", contractId],\n    enabled: !!contractId,\n  });\n\n  const { data: myApplication } = useQuery<any>({\n    queryKey: [\"/api/creator/retainer-applications\"],\n  });\n\n  const { data: deliverables } = useQuery<any[]>({\n    queryKey: [\"/api/retainer-contracts\", contractId, \"deliverables\"],\n    enabled: !!contractId && myApplication?.some((app: any) => app.contractId === contractId && app.status === \"approved\"),\n  });\n\n  const form = useForm<UploadDeliverableForm>({\n    resolver: zodResolver(uploadDeliverableSchema),\n    defaultValues: {\n      platformUrl: \"\",\n      title: \"\",\n      description: \"\",\n      monthNumber: \"1\",\n      videoNumber: \"1\",\n    },\n  });\n\n  const handleGetUploadUrl = async () => {\n    const response = await fetch(\"/api/objects/upload\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: any) => {\n    if (result.successful && result.successful[0]) {\n      const uploadedUrl = result.successful[0].uploadURL.split(\"?\")[0];\n      setVideoUrl(uploadedUrl);\n      toast({\n        title: \"Video Uploaded\",\n        description: \"Video file uploaded successfully. Now fill in the details.\",\n      });\n    }\n  };\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: UploadDeliverableForm) => {\n      if (!videoUrl) {\n        throw new Error(\"Please upload a video file first\");\n      }\n      const payload = {\n        contractId,\n        monthNumber: parseInt(data.monthNumber),\n        videoNumber: parseInt(data.videoNumber),\n        videoUrl: videoUrl,\n        platformUrl: data.platformUrl || undefined,\n        title: data.title,\n        description: data.description || undefined,\n      };\n      return await apiRequest(\"POST\", \"/api/retainer-deliverables\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/retainer-contracts\", contractId, \"deliverables\"] });\n      toast({\n        title: \"Deliverable Submitted\",\n        description: \"Your video has been submitted for review.\",\n      });\n      setOpen(false);\n      form.reset();\n      setVideoUrl(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit deliverable\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UploadDeliverableForm) => {\n    uploadMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return <div className=\"space-y-6\">Loading...</div>;\n  }\n\n  if (!contract) {\n    return <div className=\"space-y-6\">Contract not found</div>;\n  }\n\n  const currentApplication = myApplication?.find((app: any) => app.contractId === contractId);\n  const isApproved = currentApplication?.status === \"approved\";\n  const isPending = currentApplication?.status === \"pending\";\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"pending_review\":\n        return \"default\";\n      case \"approved\":\n        return \"outline\";\n      case \"revision_requested\":\n        return \"secondary\";\n      case \"rejected\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Link href=\"/retainers\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n        </Link>\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <h1 className=\"text-3xl font-bold\" data-testid=\"heading-contract-title\">\n              {contract.title}\n            </h1>\n            {currentApplication && (\n              <Badge variant={isApproved ? \"outline\" : isPending ? \"default\" : \"destructive\"}>\n                {currentApplication.status}\n              </Badge>\n            )}\n          </div>\n          <p className=\"text-muted-foreground\">\n            by {contract.company?.tradeName || contract.company?.legalName || \"Company\"}\n          </p>\n        </div>\n        {isApproved && (\n          <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-submit-deliverable\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Submit Video\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>Submit Deliverable</DialogTitle>\n                <DialogDescription>\n                  Upload a new video for this retainer contract\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"monthNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Month Number</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              data-testid=\"input-month-number\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"videoNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Video Number</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              data-testid=\"input-video-number\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormDescription className=\"text-xs\">\n                            Within this month\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Video Title</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter video title\"\n                            data-testid=\"input-video-title\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Add any notes about this video\"\n                            rows={3}\n                            data-testid=\"input-description\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"space-y-2\">\n                    <Label>Video File</Label>\n                    <ObjectUploader\n                      maxNumberOfFiles={1}\n                      maxFileSize={524288000}\n                      onGetUploadParameters={handleGetUploadUrl}\n                      onComplete={handleUploadComplete}\n                    >\n                      {videoUrl ? \"Video Uploaded ✓\" : \"Upload Video File\"}\n                    </ObjectUploader>\n                    {videoUrl && (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Video uploaded successfully\n                      </p>\n                    )}\n                    {!videoUrl && (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Click to upload your video file (max 500MB)\n                      </p>\n                    )}\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"platformUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Platform URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"https://tiktok.com/@brand/video/...\"\n                            data-testid=\"input-platform-url\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormDescription className=\"text-xs\">\n                          Link to the video on {contract.requiredPlatform}\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <DialogFooter>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setOpen(false);\n                        form.reset();\n                        setVideoUrl(\"\");\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={uploadMutation.isPending}\n                      data-testid=\"button-submit-upload\"\n                    >\n                      {uploadMutation.isPending ? \"Submitting...\" : \"Submit Video\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Monthly Payment\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-3\">\n              <DollarSign className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-2xl font-bold\">\n                ${parseFloat(contract.monthlyAmount).toLocaleString()}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Videos Per Month\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-3\">\n              <Video className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-2xl font-bold\">{contract.videosPerMonth}</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n              Contract Duration\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-3\">\n              <Calendar className=\"h-8 w-8 text-primary\" />\n              <div className=\"text-2xl font-bold\">{contract.durationMonths} months</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"details\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"details\">Details</TabsTrigger>\n          {isApproved && (\n            <TabsTrigger value=\"deliverables\" data-testid=\"tab-deliverables\">\n              My Deliverables ({deliverables?.length || 0})\n            </TabsTrigger>\n          )}\n        </TabsList>\n\n        <TabsContent value=\"details\" className=\"space-y-6\">\n          <Card className=\"border-card-border\">\n            <CardHeader>\n              <CardTitle>Contract Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">Description</h4>\n                <p className=\"text-muted-foreground\">{contract.description}</p>\n              </div>\n\n              <div className=\"grid sm:grid-cols-2 gap-4 pt-4 border-t\">\n                <div>\n                  <h4 className=\"font-semibold mb-1\">Required Platform</h4>\n                  <p className=\"text-muted-foreground\">{contract.requiredPlatform}</p>\n                </div>\n                {contract.minimumFollowers && (\n                  <div>\n                    <h4 className=\"font-semibold mb-1\">Minimum Followers</h4>\n                    <p className=\"text-muted-foreground\">\n                      {contract.minimumFollowers.toLocaleString()}\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {contract.platformAccountDetails && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Platform Account Details</h4>\n                  <p className=\"text-muted-foreground\">{contract.platformAccountDetails}</p>\n                </div>\n              )}\n\n              {contract.contentGuidelines && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Content Guidelines</h4>\n                  <p className=\"text-muted-foreground\">{contract.contentGuidelines}</p>\n                </div>\n              )}\n\n              {contract.brandSafetyRequirements && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Brand Safety Requirements</h4>\n                  <p className=\"text-muted-foreground\">{contract.brandSafetyRequirements}</p>\n                </div>\n              )}\n\n              {contract.niches && contract.niches.length > 0 && (\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-2\">Target Niches</h4>\n                  <div className=\"flex gap-2 flex-wrap\">\n                    {contract.niches.map((niche: string, index: number) => (\n                      <Badge key={index} variant=\"outline\">\n                        {niche}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {isApproved && (\n          <TabsContent value=\"deliverables\" className=\"space-y-6\">\n            {deliverables && deliverables.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {deliverables.map((deliverable: any) => (\n                  <Card\n                    key={deliverable.id}\n                    className=\"border-card-border\"\n                    data-testid={`deliverable-card-${deliverable.id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between gap-4\">\n                        <div>\n                          <CardTitle className=\"text-base\">\n                            {deliverable.title}\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Month {deliverable.monthNumber} - Video #{deliverable.videoNumber}\n                          </p>\n                        </div>\n                        <Badge variant={getStatusBadgeVariant(deliverable.status)}>\n                          {deliverable.status.replace(\"_\", \" \")}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {deliverable.description && (\n                        <p className=\"text-sm text-muted-foreground\">\n                          {deliverable.description}\n                        </p>\n                      )}\n\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.open(deliverable.videoUrl, \"_blank\")}\n                          data-testid={`button-view-video-${deliverable.id}`}\n                        >\n                          <Play className=\"h-3 w-3 mr-1\" />\n                          View Video\n                        </Button>\n                        {deliverable.platformUrl && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => window.open(deliverable.platformUrl, \"_blank\")}\n                            data-testid={`button-view-platform-${deliverable.id}`}\n                          >\n                            <ExternalLink className=\"h-3 w-3 mr-1\" />\n                            View on Platform\n                          </Button>\n                        )}\n                      </div>\n\n                      {deliverable.reviewNotes && (\n                        <div className=\"pt-3 border-t\">\n                          <h4 className=\"font-semibold text-sm mb-1\">Review Notes</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {deliverable.reviewNotes}\n                          </p>\n                        </div>\n                      )}\n\n                      {deliverable.reviewedAt && (\n                        <p className=\"text-xs text-muted-foreground\">\n                          Reviewed {format(new Date(deliverable.reviewedAt), \"MMM d, yyyy\")}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"border-card-border\">\n                <CardContent className=\"p-12 text-center\">\n                  <Video className=\"h-12 w-12 text-muted-foreground/50 mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    No deliverables submitted yet. Click \"Submit Video\" to upload your first video.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":21360},"SETUP_VSCODE.md":{"content":"# VS Code Setup Guide\n\nThis guide will help you set up the CreatorLink project in Visual Studio Code.\n\n## Quick Start (5 Minutes)\n\n### 1. Download & Open Project\n\n1. Download all project files from Replit (or clone from git)\n2. Open folder in VS Code: `File → Open Folder`\n3. VS Code will prompt you to install recommended extensions → Click **Install All**\n\n### 2. Install Dependencies\n\nOpen the integrated terminal (`Ctrl + ~` or `` Ctrl + ` ``) and run:\n\n```bash\nnpm install\n```\n\n### 3. Configure Environment\n\n```bash\n# Copy the example environment file\ncp .env.example .env\n\n# Edit .env with your database credentials\n```\n\n**Minimum required variables:**\n```env\nDATABASE_URL=postgresql://localhost/creatorlink\nSESSION_SECRET=change-this-to-random-string\nNODE_ENV=development\n```\n\n### 4. Set Up Database\n\n```bash\n# Create database (if using local PostgreSQL)\ncreatedb creatorlink\n\n# Push schema to database\nnpm run db:push\n```\n\n### 5. Start Development Server\n\n**Option A: Using VS Code Task**\n- Press `Ctrl+Shift+P` (or `Cmd+Shift+P` on Mac)\n- Search for \"Tasks: Run Task\"\n- Select \"Start Dev Server\"\n\n**Option B: Using Terminal**\n```bash\nnpm run dev\n```\n\n✅ **Done!** Open http://localhost:5000\n\n---\n\n## VS Code Features\n\n### Recommended Extensions\n\nThe project includes recommended extensions. Install them for the best experience:\n\n- **ESLint**: JavaScript/TypeScript linting\n- **Prettier**: Code formatting\n- **Tailwind CSS IntelliSense**: Autocomplete for Tailwind classes\n- **Auto Rename Tag**: Automatically rename paired HTML/JSX tags\n- **ES7 React Snippets**: React code snippets\n- **Path Intellisense**: Autocomplete for file paths\n- **TypeScript**: Enhanced TypeScript support\n\n### Debugging\n\nPress `F5` to start debugging the server with breakpoint support!\n\nThe debugger is pre-configured to:\n- Run the server with `tsx`\n- Set environment to development\n- Display output in integrated terminal\n- Skip Node.js internal files\n\n**Set breakpoints by clicking in the gutter next to line numbers**\n\n### VS Code Tasks\n\nPress `Ctrl+Shift+P` → \"Tasks: Run Task\":\n\n1. **Start Dev Server** - Launches full-stack app\n2. **Build** - Creates production build\n3. **Push Database Schema** - Syncs database\n\n### IntelliSense & TypeScript\n\nThe project is fully typed with TypeScript. You get:\n\n- ✅ Autocomplete for all functions and components\n- ✅ Type checking as you code\n- ✅ Jump to definition (`F12`)\n- ✅ Find all references (`Shift+F12`)\n- ✅ Rename symbol (`F2`)\n\n---\n\n## Database Setup Options\n\n### Option 1: Local PostgreSQL\n\n```bash\n# macOS (using Homebrew)\nbrew install postgresql\nbrew services start postgresql\ncreatedb creatorlink\n\n# Ubuntu/Debian\nsudo apt-get install postgresql\nsudo systemctl start postgresql\nsudo -u postgres createdb creatorlink\n\n# Windows\n# Download and install from https://www.postgresql.org/download/windows/\n```\n\n### Option 2: Hosted Database (Easiest)\n\n**Neon.tech (Recommended)**\n1. Go to https://neon.tech\n2. Create free account\n3. Create new project\n4. Copy connection string\n5. Paste into `.env` as `DATABASE_URL`\n\n**Supabase**\n1. Go to https://supabase.com\n2. Create new project\n3. Settings → Database → Copy connection string\n4. Use \"Connection pooling\" string\n5. Paste into `.env` as `DATABASE_URL`\n\n### Option 3: Import Existing Data\n\nIf you have a database export from Replit:\n\n```bash\n# Import from SQL dump\npsql $DATABASE_URL < database-dump.sql\n\n# Or push schema and import JSON (requires custom script)\nnpm run db:push\n# Then run import script\n```\n\n---\n\n## Troubleshooting\n\n### \"Module not found\" errors\n\n```bash\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n### Database connection errors\n\nTest connection:\n```bash\npsql $DATABASE_URL -c \"SELECT 1\"\n```\n\nCheck your `.env` file has the correct `DATABASE_URL`\n\n### Port 5000 already in use\n\n```bash\n# macOS/Linux\nlsof -ti:5000 | xargs kill\n\n# Windows\nnetstat -ano | findstr :5000\n# Note the PID, then:\ntaskkill /PID <PID> /F\n```\n\n### TypeScript errors in VS Code\n\n1. Restart TypeScript server: `Ctrl+Shift+P` → \"TypeScript: Restart TS Server\"\n2. Make sure you're using workspace TypeScript: Check bottom right of VS Code\n\n---\n\n## Project Structure\n\n```\ncreatorlink/\n├── .vscode/                # VS Code configurations\n│   ├── extensions.json     # Recommended extensions\n│   ├── launch.json         # Debugger config\n│   └── tasks.json          # Available tasks\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # UI components\n│   │   ├── pages/          # Page components\n│   │   └── lib/            # Utilities\n├── server/                 # Express backend\n│   ├── routes.ts           # API endpoints\n│   ├── storage.ts          # Database layer\n│   └── index.ts            # Server entry\n├── shared/                 # Shared code\n│   └── schema.ts           # Database schema (Drizzle ORM)\n├── .env.example            # Environment template\n├── .gitignore              # Git exclusions\n├── README.md               # Full documentation\n└── package.json            # Dependencies & scripts\n```\n\n---\n\n## Development Workflow\n\n### Typical Development Session\n\n1. **Start the server**\n   ```bash\n   npm run dev\n   ```\n\n2. **Make changes** to files in `client/` or `server/`\n\n3. **Changes auto-reload** - Vite HMR for frontend, nodemon for backend\n\n4. **Check the browser** at http://localhost:5000\n\n5. **Debug if needed** - Press `F5` and set breakpoints\n\n### Database Changes\n\n1. **Edit schema** in `shared/schema.ts`\n\n2. **Push to database**\n   ```bash\n   npm run db:push\n   ```\n\n3. **View database** (optional)\n   ```bash\n   npm run db:studio\n   ```\n\n### Code Quality\n\nThe project uses:\n- **TypeScript** for type safety\n- **ESLint** for code quality (install extension)\n- **Prettier** for formatting (install extension)\n\nEnable \"Format on Save\" in VS Code settings for best experience.\n\n---\n\n## Important Files\n\n### Must Configure\n\n- `.env` - Environment variables (copy from `.env.example`)\n- `shared/schema.ts` - Database schema\n\n### Reference Docs\n\n- `README.md` - Full project documentation\n- `MIGRATION_GUIDE.md` - Database export/import guide\n- `design_guidelines.md` - UI/UX design system\n- `replit.md` - Project architecture notes\n\n---\n\n## Keyboard Shortcuts (VS Code)\n\n- `Ctrl+~` - Toggle terminal\n- `Ctrl+Shift+P` - Command palette\n- `F5` - Start debugging\n- `Ctrl+P` - Quick file open\n- `F12` - Go to definition\n- `Shift+F12` - Find all references\n- `F2` - Rename symbol\n- `Ctrl+/` - Toggle comment\n\n---\n\n## Getting Help\n\n1. Check [README.md](./README.md) for full documentation\n2. Review [MIGRATION_GUIDE.md](./MIGRATION_GUIDE.md) for database setup\n3. Check VS Code problems panel (`Ctrl+Shift+M`)\n4. Review console logs in browser DevTools\n\n---\n\n## Next Steps\n\nOnce you have the project running:\n\n1. ✅ Register a test account at http://localhost:5000/register\n2. ✅ Create a company profile\n3. ✅ Create an offer or retainer contract\n4. ✅ Test the features\n\n**Happy coding! 🚀**\n","size_bytes":7113},"README.md":{"content":"# CreatorLink - Affiliate Marketplace Platform\n\nA comprehensive multi-sided marketplace connecting video content creators with brands for affiliate marketing opportunities and monthly retainer contracts.\n\n## Features\n\n- **Custom Authentication**: Username/password authentication with role-based access (Creator, Company, Admin)\n- **Offer Management**: Companies create affiliate offers with 6-12 promotional videos\n- **Monthly Retainers**: Long-term creator contracts for producing 30-50 videos/month\n- **Auto-Approval**: Applications automatically approved after 7 minutes with tracking link generation\n- **Click Tracking**: Advanced analytics with geo-location, device detection, and unique visitor tracking\n- **Real-time Messaging**: WebSocket-based communication between creators and companies\n- **Analytics Dashboards**: Comprehensive performance tracking for both creators and companies\n- **Review System**: Creators can review offers and companies\n- **Payment Processing**: Stripe integration with 7% platform fees\n\n## Tech Stack\n\n- **Frontend**: React + TypeScript, Vite, TailwindCSS, shadcn/ui\n- **Backend**: Express.js + TypeScript\n- **Database**: PostgreSQL (Neon serverless) with Drizzle ORM\n- **Real-time**: WebSocket (ws library)\n- **Storage**: Google Cloud Storage for videos and media\n- **Authentication**: Passport.js with bcrypt\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18+ and npm\n- PostgreSQL database (local or hosted)\n- Google Cloud Storage bucket (optional, for file uploads)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <your-repo-url>\n   cd creatorlink\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   \n   Create a `.env` file in the root directory:\n   ```env\n   # Database\n   DATABASE_URL=postgresql://user:password@host:port/database\n   \n   # Session\n   SESSION_SECRET=your-random-secret-key-here\n   \n   # Environment\n   NODE_ENV=development\n   \n   # Stripe (optional)\n   STRIPE_SECRET_KEY=sk_test_...\n   VITE_STRIPE_PUBLIC_KEY=pk_test_...\n   \n   # Object Storage (optional)\n   DEFAULT_OBJECT_STORAGE_BUCKET_ID=your-bucket-id\n   ```\n\n4. **Set up the database**\n   \n   Push the schema to your database:\n   ```bash\n   npm run db:push\n   ```\n\n5. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n6. **Open your browser**\n   \n   Navigate to `http://localhost:5000`\n\n## VS Code Setup\n\nThis project includes VS Code configuration for an optimal development experience.\n\n### Recommended Extensions\n\nWhen you open the project in VS Code, you'll be prompted to install recommended extensions:\n- ESLint\n- Prettier\n- Tailwind CSS IntelliSense\n- Auto Rename Tag\n- ES7 React/Redux snippets\n- Path Intellisense\n- TypeScript\n\n### Available Tasks\n\nPress `Ctrl+Shift+P` (or `Cmd+Shift+P` on Mac) and search for \"Tasks: Run Task\":\n- **Start Dev Server**: Launches the full-stack development server\n- **Build**: Creates production build\n- **Push Database Schema**: Syncs database schema\n\n### Debugging\n\nPress `F5` to start debugging the server with breakpoints support.\n\n## Project Structure\n\n```\ncreatorlink/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/          # Page components\n│   │   ├── lib/            # Utilities and helpers\n│   │   └── hooks/          # Custom React hooks\n├── server/                 # Backend Express application\n│   ├── routes.ts           # API endpoints\n│   ├── storage.ts          # Database operations\n│   ├── db.ts               # Database connection\n│   └── index.ts            # Server entry point\n├── shared/                 # Shared types and schemas\n│   └── schema.ts           # Drizzle database schema\n├── scripts/                # Utility scripts\n│   └── export-database.ts  # Database export tool\n└── attached_assets/        # Static assets\n\n```\n\n## Available Scripts\n\n```bash\n# Development\nnpm run dev              # Start development server\n\n# Database\nnpm run db:push          # Push schema to database\nnpm run db:studio        # Open Drizzle Studio (database GUI)\n\n# Build\nnpm run build            # Build for production\nnpm run start            # Start production server\n\n# Export\nnpx tsx scripts/export-database.ts  # Export database to JSON\n```\n\n## Database Export & Migration\n\nTo export your data for backup or migration:\n\n```bash\n# Export to JSON\nnpx tsx scripts/export-database.ts\n\n# Export to SQL (PostgreSQL)\npg_dump $DATABASE_URL > database-dump.sql\n```\n\nSee [MIGRATION_GUIDE.md](./MIGRATION_GUIDE.md) for detailed migration instructions.\n\n## Environment Setup\n\n### Local PostgreSQL\n\n```bash\n# Install PostgreSQL\nbrew install postgresql  # macOS\nsudo apt-get install postgresql  # Ubuntu\n\n# Create database\ncreatedb creatorlink\n\n# Set DATABASE_URL\nexport DATABASE_URL=postgresql://localhost/creatorlink\n```\n\n### Hosted Database Options\n\n- **Neon.tech**: Free tier, serverless PostgreSQL (same as Replit)\n- **Supabase**: Free tier with additional features\n- **Railway**: Simple deployment platform\n- **Vercel Postgres**: Integrated with Vercel deployments\n\n## Design System\n\nThe application uses a vibrant blue primary color theme (210° 90% 55%) with comprehensive light/dark mode support. Design guidelines are documented in [design_guidelines.md](./design_guidelines.md).\n\n## API Documentation\n\n### Authentication\n\n- `POST /api/auth/register` - Create new account\n- `POST /api/auth/login` - Login with credentials\n- `POST /api/auth/logout` - Logout current user\n- `GET /api/auth/user` - Get current user\n\n### Offers (Creator)\n\n- `GET /api/offers` - List all offers\n- `GET /api/offers/:id` - Get offer details\n- `POST /api/applications` - Apply to an offer\n\n### Offers (Company)\n\n- `POST /api/company/offers` - Create new offer\n- `GET /api/company/offers` - List company's offers\n- `POST /api/offers/:id/videos` - Upload promotional video\n\n### Retainer Contracts\n\n- `GET /api/retainer-contracts` - List all contracts\n- `POST /api/company/retainer-contracts` - Create contract\n- `POST /api/creator/retainer-contracts/:id/apply` - Apply to contract\n\n## Troubleshooting\n\n### Database Connection Issues\n\n```bash\n# Test database connection\npsql $DATABASE_URL -c \"SELECT 1\"\n```\n\n### Port Already in Use\n\nIf port 5000 is in use, kill the process:\n```bash\n# macOS/Linux\nlsof -ti:5000 | xargs kill\n\n# Windows\nnetstat -ano | findstr :5000\ntaskkill /PID <PID> /F\n```\n\n### Module Not Found Errors\n\n```bash\n# Clear cache and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is private and proprietary.\n\n## Support\n\nFor issues and questions:\n- Check the [MIGRATION_GUIDE.md](./MIGRATION_GUIDE.md) for database-related questions\n- Review the code documentation in `replit.md`\n- Open an issue in the repository\n\n---\n\n**Built with ❤️ for creators and brands**\n","size_bytes":7256},"client/src/pages/admin-creators.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Users, Search, Ban, ShieldOff, ShieldCheck } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport default function AdminCreators() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCreator, setSelectedCreator] = useState<any>(null);\n  const [actionDialog, setActionDialog] = useState<{ open: boolean; action: 'suspend' | 'ban' | 'unsuspend' | null }>({ open: false, action: null });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: creators = [], isLoading: loadingCreators } = useQuery<any[]>({\n    queryKey: [\"/api/admin/creators\"],\n    enabled: isAuthenticated,\n  });\n\n  const suspendMutation = useMutation({\n    mutationFn: async (creatorId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/creators/${creatorId}/suspend`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/creators\"] });\n      toast({\n        title: \"Success\",\n        description: \"Creator account suspended\",\n      });\n      setActionDialog({ open: false, action: null });\n      setSelectedCreator(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to suspend creator\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unsuspendMutation = useMutation({\n    mutationFn: async (creatorId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/creators/${creatorId}/unsuspend`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/creators\"] });\n      toast({\n        title: \"Success\",\n        description: \"Creator account reactivated\",\n      });\n      setActionDialog({ open: false, action: null });\n      setSelectedCreator(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to unsuspend creator\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const banMutation = useMutation({\n    mutationFn: async (creatorId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/creators/${creatorId}/ban`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/creators\"] });\n      toast({\n        title: \"Success\",\n        description: \"Creator account banned\",\n      });\n      setActionDialog({ open: false, action: null });\n      setSelectedCreator(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to ban creator\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAction = (creator: any, action: 'suspend' | 'ban' | 'unsuspend') => {\n    setSelectedCreator(creator);\n    setActionDialog({ open: true, action });\n  };\n\n  const confirmAction = () => {\n    if (!selectedCreator || !actionDialog.action) return;\n\n    if (actionDialog.action === 'suspend') {\n      suspendMutation.mutate(selectedCreator.id);\n    } else if (actionDialog.action === 'ban') {\n      banMutation.mutate(selectedCreator.id);\n    } else if (actionDialog.action === 'unsuspend') {\n      unsuspendMutation.mutate(selectedCreator.id);\n    }\n  };\n\n  const filteredCreators = creators.filter(creator => {\n    if (!searchTerm) return true;\n    const search = searchTerm.toLowerCase();\n    return (\n      creator.username?.toLowerCase().includes(search) ||\n      creator.email?.toLowerCase().includes(search) ||\n      creator.firstName?.toLowerCase().includes(search) ||\n      creator.lastName?.toLowerCase().includes(search)\n    );\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Creator Management</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          View and manage creator accounts on the platform\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search creators by name, username, or email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-creators\"\n          />\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Creators</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{creators.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <ShieldCheck className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {creators.filter(c => c.accountStatus === 'active').length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-card-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Suspended/Banned</CardTitle>\n            <ShieldOff className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {creators.filter(c => c.accountStatus === 'suspended' || c.accountStatus === 'banned').length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Creators List */}\n      {loadingCreators ? (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-pulse text-lg text-muted-foreground\">\n            Loading creators...\n          </div>\n        </div>\n      ) : filteredCreators.length === 0 ? (\n        <Card className=\"border-card-border\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Users className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No creators found</h3>\n            <p className=\"text-sm text-muted-foreground text-center max-w-md\">\n              {searchTerm ? 'Try adjusting your search terms' : 'No creators have registered yet'}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredCreators.map((creator: any) => (\n            <Card key={creator.id} className=\"border-card-border\" data-testid={`card-creator-${creator.id}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex items-start gap-4 flex-1 min-w-0\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src={creator.profileImageUrl} alt={creator.username} />\n                      <AvatarFallback>\n                        {creator.firstName?.[0] || creator.username?.[0] || 'C'}\n                      </AvatarFallback>\n                    </Avatar>\n\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 flex-wrap mb-1\">\n                        <h3 className=\"font-semibold\" data-testid={`text-name-${creator.id}`}>\n                          {creator.firstName && creator.lastName \n                            ? `${creator.firstName} ${creator.lastName}` \n                            : creator.username}\n                        </h3>\n                        <Badge\n                          variant={\n                            creator.accountStatus === 'active' ? 'default' :\n                            creator.accountStatus === 'suspended' ? 'secondary' :\n                            'destructive'\n                          }\n                          data-testid={`badge-status-${creator.id}`}\n                        >\n                          {creator.accountStatus}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">@{creator.username}</p>\n                      <p className=\"text-sm text-tertiary-foreground\">{creator.email}</p>\n                      \n                      {creator.profile && (\n                        <div className=\"flex gap-4 mt-3 text-sm\">\n                          {creator.profile.youtubeFollowers && (\n                            <div>\n                              <span className=\"text-muted-foreground\">YouTube:</span>{' '}\n                              <span className=\"font-medium\">{creator.profile.youtubeFollowers.toLocaleString()}</span>\n                            </div>\n                          )}\n                          {creator.profile.tiktokFollowers && (\n                            <div>\n                              <span className=\"text-muted-foreground\">TikTok:</span>{' '}\n                              <span className=\"font-medium\">{creator.profile.tiktokFollowers.toLocaleString()}</span>\n                            </div>\n                          )}\n                          {creator.profile.instagramFollowers && (\n                            <div>\n                              <span className=\"text-muted-foreground\">Instagram:</span>{' '}\n                              <span className=\"font-medium\">{creator.profile.instagramFollowers.toLocaleString()}</span>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    {creator.accountStatus === 'active' && (\n                      <>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"gap-2\"\n                          onClick={() => handleAction(creator, 'suspend')}\n                          data-testid={`button-suspend-${creator.id}`}\n                        >\n                          <ShieldOff className=\"h-4 w-4\" />\n                          Suspend\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"gap-2\"\n                          onClick={() => handleAction(creator, 'ban')}\n                          data-testid={`button-ban-${creator.id}`}\n                        >\n                          <Ban className=\"h-4 w-4\" />\n                          Ban\n                        </Button>\n                      </>\n                    )}\n                    {(creator.accountStatus === 'suspended' || creator.accountStatus === 'banned') && (\n                      <Button\n                        variant=\"default\"\n                        size=\"sm\"\n                        className=\"gap-2\"\n                        onClick={() => handleAction(creator, 'unsuspend')}\n                        data-testid={`button-unsuspend-${creator.id}`}\n                      >\n                        <ShieldCheck className=\"h-4 w-4\" />\n                        Reactivate\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Confirmation Dialog */}\n      <Dialog open={actionDialog.open} onOpenChange={(open) => setActionDialog({ open, action: null })}>\n        <DialogContent data-testid=\"dialog-confirm-action\">\n          <DialogHeader>\n            <DialogTitle>\n              {actionDialog.action === 'suspend' && 'Suspend Creator Account'}\n              {actionDialog.action === 'ban' && 'Ban Creator Account'}\n              {actionDialog.action === 'unsuspend' && 'Reactivate Creator Account'}\n            </DialogTitle>\n            <DialogDescription>\n              {actionDialog.action === 'suspend' && \n                `Are you sure you want to suspend ${selectedCreator?.username}? They won't be able to access their account until unsuspended.`\n              }\n              {actionDialog.action === 'ban' && \n                `Are you sure you want to ban ${selectedCreator?.username}? This is a serious action that will permanently restrict their access.`\n              }\n              {actionDialog.action === 'unsuspend' && \n                `Are you sure you want to reactivate ${selectedCreator?.username}? They will regain full access to their account.`\n              }\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setActionDialog({ open: false, action: null });\n                setSelectedCreator(null);\n              }}\n              data-testid=\"button-cancel-action\"\n            >\n              Cancel\n            </Button>\n            <Button\n              variant={actionDialog.action === 'ban' ? 'destructive' : 'default'}\n              onClick={confirmAction}\n              disabled={suspendMutation.isPending || banMutation.isPending || unsuspendMutation.isPending}\n              data-testid=\"button-confirm-action\"\n            >\n              {suspendMutation.isPending || banMutation.isPending || unsuspendMutation.isPending\n                ? \"Processing...\" \n                : actionDialog.action === 'suspend' \n                  ? 'Suspend Account'\n                  : actionDialog.action === 'ban'\n                    ? 'Ban Account'\n                    : 'Reactivate Account'\n              }\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":15460}},"version":2}